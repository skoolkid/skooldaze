; Copyright 2008-2015, 2017, 2018 Richard Dymond (rjdymond@gmail.com)

; Message graphic buffer
;
; Used by the routine at #R44520 to prepare message graphic data before it is
; copied to the screen by the routine at #R45032.
b23296 DEFS 256

; System variables and BASIC program area
i23552 DEFS 1024

@start
@replace=/#BUG(?![A-Z])/#LINK:Bugs
@replace=/#FACT(?![A-Z])/#LINK:Facts
@replace=/#POKE(?![A-Z])/#LINK:Pokes
@replace=/#n\i/#N\1,,,1($)
@replace=/#b\i/#N\1,,,1(0x)/ (byte)
@replace=/#w\i/#N(\1,4)/ (word)
@writer=:skooldaze.SkoolDazeAsmWriter
; Skool Daze disassembly
; http://skoolkit.ca/
;
; Copyright 1984 Microsphere Computer Services Ltd (Skool Daze)
; Copyright 2008-2015, 2017, 2018 Richard Dymond (this disassembly)
@ofix+begin
;
; This disassembly contains fixes for the following bugs:
;   * Faulty jumping sound
@ofix+end
@bfix+begin
;   * Running teachers
;   * One-two one-two
;   * One-four three-four
;   * All play and no work
;   * Wrong command list
;   * MR ROCKITT as a boy
;   * Misspelt element
;   * MR CREAK and the empty class
@bfix+end
@rfix+begin
;   * Miss and hit
;   * Avoiding expulsion
;   * Doubly dirty blackboards
@rfix+end
@ofix+begin
; See http://skoolkit.ca/disassemblies/skool_daze/reference/bugs.html for full
; descriptions of these bugs.
@ofix+end
@bfix+begin
;
; This disassembly also contains fixes for the graphic glitches described at
; http://skoolkit.ca/disassemblies/skool_daze/graphics/glitches.html
@bfix+end

@isub+begin
@org
c24573 JP 26880
@isub+end

; Scroll the screen right one column
;
; Used by the routine at #R25810.
@label=RSCROLL
c24576 EXX           ;
 24577 LD HL,22558   ; {Point #REGhl' and #REGde' at the rightmost end of the
 24580 LD DE,22559   ; top row of attribute bytes on the screen}
 24583 LD BC,31      ; We need to scroll 31 attribute bytes at a time
 24586 EXX           ;
 24587 LD HL,16414   ; {Point #REGhl and #REGde at the rightmost end of the top
 24590 LD DE,16415   ; row of pixels on the screen}
 24593 LD BC,31      ; We need to scroll 31 display file bytes at a time
 24596 LD A,21       ; There are 21 rows of character squares to scroll
*24598 EX AF,AF'     ;
*24599 LD A,8        ; Each row of character squares contains 8 rows of pixels
*24601 PUSH HL       ;
 24602 PUSH DE       ;
 24603 LDDR          ; Scroll a row of pixels right one column
 24605 POP DE        ;
 24606 POP HL        ;
 24607 LD C,31       ; #REGbc=#w31
 24609 INC H         ; {Point #REGhl and #REGde at the next row of pixels
 24610 INC D         ; }
 24611 DEC A         ; Next row in this block of 8x32
 24612 JR NZ,24601   ; Jump back until this 8x32 pixel block has been scrolled
 24614 EXX           ;
 24615 LDDR          ; Scroll a row of attribute bytes right one column
 24617 LD C,63       ; {Point #REGhl' and #REGde' at the rightmost end of the
 24619 ADD HL,BC     ; next row of attribute bytes on the screen
 24620 EX DE,HL      ;
 24621 ADD HL,BC     ;
 24622 EX DE,HL      ; }
 24623 LD C,31       ; #REGbc'=#w31
 24625 EXX           ;
 24626 LD A,32       ; {Point #REGhl and #REGde at the rightmost end of the top
 24628 ADD A,E       ; row of the next 8x32 block of pixels
 24629 LD E,A        ;
 24630 LD A,32       ;
 24632 ADD A,L       ;
 24633 LD L,A        ; }
 24634 EX AF,AF'     ;
 24635 DEC A         ; Next row of character squares
 24636 JR Z,24654    ; Exit this loop if all 21 rows have been scrolled right
 24638 CP 13         ; Have we reached the middle third of the screen?
 24640 JR Z,24598    ; Jump if so
 24642 CP 5          ; Have we reached the bottom third of the screen?
 24644 JR Z,24598    ; Jump if so
 24646 EX AF,AF'     ;
 24647 LD A,H        ; {Point #REGhl and #REGde at the rightmost end of the top
 24648 SUB 8         ; row of the next 8x32 block of pixels
 24650 LD H,A        ;
 24651 LD D,A        ; }
 24652 JR 24599      ; Jump back to deal with the next row of character squares
; The 21 rows of character squares have been scrolled one place to the right.
; Now the leftmost column needs to be filled.
*24654 EXX           ;
 24655 LD HL,22528   ; {Point #REGhl' and #REGde' at the attribute file and
 24658 LD DE,16384   ; display file addresses for the top left of the screen,
 24661 INC C         ; and set #REGbc'=#w32; however, these values are not
                     ; used}
 24662 EXX           ;
 24663 LD A,(32512)  ; #REGa=leftmost column of the skool on-screen (0-64)
 24666 DEC A         ; {We are scrolling one column right
 24667 LD (32512),A  ; }
; This entry point is used by the routine at #R24731 with #REGa holding the
; x-coordinate of the rightmost column of the skool on-screen (31-95).
*24670 LD E,A        ; #REGe=X (x-coordinate of the far left or far right
                     ; column of the skool currently on-screen)
 24671 LD D,152      ; #REGd=Y (this is the y-coordinate of the top row of the
                     ; screen)
 24673 LD B,21       ; There are 21 rows on the screen
*24675 PUSH DE       ;
 24676 PUSH BC       ;
 24677 CALL 24843    ; Print the character square at (X,Y)
 24680 POP BC        ;
 24681 POP DE        ;
 24682 LD A,H        ; {Point #REGhl at the attribute file address
@rsub-begin
@label=XRSCROLLA
@rsub-end
 24683 RRCA          ; corresponding to the skool coordinates (X,Y)
 24684 RRCA          ;
 24685 RRCA          ;
 24686 ADD A,79      ;
 24688 LD H,A        ; }
 24689 SET 7,E       ; Point #REGde at the attribute byte for the skool
                     ; coordinates (X,Y)
 24691 LD A,(DE)     ; Pick the attribute byte up in #REGa
 24692 RES 7,E       ; Restore the skool coordinates (X,Y) to #REGde
 24694 LD (HL),A     ; Poke the attribute byte onto the screen
 24695 INC D         ; Next row (Y) of the screen
 24696 DJNZ 24675    ; Jump back until all 21 rows are done
 24698 RET           ;

@rsub-begin
; Unused
;
; Remnants of an old version of the routine at #R24576.
@label=XRSCROLL
u24699 SET 7,E       ; Point #REGde at the attribute byte for the skool
                     ; coordinates (X,Y)
 24701 LD A,(DE)     ; Pick the attribute byte up in #REGa
 24702 RES 7,E       ; Restore the skool coordinates (X,Y) to #REGde
 24704 EXX           ;
 24705 LD (HL),A     ; Poke the attribute byte onto the screen
 24706 LD A,C        ;
 24707 ADD A,E       ;
 24708 LD E,A        ;
 24709 JR C,24715    ;
 24711 LD A,D        ;
 24712 SUB 8         ;
 24714 LD D,A        ;
*24715 ADD HL,BC     ;
 24716 EXX           ;
 24717 EX DE,HL      ;
 24718 INC H         ;
 24719 DEC C         ; One more row done
 24720 POP DE        ;
 24721 JR NZ,24683   ; Jump back until all 21 rows are done
 24723 RET           ;
 24724 DEFS 7
@rsub-end

; Scroll the screen left one column
;
; Used by the routine at #R25820.
@label=LSCROLL
c24731 EXX           ;
 24732 LD HL,22529   ; {Point #REGhl' and #REGde' at the leftmost end of the
 24735 LD DE,22528   ; top row of attribute bytes on the screen}
 24738 LD BC,31      ; We need to scroll 31 attribute bytes at a time
 24741 EXX           ;
 24742 LD HL,16385   ; {Point #REGhl and #REGde at the leftmost end of the top
 24745 LD DE,16384   ; row of pixels on the screen}
 24748 LD BC,31      ; We need to scroll 31 display file bytes at a time
 24751 LD A,21       ; There are 21 rows of character squares to scroll
*24753 EX AF,AF'     ;
*24754 LD A,8        ; Each row of character squares contains 8 rows of pixels
*24756 PUSH HL       ;
 24757 PUSH DE       ;
 24758 LDIR          ; Scroll a row of pixels left one column
 24760 POP DE        ;
 24761 POP HL        ;
 24762 INC D         ; {Point #REGhl and #REGde at the next row of pixels
 24763 INC H         ; }
 24764 LD C,31       ; #REGbc=#w31
 24766 DEC A         ; Next row in this block of 8x32
 24767 JR NZ,24756   ; Jump back until this 8x32 pixel block has been scrolled
 24769 EXX           ;
 24770 LDIR          ; Scroll a row of attribute bytes left one column
 24772 INC HL        ; {Point #REGhl' and #REGde' at the leftmost end of the
 24773 INC DE        ; next row of attribute bytes on the screen}
 24774 LD C,31       ; #REGbc'=#w31
 24776 EXX           ;
 24777 LD A,32       ; {Point #REGhl and #REGde at the leftmost end of the top
 24779 ADD A,E       ; row of the next 8x32 block of pixels
 24780 LD E,A        ;
 24781 LD A,32       ;
 24783 ADD A,L       ;
 24784 LD L,A        ; }
 24785 EX AF,AF'     ;
 24786 DEC A         ; Next row of character squares
 24787 JR Z,24805    ; Exit this loop if all 21 rows have been scrolled left
 24789 CP 5          ; Have we reached the bottom third of the screen?
 24791 JR Z,24753    ; Jump if so
 24793 CP 13         ; Have we reached the middle third of the screen?
 24795 JR Z,24753    ; Jump if so
 24797 EX AF,AF'     ;
 24798 LD A,H        ; {Point #REGhl and #REGde at the leftmost end of the top
 24799 SUB 8         ; row of the next 8x32 block of pixels
 24801 LD H,A        ;
 24802 LD D,A        ; }
 24803 JR 24754      ; Jump back to deal with the next row of character squares
; The 21 rows of character squares have been scrolled one place to the left.
; Now the rightmost column needs to be filled.
*24805 EXX           ;
 24806 LD HL,22559   ; {Point #REGhl' and #REGde' at the attribute file and
 24809 LD DE,16415   ; display file addresses for the top right of the screen,
 24812 INC C         ; and set #REGbc'=#w32; however, these values are not
                     ; used}
 24813 EXX           ;
 24814 LD A,(32512)  ; #REGa=leftmost column of the skool on-screen (0-64)
 24817 INC A         ; {We are scrolling one column left
 24818 LD (32512),A  ; }
 24821 ADD A,C       ; #REGa=rightmost column of the skool on-screen (31-95)
 24822 JP 24670      ; Fill in the rightmost column

@rsub-begin
; Unused
;
; Probably remnants of an old version of the routine at #R24731.
u24825 LD A,30       ;
 24827 LD (32512),A  ; Set the new leftmost column of the skool on-screen
 24830 LD B,32       ; There are 32 character squares in each row of the screen

; Print a tile (unused)
;
; Used by the (unused) routine at #R25830.
;
; D Skool y-coordinate (152-172)
; E Skool x-coordinate (0-95)
@label=XPRINTTILE
c24832 LD A,(32512)  ; #REGa=leftmost column of the skool on-screen (0-64)
 24835 CP E          ; {Return if #REGe corresponds to a column that is
 24836 JR Z,24843    ; currently off-screen; otherwise continue into #R24843
 24838 RET NC        ;
 24839 ADD A,31      ;
 24841 CP E          ;
 24842 RET C         ; }
@rsub-end

; Print a tile
;
; Used by the routines at #R24576 and #R27026. Copies a tile of the skool into
; the back buffer at #R32513, superimposes character sprite tiles as
; appropriate, and then copies the resultant tile to the screen.
;
; D Skool y-coordinate (152-172)
; E Skool x-coordinate (0-95)
@label=PRINTTILE
c24843 LD A,E        ; #REGa=skool x-coordinate (0-95)
 24844 AND 96        ; {Now #REGh is #b128 if 0<=#REGe<32; #b136 if
 24846 RRCA          ; 32<=#REGe<64; or #b144 if 64<=#REGe<96
 24847 INC A         ;
 24848 RRCA          ;
 24849 LD H,A        ; }
 24850 LD A,(DE)     ; #REGa=skool UDG reference for the character square at
                     ; (#REGe,#REGd)
 24851 PUSH DE       ;
 24852 LD L,A        ; #REGhl=base address of the UDG bytes for the character
                     ; square at (#REGe,#REGd)
 24853 LD BC,2048    ; #REGb=8, #REGc=0
 24856 LD DE,32513   ; {Copy the 8 bytes of the skool UDG into the back buffer
@label=SKOOLUDG
*24859 LD A,(HL)     ; at #R32513
 24860 LD (DE),A     ;
 24861 INC H         ;
 24862 INC E         ;
 24863 DJNZ 24859    ; }
@rsub-begin
 24865 NOP           ;
@rsub-end
 24866 POP DE        ; Restore the skool coordinates to #REGde
 24867 LD B,21       ; There are 21 characters to consider
 24869 LD H,152      ; #b152=little boy no. 1
; Now we enter a loop that checks which part (if any) of each character's
; sprite appears at the skool coordinates in #REGde.
*24871 LD L,98       ; Byte #b98 of the character's buffer holds his
                     ; x-coordinate
 24873 LD A,E        ; #REGa=skool x-coordinate (0-95)
 24874 SUB (HL)      ; Subtract the character's x-coordinate
 24875 DEC HL        ; Byte #b97 of the character's buffer holds his
                     ; y-coordinate
 24876 JR C,24926    ; {Jump if no part of the character's sprite appears at
 24878 CP 3          ; this x-coordinate
 24880 JR NC,24926   ; }
 24882 ADD A,A       ; {Now #REGc is 0, 4 or 8, corresponding to the column
 24883 ADD A,A       ; (left, middle or right) of the character's sprite that
 24884 LD C,A        ; aligns with x-coordinate #REGe}
 24885 LD A,D        ; #REGa=skool y-coordinate (152-172)
 24886 SUB (HL)      ; Subtract the character's y-coordinate
 24887 JR C,24926    ; {Jump if no part of the character's sprite appears at
 24889 CP 4          ; this y-coordinate
 24891 JR NC,24926   ; }
 24893 ADD A,C       ; #REGa=#b0-#b11, corresponding to the sprite tile that
                     ; appears at (#REGe,#REGd)
 24894 EXX           ;
 24895 ADD A,173     ;
 24897 LD H,A        ; #REGh'=#b173-#b184
 24898 EXX           ;
 24899 LD L,96       ; {Pick up the character's animatory state in #REGa
 24901 LD A,(HL)     ; }
 24902 EXX           ;
 24903 LD L,A        ; #REGl'=character's animatory state
 24904 LD A,(HL)     ; #REGa=sprite tile UDG reference
 24905 AND A         ; Is it the blank UDG?
 24906 JR Z,24925    ; Jump if so
 24908 CALL 27914    ; Get the base address of the sprite tile UDG bytes in
                     ; #REGhl'
; The following inner loop superimposes the sprite tile onto the tile built up
; so far in the back buffer at #R32513 (which was originally populated with the
; relevant skool UDG).
 24911 LD B,8        ; There are 8 bytes in the UDG
 24913 LD DE,32513   ;
*24916 LD A,(DE)     ; #REGa=back buffer UDG byte
 24917 OR (HL)       ; #S/OR/ in the sprite tile UDG byte
 24918 INC H         ;
 24919 AND (HL)      ; #S/AND/ in the sprite tile UDG mask
 24920 INC H         ;
 24921 LD (DE),A     ;
 24922 INC E         ;
 24923 DJNZ 24916    ; Jump back until the UDG is done
*24925 EXX           ;
*24926 INC H         ; Next character
 24927 DJNZ 24871    ; Jump back to consider the next character
; The display tile (consisting of the skool UDG with all relevant sprite tiles
; superimposed) has been built. Figure out where in the display file it should
; be printed.
 24929 LD HL,32512   ; #R32512 holds the leftmost column of the skool on-screen
                     ; (0-64)
 24932 LD A,D        ; #REGa=skool y-coordinate (152-172)
 24933 AND 7         ; {Set #REGc to the LSB of the display file address
 24935 RRCA          ; corresponding to the screen coordinates (0,#REGd-152)
 24936 RRCA          ;
 24937 RRCA          ;
 24938 LD C,A        ; }
 24939 LD A,E        ; {#REGa=screen x-coordinate (0-31)
 24940 SUB (HL)      ; }
 24941 ADD A,C       ; {Set #REGl to the LSB of the display file address
 24942 LD L,A        ; corresponding to the skool coordinates (#REGe,#REGd)}
 24943 LD A,D        ; {#REGa=screen y-coordinate (0-20)
 24944 SUB 152       ; }
 24946 AND 24        ; {Set #REGh to the MSB of the display file address
 24948 ADD A,64      ; corresponding to the skool coordinates (#REGe,#REGd)
 24950 LD H,A        ; }
; Having computed the appropriate display file address in #REGhl, copy the tile
; from the back buffer to the screen.
 24951 LD B,8        ; {Copy the tile to the screen
 24953 LD DE,32513   ;
*24956 LD A,(DE)     ;
 24957 LD (HL),A     ;
 24958 INC H         ;
 24959 INC E         ;
 24960 DJNZ 24956    ; }
 24962 RET           ;

; Unused
@if({asm}>2)(remove=24963)
s24963 DEFS 9

; Collect one byte from a command list
;
@rsub-begin
; Used by the routines at #R25126, #R25303, #R25534, #R27453, #R27480, #R31834
@rsub+else
; Used by the routines at #R25126, #R25303, #R25534, #R27453, #R27480, #R31838
@rsub+end
; and #R32167. Collects a byte from a character's current command list and
; returns it in #REGa.
;
; H Character number (#b152-#b169)
@label=GETPARAM
c24972 PUSH HL       ; Save the character number temporarily
 24973 LD L,117      ; Bytes #b117 and #b118 of the character's buffer hold the
                     ; address reached in the command list
 24975 LD A,(HL)     ; Pick up the LSB of this address
 24976 INC (HL)      ; Move along one byte in the command list
 24977 JR NZ,24989   ; Jump unless the LSB flipped over to zero
@rsub-begin
 24979 NOP           ;
 24980 NOP           ;
@rsub-end
 24981 INC L         ; #REGl=#b118
 24982 INC (HL)      ; Increment the MSB
 24983 LD H,(HL)     ; {Set #REGh to the old MSB
 24984 DEC H         ; }
*24985 LD L,A        ; #REGhl=address of the byte to be picked up from the
                     ; command list
 24986 LD A,(HL)     ; Pick up the byte in #REGa
 24987 POP HL        ; Restore the character number to #REGh
 24988 RET           ;
*24989 INC L         ; #REGl=#b118
 24990 LD H,(HL)     ; #REGhl=address of the byte to be picked up from the
                     ; command list
 24991 JR 24985      ; Jump back to pick up the byte in #REGa

; Get a random number
;
; Used by the routines at #R25266, #R25303, #R27090, #R28672, #R29284, #R30464,
; #R31282, #R31968, #R31996, #R32048, #R62208, #R63573 and #R63749. Returns
; with a random number in #REGa.
@label=GETRANDOM
c24993 PUSH HL       ;
 24994 LD HL,(32766) ; #R32766 holds the random number seed
 24997 LD A,(23672)  ; Pick up the LSB of the system variable FRAMES
 25000 INC HL        ; {Add #w257 to the seed
 25001 INC H         ; }
 25002 XOR (HL)      ; #REGa=random number
 25003 LD (32766),HL ; Store the new seed
 25006 POP HL        ;
 25007 RET           ;

; Update a character's animatory state and location and update the SRB
;
; Used by many routines. Sets the new animatory state and location of a
; character, and updates the #R32524(screen refresh buffer) (SRB) accordingly.
;
; A New animatory state
; D New y-coordinate (154-169)
; E New x-coordinate (0-95)
; H Character number (#b152-#b172)
@label=UPDATEAS
c25008 LD L,96       ; Point #REGhl at byte #b96 of the character's buffer
 25010 LD (HL),A     ; Set the new animatory state
 25011 LD B,A        ; Store the new animatory state in #REGb for later
 25012 INC L         ; #REGl=#b97
 25013 LD (HL),D     ; Set the new y-coordinate
 25014 INC L         ; #REGl=#b98
 25015 LD (HL),E     ; Set the new x-coordinate
; This entry point is used by the routine at #R25108.
*25016 LD A,(32512)  ; #REGa=leftmost column of the skool on-screen (0-64)
 25019 SUB 3         ; Is the far left of the skool in view?
 25021 JR C,25025    ; Jump if so
 25023 CP E          ; Is the character off-screen to the left?
 25024 RET NC        ; Return if so (SRB does not need updating)
*25025 ADD A,34      ;
 25027 CP E          ; Is the character off-screen to the right?
 25028 RET C         ; Return if so (SRB does not need updating)
 25029 SUB 32        ; {#REGa=character's screen x-coordinate: -2<=#REGa<=31
 25031 CPL           ;
 25032 ADD A,E       ; }
 25033 PUSH HL       ; Save the character number
 25034 LD L,B        ; #REGl=character's new animatory state
 25035 LD H,173      ; Pages #b173-#b176 store UDG references for the left
                     ; column of the sprites
 25037 BIT 7,A       ; Is the left column of the sprite on-screen?
 25039 JR Z,25051    ; Jump if so
 25041 LD H,177      ; Pages #b177-#b180 store UDG references for the middle
                     ; column of the sprites
 25043 INC A         ; -1<=#REGa<=0
 25044 BIT 7,A       ; Is the middle column of the sprite on-screen at the
                     ; left?
 25046 JR Z,25051    ; Jump if so
 25048 INC A         ; #REGa=0
 25049 LD H,181      ; Pages #b181-#b184 store UDG references for the right
                     ; column of the sprites
; At this point, #REGa holds the leftmost column of the screen (0-31) occupied
; by the character's sprite, and #REGh holds the page number (#b173, #b177,
; #b181) corresponding to the leftmost column of the sprite that appears
; on-screen.
*25051 RLCA          ; {Set the instruction at #R27015 to #S/SET n,(HL)/ where
 25052 RLCA          ; n is the appropriate bit of the SRB byte that needs to
 25053 RLCA          ; be set
 25054 LD E,A        ;
 25055 AND 56        ;
 25057 ADD A,198     ;
@ssub=LD (27015+1),A
 25059 LD (27016),A  ; }
 25062 LD A,E        ; #REGa=8c (c=0-31: leftmost column of the screen occupied
                     ; by the sprite)
 25063 RLCA          ;
 25064 RLCA          ;
 25065 AND 3         ; #REGa=INT(c/8)
 25067 LD E,A        ; #REGe=INT(c/8)
 25068 LD A,D        ; #REGa=character's y-coordinate (155-169)
 25069 SUB 149       ; 5<=#REGa<=20
 25071 ADD A,A       ; {#REGa=4*(#REGd-149)
 25072 ADD A,A       ; }
 25073 ADD A,E       ; #REGa=4*(#REGd-149)+INT(c/8)
 25074 LD E,A        ; #REGe=12+4*(#REGd-152)+INT(c/8)
 25075 LD D,127      ; {Now #REGhl points to the relevant byte of the
 25077 EX DE,HL      ; #R32524(SRB), and #REGde points to the base address of
                     ; the sprite UDG references}
*25078 CALL 27008    ; Update the SRB for one column of the character's sprite
 25081 JR NZ,25104   ; Jump if we just updated the SRB for the right column of
                     ; the sprite
 25083 SUB 16        ; {Point #REGhl back to the relevant byte of the SRB
 25085 LD L,A        ; }
@ssub=LD A,(27015+1)
 25086 LD A,(27016)  ; {Prepare to change the instruction at #R27015 from
 25089 ADD A,8       ; #S/SET n,(HL)/ to #S/SET n+1,(HL)/}
@ssub=LD (27015+1),A
*25091 LD (27016),A  ; Change the instruction at #R27015 from #S/SET n,(HL)/ to
                     ; #S/SET n+1,(HL)/ or #S/SET 0,(HL)/
 25094 JR NC,25078   ; Jump back unless the instruction at #R27015 should be
                     ; changed to #S/SET 0,(HL)/ now
 25096 INC L         ; Move to the next byte of the SRB
 25097 LD A,L        ; {The zero flag will be set now if we 'wrapped around' to
 25098 AND 3         ; the left side of the screen, i.e. the next column of the
                     ; character sprite is off-screen to the right}
 25100 LD A,198      ; This will change the instruction at #R27015 to
                     ; #S/SET 0,(HL)/
 25102 JR NZ,25091   ; Jump back to consider the remaining on-screen columns of
                     ; the sprite
*25104 POP HL        ; Restore the character number (#b152-#b172) to #REGh
 25105 RET           ;

@rsub-begin
; Unused
s25106 DEFS 2
@rsub-end

; Update the SRB for a character's current animatory state and location
;
; Used by many routines. Updates the #R32524(screen refresh buffer) (SRB) for a
; character's current animatory state and location. Returns with the
; character's current coordinates in #REGde and animatory state in #REGa.
;
; H Character number (#b152-#b172)
@label=UPDATESRB
c25108 LD L,96       ; Point #REGhl at byte #b96 of the character's buffer
 25110 LD B,(HL)     ; #REGb=character's animatory state
 25111 INC L         ; #REGl=#b97
 25112 LD D,(HL)     ; #REGd=character's y-coordinate (154-169)
 25113 INC L         ; #REGl=#b98
 25114 LD E,(HL)     ; #REGe=character's x-coordinate (0-95)
 25115 CALL 25016    ; Update the SRB
 25118 LD L,96       ; Point #REGhl at byte #b96 of the character's buffer
 25120 LD A,(HL)     ; #REGa=character's animatory state
 25121 INC L         ; #REGl=#b97
 25122 LD D,(HL)     ; #REGd=character's y-coordinate (155-169)
 25123 INC L         ; #REGl=#b98
 25124 LD E,(HL)     ; #REGe=character's x-coordinate (0-95)
 25125 RET           ;

; Move the characters
;
; Called from the main loop at #R26471.
@label=MVCHARS
c25126 LD A,(32765)  ; #R32765 holds the number of the last character moved
 25129 CALL 25141    ; Move a character
 25132 LD A,(32765)  ;
 25135 CALL 25141    ; Move another character
 25138 LD A,(32765)  ;
*25141 CP 171        ; {Get the number of the next character to be moved
 25143 JR NZ,25147   ; (#b152-#b171) in #REGa and copy it to #R32765
 25145 LD A,151      ;
*25147 INC A         ;
 25148 LD (32765),A  ; }
 25151 LD H,A        ; #REGh=number of the character to be moved
 25152 CALL 25266    ; Stop now unless it's time to move this character
; The character shall be moved. From this point, the following steps are taken:
; .
; #TABLE(default,centre,:w)
; { =h Step | =h Action }
; { 1       | If there is an uninterruptible subcommand routine address in
;             bytes #b111 and #b112 of the character's buffer, jump to it }
; { 2       | Call the continual subcommand routine address in bytes #b124 and
;             #b125 of the character's buffer (and then return to step 3) }
; { 3       | If there is an interruptible subcommand routine address in bytes
;             #b105 and #b106 of the character's buffer, jump to it }
; { 4       | Restart the command list if bits 1 and 0 of byte #b122 of the
;             character's buffer are reset and set respectively }
; { 5       | If there is a primary command routine address in bytes #b99 and
;             #b100 of the character's buffer, jump to it }
; { 6       | Replace any continual subcommand routine address in bytes #b124
;             and #b125 of the character's buffer with #R25247 (#S/RET/) }
; { 7       | Collect the next primary command routine address from the command
;             list, place it into bytes #b99 and #b100 of the character's
;             buffer, and jump to it }
; TABLE#
; .
; The address of one of the following uninterruptible subcommand routines may
; be present in bytes #b111 and #b112 of a character's buffer:
; .
; #TABLE(default,centre)
; { =h Address | =h Description }
; { #R27206    | #D27206 }
; { #R27733    | #D27733 }
; { #R27748    | #D27748 }
; { #R27772    | #D27772 }
; { #R27932    | #D27932 }
; { #R28102    | #D28102 }
; { #R28544    | #D28544 }
; { #R28558    | #D28558 }
; { #R28642    | #D28642 }
; { #R28655    | #D28655 }
; { #R28716    | #D28716 }
; { #R28733    | #D28733 }
; { #R28744    | #D28744 }
; { #R28775    | #D28775 }
; { #R28786    | #D28786 }
; { #R28799    | #D28799 }
; { #R63390    | #D63374 }
; TABLE#
; .
; The address of one of the following continual subcommand routines will be
; present in bytes #b124 and #b125 of a character's buffer:
; .
; #TABLE(default,centre)
; { =h Address | =h Description }
; { #R25247    | #S/RET/ (do nothing) }
; { #R27126    | #D27126 }
; { #R28446    | #D28446 }
; { #R28672    | #D28672 }
; { #R32234    | #D32234 }
; { #R64042    | #D64042 }
; TABLE#
; .
; The address of one of the following interruptible subcommand routines (or an
; entry point thereof) may be present in bytes #b105 and #b106 of a character's
; buffer:
; .
; #TABLE(default,centre,:w)
; { =h Address | =h Description }
; { #R25404    | #D25404 }
; { #R25484    | #D25484 }
; { #R25488    | #D25488 }
; { #R29148    | #D29148 }
; { #R29175    | #D29160 }
; { #R29284    | #D29284 }
; { #R31110    | #D31110 }
; { #R31130    | #D31130 }
; { #R31648    | #D31648 }
; { #R31739    | #D31739 }
; { #R31944    | #D31944 }
; TABLE#
 25155 LD L,112      ; Bytes #b111 and #b112 of the character's buffer may
                     ; contain the address of an uninterruptible subcommand
 25157 LD A,(HL)     ; Pick up the MSB in #REGa
 25158 AND A         ; Is there an uninterruptible subcommand routine address
                     ; here?
 25159 JR NZ,25241   ; Jump to it if so
 25161 LD L,124      ; {Pick up in #REGde the continual subcommand routine
 25163 LD E,(HL)     ; address from bytes #b124 and #b125 of the character's
 25164 INC L         ; buffer; this is set to #R25247 (#S/RET/) initially by
 25165 LD D,(HL)     ; the startup routine at #R26880}
@nowarn
 25166 LD BC,25172   ; {Go to the continual subcommand routine address in bytes
 25169 PUSH BC       ; #b124 and #b125 of the character's buffer, and then
 25170 PUSH DE       ; return to #R25172 (below)
 25171 RET           ; }
; This entry point is used by the routine at #R25248.
*25172 LD L,106      ; Bytes #b105 and #b106 of the character's buffer may
                     ; contain the address of an interruptible subcommand
 25174 LD A,(HL)     ; Pick up the MSB in #REGa
 25175 AND A         ; Is there an interruptible subcommand routine address
                     ; here?
 25176 JR NZ,25241   ; Jump to it if so
@rsub-begin
 25178 LD L,121      ; {Byte #b121 of the character buffers is unused and
 25180 LD A,(HL)     ; always contains zero; hence this jump is always made
 25181 AND A         ;
 25182 JR Z,25191    ; }
 25184 LD (HL),0     ; {If the value of byte #b121 were not zero, this would
 25186 LD L,112      ; treat it as the MSB of a routine address, copy it to
 25188 LD (HL),A     ; byte #b112, and then jump to that routine
 25189 JR 25241      ; }
@rsub-end
; If we get here, that means there's no uninterruptible subcommand routine
; address in bytes #b111 and #b112 and no interruptible subcommand routine
; address in bytes #b105 and #b106 of the character's buffer at the moment. We
; take this opportunity to check whether a command list restart has been
; requested, by inspecting bit 0 of byte #b122. This bit is set by the routine
; at #R26342 when starting a new lesson, and by the routine at #R63931 when
; ERIC has accumulated 10000 lines or more and MR WACKER must find him and send
; him home. In addition, a command in the command list may have requested a
; restart (see #R31807, #R31815).
*25191 LD L,122      ; {Pick up byte #b122 of the character's buffer in #REGa
 25193 LD A,(HL)     ; }
 25194 RRCA          ; {If bit 1 is reset (which it always is) and bit 0 is
 25195 JR NC,25213   ; set, the command list will be restarted
 25197 RRCA          ;
 25198 JR C,25213    ; }
; The command list will be restarted.
 25200 RES 0,(HL)    ; Reset bit 0 of byte #b122
 25202 LD L,119      ; {Copy the start address of the command list from bytes
 25204 LD E,117      ; #b119 and #b120 of the character's buffer into bytes
 25206 LD D,H        ; #b117 and #b118 (which hold the address currently
 25207 LDI           ; reached in the command list); in effect, this restarts
 25209 LDI           ; the command list}
 25211 JR 25219      ; Collect the address of the first command from the
                     ; command list and jump to it
; The command list was not marked for a restart.
*25213 LD L,100      ; {Bytes #b99 and #b100 of the character's buffer hold the
 25215 LD A,(HL)     ; address of the current primary command routine from the
 25216 AND A         ; command list; jump to this routine address if it's
 25217 JR NZ,25241   ; present}
*25219 LD L,124      ; {Place #R25247 (#S/RET/) into bytes #b124 and #b125 of
@ssub=LD (HL),25247%256
 25221 LD (HL),159   ; the character's buffer, thus resetting the continual
 25223 INC L         ; subcommand
@ssub=LD (HL),25247/256
 25224 LD (HL),98    ; }
@rsub-begin
; This entry point is used by the routine at #R31834.
@rsub+else
; This entry point is used by the routine at #R31838.
@rsub+end
*25226 LD L,99       ; {Get the address of the next primary command routine
 25228 CALL 24972    ; from the command list and place it into bytes #b99 and
 25231 LD (HL),A     ; #b100 of the character's buffer and also into #REGbc
 25232 LD C,A        ;
 25233 INC L         ;
 25234 CALL 24972    ;
 25237 LD (HL),A     ;
 25238 LD B,A        ; }
 25239 JR 25244      ; Make an indirect jump to the routine address in #REGbc
*25241 LD B,A        ; {Pick up in #REGbc the address of the routine to hand
 25242 DEC L         ; over control of this character to
 25243 LD C,(HL)     ; }
*25244 LD L,122      ;
 25246 PUSH BC       ; Prepare to make an indirect jump to the routine address
                     ; in #REGbc
; This entry point is used by command lists #R64484(#b136), #R64493(#b138),
; #R64496(#b140), #R64516(#b142), #R64548(#b146), #R64560(#b148),
; #R64587(#b150), #R64619(#b154), #R64631(#b156), #R64658(#b158),
; #R64690(#b162), #R64702(#b164) and #R64729(#b166).
@label=DONOWT
 25247 RET           ;

; Terminate a command
;
; The main entry point is used by the routines at #R27206, #R28655 and #R28799.
; Removes the uninterruptible subcommand routine address from bytes #b111 and
; #b112 of the character's buffer, which has the effect of making the routine
; at #R25126 immediately hand control of the character back to the
; interruptible subcommand or the primary command.
@label=RM112
c25248 LD L,112      ; Byte #b112 of the buffer contains the MSB of the
                     ; uninterruptible subcommand routine address
 25250 JR 25258      ; Jump forward to replace it with 0
; This entry point is used by the routines at #R25404, #R25488, #R29160,
; #R29284, #R31110, #R31130, #R31648, #R31807 and #R31944. Removes the
; interruptible subcommand routine address from bytes #b105 and #b106 of the
; character's buffer, which has the effect of making the routine at #R25126
; immediately hand control of the character back to the primary command.
@label=RM106
*25252 LD L,106      ; Byte #b106 of the buffer contains the MSB of the
                     ; interruptible subcommand routine address
 25254 JR 25258      ; Jump forward to replace it with 0
; This entry point is used by the routines at #R25303, #R25750, #R27442,
; #R27480, #R31638, #R31807, #R32132, #R32158, #R32167, #R63374, #R63456 and
; #R63488. Removes the primary command routine address from bytes #b99 and
; #b100 of the character's buffer, which has the effect of making the routine
; at #R25126 move immediately to the next command in the command list.
@label=NEXTCMD
*25256 LD L,100      ; Byte #b100 of the buffer contains the MSB of the primary
                     ; command routine address
@label=RMADDR
*25258 LD A,(32765)  ; #REGa=number of the character being worked on
                     ; (#b152-#b171)
 25261 LD H,A        ; {Zero out the relevant routine address MSB (in byte
 25262 LD (HL),0     ; #b100, #b106 or #b112) in the character's buffer}
 25264 JR 25172      ; Re-enter the character-moving routine (#R25126) at the
                     ; checkpoint for the interruptible subcommand

; Determine whether a character should be moved (1)
;
; Used by the routine at #R25126. Returns to that routine if the character
; under consideration should be moved on this pass; otherwise drops the return
; address from the stack, thus skipping ahead to consider the next character.
; Also reinitialises the walking speed change delay counter in byte #b123 of
; the character's buffer when it reaches 0, and sets the new walking speed as
; appropriate: slow for teachers, fast or slow (at random) for boys.
;
; H Character number (#b152-#b171)
@label=DECIDEMV
c25266 LD L,123      ; {Byte #b123 contains a counter that is reset to a random
 25268 DEC (HL)      ; even number between 2 and 32; see below}
 25269 JR Z,25280    ; Jump if it's time to consider a change of pace
 25271 BIT 0,(HL)    ; Is the counter even?
 25273 RET Z         ; Return (to move the character) if so
 25274 DEC L         ; #REGl=#b122
 25275 BIT 7,(HL)    ; Is this character walking fast?
 25277 RET Z         ; Return (to move the character) if so
 25278 POP HL        ; Drop the return address from the stack so that the
                     ; character will not be moved this time round
 25279 RET           ; Return to consider the next character, or return to the
                     ; main loop
; It's time to consider a change of pace for the character being moved.
*25280 CALL 24993    ; #REGa=random number
 25283 AND 61        ; {#REGa=even number between 2 and 32, and the carry flag
 25285 ADD A,4       ; holds a random bit
 25287 RRA           ; }
 25288 LD (HL),A     ; Place this even number into byte #b123 of the
                     ; character's buffer
 25289 DEC L         ; #REGl=#b122
 25290 RL (HL)       ; {Bit 7 of byte #b122 is now equal to the random bit that
 25292 RRC (HL)      ; was pushed into the carry flag by the #S/RRA/
                     ; instruction above}
 25294 LD A,(HL)     ; {Bit 5 of byte #b122 is set for catapult pellets and
 25295 BIT 5,A       ; stampeding boys to ensure they always go at top speed}
 25297 JR Z,25367    ; Jump if we're not dealing with such a thing
 25299 RES 7,(HL)    ; Signal: fly or run at top speed
 25301 JR 25367      ; Jump over the routine at #R25303

; Make a character walk up and down until a certain time
;
; Used by command lists #R64484(#b136), #R64496(#b140), #R64516(#b142),
; #R64536(#b144), #R64548(#b146), #R64560(#b148), #R64587(#b150),
; #R64607(#b152), #R64619(#b154), #R64631(#b156), #R64658(#b158),
; #R64678(#b160), #R64690(#b162), #R64702(#b164), #R64729(#b166),
; #R64749(#b168), #R64761(#b170), #R64769(#b172), #R64785(#b174),
; #R64801(#b176), #R64809(#b178), #R64825(#b180), #R64869(#b186),
; #R64876(#b188), #R64923(#b198), #R64931(#b200), #R64939(#b202),
; #R64975(#b206), #R64230(#b208), #R64240(#b210), #R64265(#b212),
; #R64288(#b214), #R64314(#b216), #R64341(#b218) and #R64219(#b222) to make a
; character walk up and down within 7 spaces to the left of a fixed location
; (the 'walkabout origin') until a specified time, e.g. the end of the lesson
; or when a teacher arrives at the doorway of the classroom.
;
; H Character number (#b152-#b169)
; L #b122
@label=MVTILL
c25303 LD A,(HL)     ; {Reset bits 5 and 6 of byte #b122 of the character's
 25304 AND 159       ; buffer, indicating that he should no longer walk fast or
 25306 LD (HL),A     ; slow continuously (if he was doing so)}
 25307 CALL 24972    ; Collect the signal byte from the command list
 25310 LD L,101      ; {Place the signal byte in byte #b101 of the character's
 25312 LD (HL),A     ; buffer}
 25313 LD L,99       ; {Change the address in bytes #b99 and #b100 of the
@ssub=LD (HL),25317%256
@rsub=LD (HL),25317%256 ; character's buffer from #R25303 to #R25317 (below)
@rsub=INC L
@rsub=LD (HL),25317/256 ; }
 25315 LD (HL),229   ; character's buffer from #R25303 to #R25317 (below)}
; This entry point is used by the routines at #R27442 and #R27453.
*25317 LD L,101      ; {Collect the signal byte from byte #b101 of the
 25319 LD A,(HL)     ; character's buffer}
 25320 CALL 25374    ; Has this signal been raised?
 25323 JR Z,25356    ; Jump if not
; The time has come to stop moving about. However, before we move on in the
; command list, the character needs to return to the walkabout origin.
 25325 INC L         ; {Collect the x-coordinate of the walkabout origin from
 25326 LD A,(HL)     ; byte #b102 of the character's buffer}
 25327 LD L,98       ; Byte #b98 holds the character's x-coordinate
 25329 CP (HL)       ; Is the character at the walkabout origin?
 25330 JR NZ,25339   ; Jump if not
 25332 LD L,96       ; Byte #b96 holds the character's animatory state
 25334 BIT 0,(HL)    ; Is the character midstride?
 25336 JP Z,25256    ; Move to the next command in the command list if not
*25339 LD L,107      ; {Fill in the new walkabout destination (either the
 25341 LD (HL),A     ; origin or some location within 7 spaces to the left of
                     ; the origin)}
 25342 INC L         ; {Initialise the counter at byte #b108 to #b30, which
 25343 LD (HL),30    ; will give the character enough time to get to the
                     ; destination}
@nowarn
 25345 LD BC,25404   ; {Place the address of the interruptible subcommand
 25348 LD L,105      ; routine at #R25404 (guide character to destination) into
 25350 LD (HL),C     ; bytes #b105 and #b106 of the character's buffer
 25351 INC L         ;
 25352 LD (HL),B     ; }
 25353 INC L         ;
 25354 PUSH BC       ;
 25355 RET           ; Make an indirect jump to #R25404
; The signal has not been raised yet, so it's time for another mini-walkabout.
*25356 INC L         ; Point #REGhl at the x-coordinate of the walkabout origin
 25357 CALL 24993    ; #REGa=random number
 25360 AND 7         ; {-7<=#REGa<=0
 25362 SUB 7         ; }
 25364 ADD A,(HL)    ; Add the x-coordinate of the walkabout origin
 25365 JR 25339      ; Make this the new walkabout destination

; Determine whether a character should be moved (2)
;
; Continues from #R25266. So far, byte #b123 and bit 7 of byte #b122 of the
; character's buffer have been adjusted to designate a new period of walking or
; running. All that remains is to ensure that bit 7 of byte #b122 is set if the
; character is a teacher (teachers usually walk slowly).
;
; A Contents of byte #b122 of the character's buffer
; H Character number (#b152-#b171)
; L #b122
@label=DECIDEMV2
c25367 AND 80        ; {Check bit 6 (always reset) and bit 4 (set for teachers)
 25369 RET Z         ; of byte #b122, and return (to move the character) if
                     ; both are reset}
 25370 SET 7,(HL)    ; Signal: walk slowly (the norm for teachers)
 25372 RET           ; Return to the routine at #R25126 to move the character

@rsub-begin
; Unused
s25373 DEFB 0
@rsub-end

; Check whether a signal has been raised
;
; Used by the routines at #R25303 and #R32167. On entry, #REGa holds the event
; identifier, which will be one of:
; .
; #TABLE(default,centre,:w,,centre)
; { =h A | =h Description                                                   | =h Flags | =h Bit }
; { #b0  | End of lesson/playtime                                           | #R32712  | 0 }
; { #b8  | Teacher has arrived at the Map Room                              | #R32713  | 0 }
; { #b9  | Teacher has arrived at the Reading Room                          | #R32713  | 1 }
; { #b10 | Teacher has arrived at the Exam Room                             | #R32713  | 2 }
; { #b11 | Teacher has arrived at the White Room                            | #R32713  | 3 }
; { #b16 | Little boy no. 1 is ready to stampede                            | #R32714  | 0 }
; { #b17 | Little boy no. 1 is ready to stampede again                      | #R32714  | 1 }
; { #b26 | EINSTEIN or BOY WANDER is ready                                  | #R32715  | 2 }
; { #b27 | MR WACKER is ready                                               | #R32715  | 3 }
; { #b28 | ERIC has been told about EINSTEIN, BOY WANDER or ANGELFACE       | #R32715  | 4 }
; { #b29 | EINSTEIN has told MR WACKER what ERIC's up to, or ERIC has mumps | #R32715  | 5 }
; TABLE#
; .
; The routine returns with the zero flag reset if the corresponding signal has
; been raised.
;
; A Event ID from a command list
@label=CHECKSIG
c25374 PUSH AF       ; Save the event identifier briefly
 25375 AND 248       ; {Keep only bits 3-7 (the byte index) and shift them into
 25377 RRCA          ; bits 0-4
 25378 RRCA          ;
 25379 RRCA          ; }
@ssub=ADD A,32712%256
 25380 ADD A,200     ; {Modify the #S/LD A/,(m) instruction at #R25396 below so
@ssub=LD (25396+1),A
 25382 LD (25397),A  ; that m is #R32712, #R32713, #R32714 or #R32715}
 25385 POP AF        ; Restore the event identifier to #REGa
 25386 AND 7         ; Keep only bits 0-2 (the bit index)
 25388 ADD A,A       ; {Modify the #S/BIT n,A/ instruction at #R25399 below so
 25389 ADD A,A       ; that n=#REGa (0-7)
 25390 ADD A,A       ;
 25391 ADD A,71      ;
@ssub=LD (25399+1),A
 25393 LD (25400),A  ; }
@label=SIGBYTE
 25396 LD A,(32712)  ; Pick up the byte holding the signal flag for this event
                     ; (the operand of this instruction is modified earlier in
                     ; this routine)
@label=SIGBIT
 25399 BIT 0,A       ; Reset the zero flag if the signal has been raised (this
                     ; instruction is modified earlier in this routine to check
                     ; the appropriate bit)
 25401 RET           ;

@rsub-begin
; Unused
s25402 DEFS 2
@rsub-end

; Guide a character to an intermediate destination
;
; The address of this interruptible subcommand routine is placed into bytes
; #b105 and #b106 of the character's buffer by the routines at #R25303,
; #R25534, #R31854 and #R32048. It is used to make a character go straight to a
; destination (or intermediate destination) that is reachable without
; negotiating any staircases.
;
; H Character number (#b152-#b169)
@label=WALK
c25404 LD L,108      ; {The counter at byte #b108 of the character's buffer is
 25406 DEC (HL)      ; initialised by the calling routine to limit the amount
*25407 JP Z,25252    ; of time that this routine has control; terminate this
                     ; interruptible subcommand if the counter is now zero}
 25410 DEC L         ; {Collect the x-coordinate of the intermediate
 25411 LD A,(HL)     ; destination from byte #b107 of the character's buffer}
 25412 LD L,98       ; Byte #b98 of the character's buffer holds his
                     ; x-coordinate
 25414 CP (HL)       ; Has the character reached the intermediate destination?
 25415 JR NZ,25423   ; Jump if not
 25417 LD L,96       ; Byte #b96 of the character's buffer holds his animatory
                     ; state
 25419 BIT 0,(HL)    ; Is the character midstride?
 25421 JR Z,25407    ; Jump if not (nothing left to do)
*25423 CALL 25108    ; Update the SRB for the character's current location
 25426 LD C,A        ; Store the character's animatory state in #REGc
 25427 LD L,107      ; {Collect the x-coordinate of the intermediate
 25429 LD A,(HL)     ; destination from byte #b107 of the character's buffer}
 25430 CP E          ; #REGe holds the character's x-coordinate
 25431 LD A,C        ; #REGa=character's animatory state
 25432 JR NZ,25440   ; Jump unless the character has reached the destination
; The character has reached the destination, but he is midstride. To complete
; the journey, he must finish his stride. This entry point is also used by the
; routine at #R27772.
*25434 BIT 7,A       ; Is the character facing left?
 25436 JR Z,25449    ; Jump if so
 25438 JR 25471      ;
; The character has not yet reached the destination. Figure out his next move.
*25440 BIT 7,A       ; Now the zero flag indicates which way the character is
                     ; facing: set=left, reset=right
 25442 JR NC,25466   ; Jump if the character is to the left of his destination
; The character is to the right of his destination, and so must proceed
; leftwards.
 25444 RES 7,A       ; Make sure the character is facing left
 25446 JP NZ,25008   ; Update the character's animatory state and update the
                     ; SRB if he was facing right
*25449 INC A         ; #REGa=character's next animatory state
 25450 BIT 0,A       ; Will the character be midstride?
 25452 JP NZ,25008   ; Update the character's animatory state and update the
                     ; SRB if so
 25455 DEC E         ; #REGe=character's next x-coordinate (one to the left)
*25456 AND 3         ; {Calculate the character's next animatory state in #REGa
 25458 LD B,A        ;
 25459 LD A,C        ;
 25460 AND 252       ;
 25462 ADD A,B       ; }
 25463 JP 25008      ; Update the character's animatory state and location and
                     ; update the SRB
; The character is to the left of his destination, and so must proceed
; rightwards.
*25466 SET 7,A       ; Make sure the character is facing right
 25468 JP Z,25008    ; Update the character's animatory state and update the
                     ; SRB if the character was facing left
*25471 INC A         ; #REGa=character's next animatory state
 25472 BIT 0,A       ; Will the character be midstride?
 25474 JP NZ,25008   ; Update the character's animatory state and update the
                     ; SRB if so
 25477 INC E         ; #REGe=character's next x-coordinate (one to the right)
 25478 JR 25456      ; Jump back to update the character's animatory state and
                     ; location and update the SRB

@rsub-begin
; Unused
s25480 DEFS 4
@rsub-end

; Guide a character up a staircase
;
; The address of this interruptible subcommand routine is placed into bytes
; #b105 and #b106 of a character's buffer by the routine at #R25534 when the
; character has reached the bottom of a staircase he needs to ascend to reach
; his destination.
@label=ASCEND
c25484 LD B,255      ; Signal that the character is going up a staircase
 25486 JR 25490      ;

; Guide a character down a staircase
;
; The address of this interruptible subcommand routine is placed into bytes
; #b105 and #b106 of a character's buffer by the routine at #R25534 when the
; character has reached the top of a staircase he needs to descend to reach his
; destination.
;
; H Character number (#b152-#b169)
@label=DESCEND
c25488 LD B,1        ; Signal that the character is going down a staircase
; This entry point is used by the routine at #R25484 with #REGb=#b255.
*25490 LD L,107      ; Byte #b107 of the character's buffer holds the number of
                     ; movements remaining
 25492 DEC (HL)      ; Has the character finished going up or down the stairs?
 25493 JP Z,25252    ; Terminate this interruptible subcommand if so
 25496 PUSH BC       ; Save the direction indicator (in #REGb) briefly
 25497 CALL 25108    ; Update the SRB for the character's current location
 25500 POP BC        ; Restore the direction indicator to #REGb
 25501 LD C,A        ; #REGc=character's current animatory state
 25502 INC A         ; #REGa=character's next animatory state
 25503 BIT 0,A       ; Is the character midstride right now?
 25505 JR Z,25515    ; Jump if so
; The following four instructions calculate the character's next y-coordinate.
; The y-coordinate will be decremented if the character is going up the stairs
; and he's not midstride at the moment, incremented if he's going down the
; stairs and he is midstride at the moment, and otherwise unchanged.
 25507 DEC D         ;
*25508 INC B         ; Is the character going up the stairs?
 25509 JR Z,25512    ; Jump if so
 25511 INC D         ;
; At this point #REGa holds the character's new animatory state, and #REGde his
; new location.
*25512 JP 25008      ; Update the character's animatory state and location and
                     ; update the SRB
; The character is midstride. Now we calculate his next x-coordinate.
*25515 RLCA          ; {Set the carry flag if the character is facing left
 25516 CCF           ; }
 25517 SBC A,A       ; {#REGa=0 (facing right) or -2 (facing left)
 25518 ADD A,A       ; }
 25519 ADD A,E       ; {Set #REGe equal to the character's new x-coordinate
 25520 LD E,A        ;
 25521 INC E         ; }
 25522 LD A,C        ; #REGa=character's current animatory state
 25523 INC A         ; #REGa=character's next animatory state
 25524 BIT 1,A       ; Will the character be standing (phase 3)?
 25526 JR NZ,25508   ; Jump if so
 25528 SUB 4         ; Adjust the animatory state to standing (phase 1)
 25530 JR 25508      ;

@rsub-begin
; Unused
s25532 DEFS 2
@rsub-end

; Make a character go to a location
;
; Used by command lists #R64384(#b128), #R64410(#b130), #R64436(#b132),
; #R64458(#b134), #R64484(#b136), #R64496(#b140), #R64516(#b142),
; #R64536(#b144), #R64548(#b146), #R64560(#b148), #R64587(#b150),
; #R64607(#b152), #R64619(#b154), #R64631(#b156), #R64658(#b158),
; #R64678(#b160), #R64690(#b162), #R64702(#b164), #R64729(#b166),
; #R64749(#b168), #R64761(#b170), #R64769(#b172), #R64785(#b174),
; #R64801(#b176), #R64809(#b178), #R64825(#b180), #R64857(#b184),
; #R64869(#b186), #R64876(#b188), #R64883(#b190), #R64892(#b192),
; #R64923(#b198), #R64931(#b200), #R64939(#b202), #R64230(#b208),
; #R64265(#b212), #R64288(#b214), #R64314(#b216), #R64341(#b218) and
; #R64219(#b222) to make a character go to a specified place.
;
; H Character number (#b152-#b169)
; L #b122
@label=GOTO
c25534 LD A,(HL)     ; {Reset bits 5 and 6 of byte #b122 of the character's
 25535 AND 159       ; buffer, indicating that he should no longer walk fast or
 25537 LD (HL),A     ; slow continuously (if he was doing so)}
 25538 LD L,101      ; {Get the destination y-coordinate from the command list
 25540 CALL 24972    ; and place it in byte #b101 of the character's buffer
 25543 LD (HL),A     ; }
 25544 INC L         ; {Get the destination x-coordinate from the command list
 25545 CALL 24972    ; and place it in byte #b102 of the character's buffer
 25548 LD (HL),A     ; }
; This entry point is used by the routines at #R27111 and #R27266.
@rsub-begin
*25549 NOP           ;
 25550 CALL 27888    ; Make the character stand up if he's not already
@rsub+else
*25549 CALL 27888    ; Make the character stand up if he's not already
@rsub+end
; The address of this entry point is placed into bytes #b99 and #b100 of the
; character's buffer (by the routine at #R27888, called above, and by the
; routine at #R27111) so that we return here after the character has stood up.
@label=READYTOGO
*25553 LD L,97       ; {Collect the character's x- and y-coordinates in #REGe
 25555 LD D,(HL)     ; and #REGd
 25556 INC L         ;
 25557 LD E,(HL)     ; }
 25558 LD L,101      ; Bytes #b101 and #b102 of the character's buffer contain
                     ; the destination coordinates
@nowarn
 25560 LD BC,25404   ; Point #REGbc at #R25404 (guide character to intermediate
                     ; destination)
 25563 LD A,D        ; #REGa=character's y-coordinate
 25564 CP (HL)       ; Is the character on the same floor as his destination?
 25565 JP Z,25750    ; Jump if so
 25568 CP 155        ; Is the character on the top floor?
 25570 JP Z,25695    ; Jump if so
 25573 CP 169        ; Is the character on the bottom floor?
 25575 JP Z,25700    ; Jump if so
; The character is on the middle floor and is destined for another floor.
 25578 LD A,(HL)     ; #REGa=y-coordinate of destination
 25579 CP 169        ; Set the zero flag if the character is going to the
                     ; bottom floor
 25581 LD A,38       ; This is the x-coordinate of the wall between the White
                     ; and Exam Rooms
 25583 JR NZ,25639   ; Jump if the character is going to the top floor
; This entry point is used by the routine at #R25695 with #REGa=57 (the
; x-coordinate of the wall between the Map and Reading Rooms).
*25585 CP E          ; #REGe holds the character's x-coordinate
 25586 LD A,12       ; This is the x-coordinate of the tops of the staircases
                     ; at the left of the skool
 25588 JR NC,25592   ; Jump if the character is to the left of the wall whose
                     ; x-coordinate (38 or 57) was in #REGa
; This entry point is used by the routine at #R25750 when the character is on
; the right-middle or right-top floor and needs to go down the stairs to get to
; his destination.
*25590 LD A,77       ; This is the x-coordinate of the tops of the staircases
                     ; at the right of the skool
; This entry point is used by the routine at #R25750 with #REGa=12 (the
; x-coordinate of the tops of the staircases at the left of the skool) when the
; character is on the left-middle or left-top floors and needs to go down the
; stairs to get to his destination.
*25592 CP E          ; Is the character at the top of the stairs he needs to
                     ; descend?
 25593 JR NZ,25627   ; Jump if not
 25595 LD L,96       ; Byte #b96 of the character's buffer holds his animatory
                     ; state
 25597 BIT 0,(HL)    ; Is the character midstride (about to descend)?
 25599 JR NZ,25627   ; Jump if so
 25601 CP 48         ; Is the target staircase on the right of the skool?
 25603 JR NC,25611   ; Jump if so
 25605 BIT 7,(HL)    ; Is the character facing left?
 25607 JR Z,25615    ; Jump if so
 25609 JR 25623      ;
; The character must go to the top of a staircase at the right of the skool.
*25611 BIT 7,(HL)    ; Is the character facing left?
 25613 JR Z,25623    ; Jump if so
; This entry point is used by the routine at #R25700.
*25615 CALL 25108    ; Update the SRB for the character's current location
 25618 XOR 128       ; Turn the character round
 25620 JP 25008      ; Update the character's animatory state and location and
                     ; update the SRB
@ssub=LD C,25488%256
@rsub=LD BC,25488
*25623 LD C,144      ; #REGbc=#R25488 (guide character down stairs)
; This entry point is used by the routine at #R25700.
*25625 LD A,15       ; Going up or down a staircase entails 15 movements
; This entry point is used by the routines at #R25700 and #R25750.
*25627 LD L,105      ; {Place the interruptible subcommand routine address in
 25629 LD (HL),C     ; #REGbc (#R25404, #R25484 or #R25488) into bytes #b105
 25630 INC L         ; and #b106 of the character's buffer
 25631 LD (HL),B     ; }
 25632 INC L         ; {Byte #b107 will contain either (a) the x-coordinate of
 25633 LD (HL),A     ; the next intermediate destination (i.e. the final
                     ; destination itself, or the top or bottom of the next
                     ; staircase the character must negotiate first)
                     ; (#REGbc=#R25404), or (b) 15, that being the number of
                     ; movements required to ascend or descend a staircase
                     ; (#REGbc=#R25484 or #R25488)}
 25634 INC L         ; {Initialise byte #b108 to 9; this ensures that the
 25635 LD (HL),9     ; routine at #R25404 will move the character at most 9
                     ; paces towards the destination before relinquishing
                     ; control (and thus giving the routine at #R25126 a chance
                     ; to check whether the command list should be restarted,
                     ; e.g. for a new lesson)}
 25637 PUSH BC       ; {Make an indirect jump to #R25404, #R25484 or #R25488
 25638 RET           ; }
; The character is on the middle floor but is destined for the top floor. At
; this point #REGa=38 (the x-coordinate of the wall between the White and Exam
; Rooms).
*25639 INC L         ; Point #REGhl at the destination x-coordinate
 25640 CP E          ;
 25641 LD A,57       ; This is the x-coordinate of the wall between the Map and
                     ; Reading Rooms
 25643 JR NC,25667   ; Jump if the character is to the left of the White Room
                     ; wall
 25645 CP (HL)       ; (#REGhl) holds the destination x-coordinate
 25646 LD A,70       ; This is the x-coordinate of the bottoms of the
                     ; staircases at the right of the skool
 25648 JR NC,25590   ; Jump if the destination is to the left of the Map Room
                     ; wall
 25650 CP E          ; Is the character at the bottom of the staircase just
                     ; outside the Exam Room?
 25651 JR NZ,25627   ; Jump if not (to send the character there)
 25653 LD L,96       ; Byte #b96 of the character's buffer holds his animatory
                     ; state
 25655 BIT 0,(HL)    ; Is the character midstride?
 25657 JR NZ,25627   ; Jump if so (to finish the stride)
 25659 BIT 7,(HL)    ; Is the character facing left?
 25661 JR Z,25615    ; Jump if so (to turn the character round)
@ssub=LD C,25484%256
@rsub=LD BC,25484
 25663 LD C,140      ; #REGbc=#R25484 (guide character up stairs)
 25665 JR 25625      ;
; The character is on the middle floor to the left of the White Room wall, and
; is destined for the top floor. At this point #REGa=57 (the x-coordinate of
; the wall between the Map and Reading Rooms).
*25667 CP (HL)       ; (#REGhl) holds the destination x-coordinate
 25668 LD A,12       ; This is the x-coordinate of the tops of the staircases
                     ; at the left of the skool
 25670 JR C,25592    ; Jump if the destination is to the right of the Map Room
                     ; wall
 25672 LD A,19       ; This is the x-coordinate of the bottoms of the
                     ; staircases at the left of the skool
 25674 CP E          ; Is the character at the bottom of the staircase just
                     ; outside the White Room?
 25675 JR NZ,25627   ; Jump if not (to send the character there)
 25677 LD L,96       ; Byte #b96 of the character's buffer holds his animatory
                     ; state
 25679 BIT 0,(HL)    ; Is the character midstride?
 25681 JR NZ,25627   ; Jump if so (to finish the stride)
 25683 BIT 7,(HL)    ; Is the character facing right?
 25685 JR NZ,25615   ; Jump if so (to turn the character round)
@ssub=LD C,25484%256
@rsub=LD BC,25484
 25687 LD C,140      ; #REGbc=#R25484 (guide character up stairs)
 25689 JR 25625      ;

@rsub-begin
; Unused
s25691 DEFS 4
@rsub-end

; Guide a character from the top floor to another floor
;
; Used by the routine at #R25534 when the character under consideration is on
; the top floor but is destined for another floor.
@label=TOP
c25695 LD A,57       ; This is the x-coordinate of the wall between the Map and
                     ; Reading Rooms
 25697 JP 25585      ; Jump back into the main routine

; Guide a character from the bottom floor to another floor
;
; Used by the routine at #R25534 when the character under consideration is on
; the bottom floor but is destined for another floor.
;
; BC #R25404
; E Character's x-coordinate
; H Character number (#b152-#b169)
; L #b101
@label=BOTTOM
c25700 LD A,(HL)     ; #REGa=destination y-coordinate
 25701 CP 162        ; Set the zero flag if the character is going to the
                     ; middle floor
 25703 LD A,38       ; This is the x-coordinate of the wall between the White
                     ; and Exam Rooms
 25705 JR Z,25709    ; Jump if the character is going to the middle floor
 25707 LD A,57       ; This is the x-coordinate of the wall between the Map and
                     ; Reading Rooms
*25709 INC L         ; {Set the carry flag if the character is destined for
 25710 CP (HL)       ; some place to the right of the wall referred to by
                     ; #REGa}
 25711 LD A,70       ; This is the x-coordinate of the bottoms of the
                     ; staircases at the right of the skool
 25713 JR C,25717    ; Jump if the character must go to a staircase on the
                     ; right
 25715 LD A,19       ; This is the x-coordinate of the bottoms of the
                     ; staircases at the left of the skool
*25717 CP E          ; Is the character at the bottom of the staircase he must
                     ; climb?
 25718 JP NZ,25627   ; Jump if not (to send the character there)
 25721 LD L,96       ; Byte #b96 of the character's buffer holds his animatory
                     ; state
 25723 BIT 0,(HL)    ; Is the character midstride?
 25725 JP NZ,25627   ; Jump if so (to finish the stride)
 25728 CP 48         ; Is the character at the bottom of a staircase at the
                     ; right of the skool?
 25730 JR NC,25739   ; Jump if so
 25732 BIT 7,(HL)    ; Is the character facing right?
 25734 JP NZ,25615   ; Turn him round if so
 25737 JR 25744      ;
*25739 BIT 7,(HL)    ; Is the character facing left?
 25741 JP Z,25615    ; Turn him round if so
@ssub=LD C,25484%256
@rsub=LD BC,25484
*25744 LD C,140      ; {Set #REGbc=#R25484 (guide character up stairs) and
 25746 JP 25625      ; place this interruptible subcommand routine address into
                     ; bytes #b105 and #b106 of the character's buffer}

@rsub-begin
; Unused
s25749 DEFB 0
@rsub-end

; Guide a character to a location on the same floor
;
; Used by the routine at #R25534 when the character under consideration is on
; the same floor as his destination.
;
; DE Character's coordinates
; H Character number (#b152-#b169)
; L #b101
@label=SAMEFLOOR
c25750 INC L         ; Point #REGhl at the destination x-coordinate
 25751 LD A,E        ; #REGa=character's current x-coordinate
 25752 CP (HL)       ; Is the character at the destination?
 25753 JR NZ,25765   ; Jump if not
 25755 LD L,96       ; Byte #b96 holds the character's animatory state
 25757 BIT 0,(HL)    ; Is the character midstride?
 25759 JP Z,25256    ; Move to the next command in the command list if not
 25762 JP 25627      ; Otherwise finish the stride
; The character hasn't reached his destination yet. Figure out his next move.
*25765 LD A,D        ; #REGa=character's y-coordinate
 25766 CP 169        ; Set the zero flag if the character is on the bottom
                     ; floor
 25768 LD A,(HL)     ; #REGa=destination x-coordinate
 25769 JP Z,25627    ; Jump if the character is on the bottom floor
; The character is on the middle floor or the top floor. But which side of the
; wall?
 25772 LD A,D        ; #REGa=character's y-coordinate
 25773 CP 155        ; Set the zero flag if the character is on the top floor
 25775 LD A,57       ; This is the x-coordinate of the wall between the Map and
                     ; Reading Rooms
 25777 JR Z,25781    ; Jump if the character is on the top floor
 25779 LD A,38       ; This is the x-coordinate of the wall between the White
                     ; and Exam Rooms
*25781 CP E          ; Is the character to the left of the wall?
 25782 JR NC,25792   ; Jump if so
; The character is on the right side of the wall.
 25784 CP (HL)       ; Compare the wall's x-coordinate (in #REGa) with the
                     ; destination x-coordinate
 25785 LD A,(HL)     ; #REGa=destination x-coordinate
 25786 JP C,25627    ; Jump if the character doesn't need to go down the stairs
 25789 JP 25590      ; Send the character to the top of the staircase
; The character is on the left side of the wall.
*25792 CP (HL)       ; Compare the wall's x-coordinate (in #REGa) with the
                     ; destination x-coordinate
 25793 LD A,(HL)     ; #REGa=destination x-coordinate
 25794 JP NC,25627   ; Jump if the character doesn't need to go down the stairs
 25797 LD A,12       ; This is the x-coordinate of the tops of the staircases
                     ; at the left of the skool
 25799 JP 25592      ; Send the character to the top of the staircase

@rsub-begin
; Unused
s25802 DEFS 8
@rsub-end

; Scroll the screen right 8 columns
;
; Used by the routine at #R25856.
@label=RSCROLL8
c25810 LD B,8        ; There are 8 columns to scroll
*25812 PUSH BC       ;
 25813 CALL 24576    ; Scroll one column right
 25816 POP BC        ;
 25817 DJNZ 25812    ; Jump back till all 8 columns are done
 25819 RET           ;

; Scroll the screen left 8 columns
;
; Used by the routines at #R25856 and #R63768.
@label=LSCROLL8
c25820 LD B,8        ; There are 8 columns to scroll
*25822 PUSH BC       ;
 25823 CALL 24731    ; Scroll one column left
 25826 POP BC        ;
 25827 DJNZ 25822    ; Jump back till all 8 columns are done
 25829 RET           ;

@rsub-begin
; Update the display (unused)
;
; This routine is not used. It is probably the predecessor of the routine at
; #R27026.
@label=XUPDATE
c25830 LD HL,32521   ; At one time, #R32521 would have held the number of
                     ; on-screen character squares that need refreshing
 25833 LD A,(HL)     ; Pick up this number in #REGa
 25834 LD (HL),0     ; Reset the number to 0
 25836 INC L         ; #REGhl=#R32522
*25837 AND A         ; Do any character squares need refreshing?
 25838 RET Z         ; Return if not
 25839 LD D,(HL)     ; {Pick up the coordinates of the first character square
 25840 INC L         ; that needs refreshing in #REGde
 25841 LD E,(HL)     ; }
 25842 INC L         ; Point #REGhl at the next set of coordinates
 25843 PUSH HL       ;
 25844 PUSH AF       ;
 25845 CALL 24832    ; Print the character square at the coordinates in #REGde
 25848 POP AF        ;
 25849 POP HL        ;
 25850 DEC A         ; Next character square
 25851 JR 25837      ; Jump back until all character squares have been printed

; Unused
s25853 DEFS 3
@rsub-end

; Move ERIC from the midstride position and scroll the screen if necessary
;
; Called from the main loop at #R26471 when ERIC is midstride.
@label=MVERIC2
c25856 LD HL,32745   ; {Set ERIC's midstride action timer at #R32745 to 0 to
 25859 LD A,(HL)     ; indicate that ERIC will no longer be midstride after
 25860 LD (HL),0     ; this movement}
 25862 DEC L         ; {Set ERIC's main action timer at #R32744 equal to the
 25863 LD (HL),A     ; previous contents of #R32745}
@ssub=LD HL,44128+3
 25864 LD HL,44131   ; Point #REGhl at byte #b99 of ERIC's buffer
 25867 CALL 25108    ; Update the SRB for ERIC's current location
 25870 LD L,99       ; {Pick up ERIC's next animatory state in #REGa (from byte
 25872 LD A,(HL)     ; #b99 of his buffer) and his next location in #REGde
 25873 INC L         ; (from bytes #b100 and #b101)
 25874 LD D,(HL)     ;
 25875 INC L         ;
 25876 LD E,(HL)     ; }
 25877 CALL 25008    ; Update ERIC's animatory state and location and update
                     ; the SRB
 25880 CALL 27026    ; Update the display
 25883 CALL 65106    ; Make a walking sound effect
; Decide whether the screen should be scrolled left or right.
 25886 LD HL,44128   ; Point #REGhl at byte #b96 of ERIC's buffer
 25889 LD A,(32512)  ; #REGa=X: leftmost column of the skool on screen (0-64)
 25892 BIT 7,(HL)    ; Is ERIC facing left?
 25894 LD L,98       ;
 25896 JR Z,25907    ; Jump if so
 25898 CP 64         ; Is the far right end of the skool on screen?
 25900 RET Z         ; Return if so
 25901 SUB (HL)      ; #REGa=X-x (x=ERIC's x-coordinate)
 25902 CP 234        ; Is ERIC's screen x-coordinate 22?
 25904 RET NZ        ; Return if not
 25905 JR 25820      ; Otherwise scroll the screen left 8 columns
*25907 AND A         ; Is the far left end of the skool on screen (X=0)?
 25908 RET Z         ; Return if so
 25909 SUB (HL)      ; #REGa=X-x (x=ERIC's x-coordinate)
 25910 CP 247        ; Is ERIC's screen x-coordinate 9?
 25912 RET NZ        ; Return if not
 25913 JP 25810      ; Otherwise scroll the screen right 8 columns

; Put ERIC midstride, or raise his arm while writing on a blackboard
;
; Used by the routines at #R25983, #R26084, #R26194 and #R63056.
;
; A ERIC's next animatory state (midstride or arm up)
; B ERIC's post-midstride animatory state
; DE ERIC's post-midstride coordinates
; HL ERIC's midstride coordinates
@label=MVERIC1
c25916 PUSH HL       ; {Store ERIC's midstride/arm-up animatory state and
 25917 PUSH AF       ; coordinates briefly}
@ssub=LD HL,44128+3
 25918 LD HL,44131   ; Point #REGhl at byte #b99 of ERIC's buffer
 25921 LD (HL),B     ; {Store ERIC's post-midstride animatory state and
 25922 INC L         ; coordinates in bytes #b99, #b100 and #b101 of his buffer
 25923 LD (HL),D     ;
 25924 INC L         ;
 25925 LD (HL),E     ; }
 25926 CALL 25108    ; Update the SRB for ERIC's current location
 25929 POP AF        ; {Restore ERIC's midstride/arm-up animatory state and
 25930 POP DE        ; location to #REGa and #REGde}
 25931 CALL 25008    ; Update ERIC's animatory state and location and update
                     ; the SRB
 25934 LD L,4        ;
 25936 LD A,(32764)  ; #R32764 holds the ASCII code of the last keypress
 25939 BIT 5,A       ; Was the last keypress upper case (fast)?
 25941 JR Z,25945    ; Jump (with #REGl=4: fast) if so
 25943 LD L,9        ; Otherwise set #REGl=9 (slow)
*25945 LD H,L        ; {Set appropriate values for ERIC's main action timer
 25946 LD (32744),HL ; (#R32744) and midstride action timer (#R32745)}
 25949 JP 65106      ; Make a walking (or writing-on-board) sound effect

@rsub-begin
; Unused
s25952 DEFS 4
@rsub-end

; Check whether ERIC is sitting or lying down
;
; Used by the routines at #R25983, #R26084, #R26194 and #R26282. Returns with
; ERIC's status flags in #REGa, and the zero flag reset if ERIC is lying on his
; back or sitting on a chair, the stairs, or the floor.
@label=STANDING
c25956 LD A,(32763)  ; Collect ERIC's status flags from #R32763
 25959 BIT 7,A       ; Reset the zero flag if ERIC is sitting or lying down
 25961 RET           ;

; Turn ERIC round
;
; Used by the routines at #R25983, #R26084, #R26194 and #R26282.
@label=TURNERIC
c25962 LD H,172      ; #b172=ERIC
 25964 CALL 25108    ; Update the SRB for ERIC's current location
 25967 XOR 128       ; #REGa=animatory state of ERIC facing the other way
 25969 CALL 25008    ; Update ERIC's animatory state and update the SRB
 25972 CALL 65106    ; Make a sound effect
 25975 LD HL,32744   ; {Set ERIC's action timer at #R32744 to 5
 25978 LD (HL),5     ; }
 25980 RET           ;

@rsub-begin
; Unused
;
; Probably remnants of an old version of the routine at #R25962.
u25981 DEFB 9        ; Probably the operand of #S/LD (HL)/,n (which would have
                     ; set ERIC's action timer at #R32744 to 9)
 25982 RET
@rsub-end

; 'A' pressed - down
;
; The address of this routine is found in the table of keypress handling
; routines at #R26624. It is called from the main loop at #R26471 when 'A' or
; '6' is pressed, and is also used by the routines at #R26194 and #R26282.
;
; B ERIC's animatory state
; DE ERIC's coordinates
@label=DOWN
c25983 CALL 25956    ; Is ERIC sitting or lying down?
 25986 RET NZ        ; Return if so
@rsub-begin
 25987 BIT 6,A       ; {Bit 6 of ERIC's status flags at #R32763 is always
                     ; reset, so this jump
@ofix-begin
@nowarn
 25989 JR NZ,26068   ; (which should be to #R26067)
@ofix+else
 25989 JR NZ,26067
@ofix+end
                     ; is never made}
@rsub-end
 25991 LD A,D        ; #REGa=ERIC's y-coordinate
 25992 CP 169        ; Is ERIC on the bottom floor?
 25994 JR Z,26067    ; Jump forward to move him left or right if so
 25996 CP 162        ; Is ERIC on the middle floor?
 25998 JR Z,26047    ; Jump if so
 26000 CP 155        ; Is ERIC on the top floor?
 26002 JR Z,26047    ; Jump if so
; ERIC's not on the top, middle or bottom floor, so he must be on a staircase.
; Should he go down a step, or turn round first?
 26004 LD A,E        ; #REGa=ERIC's x-coordinate
 26005 CP 48         ; Set the carry flag if ERIC's on a staircase at the left
                     ; of the skool
 26007 BIT 7,B       ; Set the zero flag if ERIC is facing left
 26009 JR C,26016    ; Jump if ERIC's on a staircase at the left of the skool
 26011 JP NZ,25962   ; Turn ERIC round if he's facing up a staircase at the
                     ; right of the skool
 26014 JR 26019      ;
*26016 JP Z,25962    ; Turn ERIC round if he's facing up a staircase at the
                     ; left of the skool
; ERIC's at the top of or on a staircase, facing the bottom of it.
*26019 LD H,D        ; {Copy ERIC's coordinates to #REGhl
 26020 LD L,E        ; }
@rsub-begin
 26021 NOP           ;
@rsub-end
 26022 INC D         ; Down a step
 26023 DEC E         ; One pace to the left
 26024 LD B,2        ; #AS2=ERIC standing, facing left
 26026 CP 48         ; Is ERIC on a staircase on the right side of the skool?
 26028 JR NC,26034   ; Jump if so
 26030 LD B,130      ; #AS130=ERIC standing, facing right
 26032 INC E         ; {One pace to the right (taking into the account the one
 26033 INC E         ; pace to the left made above)}
*26034 LD A,B        ; #REGa=#AS2(#b2/#b130)
 26035 BIT 0,L       ; {#REGa=#AS1(#b1/#b129), #REGb=#AS2(#b2/#b130) if ERIC's
 26037 JR Z,26043    ; current x-coordinate is even; #REGa=#AS3(#b3/#b131),
 26039 DEC B         ; #REGb=#AS0(#b0/#b128) if ERIC's current x-coordinate is
 26040 DEC B         ; odd
 26041 ADD A,2       ;
*26043 DEC A         ; }
 26044 JP 25916      ; Update ERIC's animatory state and location
; ERIC is on the middle floor or the top floor.
*26047 LD A,E        ; #REGa=ERIC's x-coordinate
 26048 CP 12         ; This is the x-coordinate of the tops of the staircases
                     ; at the left of the skool
 26050 JR NZ,26059   ; Jump unless ERIC is there
 26052 BIT 7,B       ; Is ERIC facing left?
 26054 JP Z,26194    ; Move ERIC left if so
 26057 JR 26019      ; Otherwise send ERIC down a step
*26059 CP 77         ; This is the x-coordinate of the tops of the staircases
                     ; at the right of the skool
 26061 JR NZ,26067   ; Jump unless ERIC is there
 26063 BIT 7,B       ; Is ERIC facing left?
 26065 JR Z,26019    ; Send ERIC down a step if so
; This entry point is used by the routine at #R26084.
*26067 BIT 7,B       ; Is ERIC facing left?
 26069 JP Z,26194    ; Move ERIC left if so
 26072 JP 26282      ; Otherwise move ERIC right

@rsub-begin
; Unused
s26075 DEFS 9
@rsub-end

; 'Q' pressed - up
;
; The address of this routine is found in the table of keypress handling
; routines at #R26624. It is called from the main loop at #R26471 when 'Q' or
; '7' is pressed, and is also used by the routines at #R26194 and #R26282.
;
; B ERIC's animatory state
; DE ERIC's coordinates
@label=UP
c26084 CALL 25956    ; Is ERIC sitting or lying down?
 26087 RET NZ        ; Return if so
@rsub-begin
 26088 BIT 6,A       ; {Bit 6 of ERIC's status flags at #R32763 is always
 26090 JR NZ,26067   ; reset, so this jump is never made}
@rsub-end
 26092 LD A,D        ; #REGa=ERIC's y-coordinate
 26093 CP 155        ; Is ERIC on the top floor?
 26095 JR Z,26067    ; Jump if so
 26097 CP 162        ; Is ERIC on the middle floor?
 26099 JR Z,26147    ; Jump if so
 26101 CP 169        ; Is ERIC on the bottom floor?
 26103 JR Z,26147    ; Jump if so
; ERIC's not on the top, middle or bottom floor, so he must be on a staircase.
; Should he go up a step, or turn round first?
 26105 LD A,E        ; #REGa=ERIC's x-coordinate
 26106 CP 48         ; Set the carry flag if ERIC's on a staircase at the left
                     ; of the skool
 26108 BIT 7,B       ; Set the zero flag if ERIC is facing left
 26110 JR C,26117    ; Jump if ERIC's on a staircase at the left of the skool
 26112 JP Z,25962    ; Turn ERIC round if he's facing down a staircase at the
                     ; right of the skool
 26115 JR 26120      ;
*26117 JP NZ,25962   ; Turn ERIC round if he's facing down a staircase at the
                     ; left of the skool
; ERIC's at the bottom of or on a staircase, facing the top of it.
*26120 DEC D         ; Up a step
 26121 LD H,D        ; {Copy ERIC's next coordinates to #REGhl
 26122 LD L,E        ; }
 26123 DEC E         ; One pace to the left
 26124 LD B,2        ; #AS2=ERIC standing, facing left
 26126 CP 48         ; Is ERIC on a staircase on the left side of the skool?
 26128 JR C,26134    ; Jump if so
 26130 LD B,130      ; #AS130=ERIC standing, facing right
 26132 INC E         ; {One pace to the right (taking into the account the one
 26133 INC E         ; pace to the left made above)}
*26134 LD A,B        ; #REGa=#AS2(#b2/#b130)
@bfix=BIT 0,L        ; {#REGa=#AS1(#b1/#b129), #REGb=#AS2(#b2/#b130) if ERIC's
 26135 BIT 0,L       ; {#REGa=#AS3(#b3/#b131), #REGb=#AS2(#b2/#b130) if ERIC's
@bfix=JR Z,26143     ; current x-coordinate is even;
 26137 JR Z,26141    ; current x-coordinate is even (which is a
@bfix=DEC B          ;
 26139 DEC B         ; #BUG#oneFourThreeFour(bug));
 26140 DEC B         ; #REGa=#AS3(#b3/#b131), #REGb=#AS0(#b0/#b128) if ERIC's
@if({fix}>1)(label=)
*26141 ADD A,2       ; current x-coordinate is odd
@if({fix}>1)(label=*)
 26143 DEC A         ; }
 26144 JP 25916      ; Update ERIC's animatory state and location
; ERIC is on the middle floor or the top floor.
*26147 LD A,E        ; #REGa=ERIC's x-coordinate
 26148 CP 19         ; This is the x-coordinate of the bottoms of the
                     ; staircases at the left of the skool
 26150 JR NZ,26159   ; Jump unless ERIC is here
 26152 BIT 7,B       ; Is ERIC facing right?
 26154 JP NZ,26282   ; Move ERIC right if so
 26157 JR 26120      ; Otherwise send ERIC up a step
*26159 CP 70         ; This is the x-coordinate of the bottoms of the
                     ; staircases at the right of the skool
 26161 JR NZ,26167   ; Jump unless ERIC is here
 26163 BIT 7,B       ; Is ERIC facing right?
 26165 JR NZ,26120   ; Send ERIC up a step if so
*26167 BIT 7,B       ; Is ERIC facing left?
 26169 JP Z,26194    ; Move ERIC left if so
 26172 JP 26282      ; Otherwise move ERIC right

@rsub-begin
; Unused
s26175 DEFS 9
@rsub-end

; Check whether a character is on a staircase
;
; Used by the routines at #R26194, #R26282, #R27823, #R28304, #R62617 and
; #R63056. Returns with the zero flag set if the character is not on a
; staircase.
;
; D Character's y-coordinate
@label=ONSTAIRS
c26184 LD A,D        ; #REGa=character's y-coordinate
; This entry point is used by the routines at #R27126, #R27932, #R28446,
; #R28672 and #R63973 with #REGa holding the character's y-coordinate.
*26185 CP 155        ; Is the character on the top floor?
 26187 RET Z         ; Return with the zero flag set if so
 26188 CP 162        ; Is the character on the middle floor?
 26190 RET Z         ; Return with the zero flag set if so
 26191 CP 169        ; Is the character on the top floor?
 26193 RET           ; Return with the zero flag set if so

; 'O' pressed - left
;
; The address of this routine is found in the table of keypress handling
; routines at #R26624. It is called from the main loop at #R26471 when 'O' or
; '5' is pressed, and is also used by the routines at #R25983 and #R26084.
;
; B ERIC's animatory state
; DE ERIC's coordinates
@label=LEFT
c26194 CALL 25956    ; Is ERIC sitting or lying down?
 26197 RET NZ        ; Return if so
 26198 CALL 26184    ; Check whether ERIC is on a staircase
 26201 LD A,E        ; #REGa=ERIC's x-coordinate
 26202 JR Z,26212    ; Jump if ERIC's not on a staircase
 26204 CP 48         ; Is ERIC on a staircase at the right of the skool?
 26206 JP NC,25983   ; Move ERIC down a step if so
 26209 JP 26084      ; Otherwise move ERIC up a step
*26212 BIT 7,B       ; Is ERIC facing right?
 26214 JP NZ,25962   ; Turn ERIC round if so
; ERIC is facing left, and is not on a staircase.
 26217 AND A         ; Is ERIC standing at the far left side of the skool?
 26218 RET Z         ; Return if so
 26219 LD A,D        ; #REGa=ERIC's y-coordinate
 26220 CP 169        ; Is ERIC on the bottom floor?
 26222 JR Z,26234    ; Jump if so
 26224 CP 155        ; Set the zero flag if ERIC is on the top floor
 26226 LD A,58       ; This is the x-coordinate of the wall between the Map and
                     ; Reading Rooms
 26228 JR Z,26232    ; Jump if ERIC's on the top floor
 26230 LD A,39       ; This is the x-coordinate of the wall between the Exam
                     ; and White Rooms
*26232 CP E          ; Is ERIC facing this wall (from the right side)?
 26233 RET Z         ; Return if so (ERIC cannot walk through walls)
; There is no wall obstructing ERIC, so it's time to put him midstride.
*26234 LD A,1        ; #REGa=#AS1 (ERIC midstride, facing left)
 26236 LD L,E        ; #REGl=ERIC's current x-coordinate
 26237 DEC E         ; #REGe=ERIC's post-midstride x-coordinate
; This entry point is used by the routine at #R26282 with
; #REGa=#AS129 (ERIC facing right, midstride).
@rsub-begin
*26238 LD C,A        ; #REGc=#AS1(#b1/#b129) (ERIC midstride)
 26239 LD A,(32764)  ; #R32764 holds the ASCII code of the last keypress
 26242 BIT 5,A       ; Was the last keypress upper case (fast)?
 26244 JR Z,26250    ; Jump if so
 26246 LD A,C        ; {Clearly these instructions have no effect, but one
 26247 ADD A,0       ; wonders what they might once have been and done
 26249 LD C,A        ; }
*26250 LD A,(32763)  ; Collect ERIC's status flags from #R32763
 26253 BIT 6,A       ; {Bit 6 is always reset, so this jump is always made
 26255 JR Z,26261    ; }
 26257 LD A,C        ; {Clearly these instructions have no effect, but one
 26258 ADD A,0       ; wonders what they might once have been and done
 26260 LD C,A        ; }
*26261 LD A,C        ; #REGa=#AS1(#b1/#b129) (ERIC midstride)
@rsub+else
@label=ERICMID
@rsub+end
 26262 LD H,D        ; #REGh=ERIC's current y-coordinate
 26263 LD B,A        ; {#REGb=#AS2(#b2/#b130) (ERIC standing, phase 3)
 26264 INC B         ; }
 26265 BIT 0,L       ; Is ERIC's current x-coordinate even?
 26267 JR Z,26273    ; Jump if so
 26269 DEC B         ; {Adjust ERIC's midstride animatory state (in #REGa) to
 26270 DEC B         ; #AS3(#b3/#b131) and post-midstride animatory state (in
 26271 ADD A,2       ; #REGb) to #AS0(#b0/#b128) if ERIC's current x-coordinate
                     ; is odd}
*26273 JP 25916      ; Put ERIC midstride

@rsub-begin
; Unused
s26276 DEFS 6
@rsub-end

; 'P' pressed - right
;
; The address of this routine is found in the table of keypress handling
; routines at #R26624. It is called from the main loop at #R26471 when 'P' or
; '8' is pressed, and is also used by the routines at #R25983 and #R26084.
;
; B ERIC's animatory state
; DE ERIC's coordinates
@label=RIGHT
c26282 CALL 25956    ; Is ERIC sitting or lying down?
 26285 RET NZ        ; Return if so
 26286 CALL 26184    ; Check whether ERIC is on a staircase
 26289 LD A,E        ; #REGa=ERIC's x-coordinate
 26290 JR Z,26300    ; Jump if ERIC's not on a staircase
 26292 CP 48         ; Is ERIC on a staircase at the right of the skool?
 26294 JP NC,26084   ; Jump if so
 26297 JP 25983      ;
*26300 BIT 7,B       ; Is ERIC facing left?
 26302 JP Z,25962    ; Turn ERIC round if so
; ERIC is facing right, and is not on a staircase.
 26305 CP 93         ; Is ERIC at the far right of the skool?
 26307 RET Z         ; Return if so
 26308 LD A,D        ; #REGa=ERIC's y-coordinate
 26309 CP 169        ; Is ERIC on the bottom floor?
 26311 JR Z,26329    ; Jump if so
 26313 CP 162        ; Is ERIC on the middle floor?
 26315 JR NZ,26325   ; Jump if not
 26317 LD A,E        ; #REGa=ERIC's x-coordinate
 26318 CP 78         ; This is the x-coordinate of the far right wall on the
                     ; middle floor
 26320 RET Z         ; Return if ERIC is facing this wall
 26321 LD A,37       ; This is the x-coordinate of the wall between the White
                     ; and Exam Rooms
 26323 JR 26327      ;
*26325 LD A,56       ; This is the x-coordinate of the wall between the Reading
                     ; and Map Rooms
*26327 CP E          ; Is ERIC facing this wall (from the left side)?
 26328 RET Z         ; Return if so (ERIC cannot walk through walls)
; There is no wall obstructing ERIC, so it's time to put him midstride.
*26329 LD A,129      ; #AS129=ERIC midstride, facing right
 26331 LD L,E        ; #REGl=ERIC's current x-coordinate
 26332 INC E         ; #REGe=ERIC's post-midstride x-coordinate
@rsub=JP 26262
 26333 JP 26238      ; Put ERIC midstride

@rsub-begin
; Unused
s26336 DEFS 6
@rsub-end

; Change the lesson
;
; This routine is called from the main loop at #R26471 when the lesson clock
; has counted down to zero. It sets each character up with the appropriate
; command list for the next lesson.
;
@label=NEWLESSON
c26342 LD HL,5376    ; {Reset the lesson clock at #R32759
 26345 LD (32759),HL ; }
 26348 LD HL,32761   ; {Advance the lesson number at #R32761 by one and get the
 26351 INC (HL)      ; next lesson number (#b0-#b63) in #REGa
 26352 LD A,(HL)     ;
 26353 CP 64         ;
 26355 JR NZ,26359   ;
 26357 XOR A         ;
 26358 LD (HL),A     ; }
*26359 LD E,A        ; #REGe=lesson number (#b0-#b63)
 26360 CALL 63749    ; Get the identifier for this lesson in #REGa
 26363 CP D          ; {#REGd=#b254; ring the bell unless this is the second
 26364 PUSH AF       ; PLAYTIME in a row (only PLAYTIMEs #LESSON254 and
 26365 CALL C,26450  ; #LESSON255 follow another PLAYTIME)}
 26368 LD HL,32712   ; {Clear the flags at #R32712, #R32713, #R32714 and
 26371 LD B,20       ; #R32715, the unused bytes at #R32716, MR CREAK's birth
*26373 LD (HL),0     ; year question indicator at #R32730, and the unused byte
 26375 INC L         ; at #R32731
 26376 DJNZ 26373    ; }
 26378 POP AF        ;
 26379 LD E,A        ; #REGe=lesson identifier (#b224-#b255) from the
                     ; #R65024(main timetable)
 26380 LD D,172      ; {Pick up the #R44256(lesson descriptor) (which
 26382 LD A,(DE)     ; determines who is teaching ERIC and in what room) and
 26383 LD (32756),A  ; place it in #R32756}
 26386 PUSH DE       ;
 26387 CALL 63909    ; Print the teacher and room names in the lesson box
 26390 POP DE        ;
 26391 LD B,20       ; {There are 20 non-player characters to prepare for the
 26393 LD H,152      ; new lesson, starting with little boy no. 1 (#b152)}
; This entry point is used by the routine at #R31815 with #REGb=1 to restart
; the command list for a single character.
*26395 EXX           ;
 26396 LD H,254      ; The addresses of the command lists are in page #b254 at
                     ; #R65152
 26398 EXX           ;
*26399 LD D,H        ; #REGd=character number (#b152-#b171)
 26400 LD L,122      ; {Set bit 0 of byte #b122 of the character's buffer; this
 26402 SET 0,(HL)    ; will trigger a restart of the command list (see
                     ; #R25126)}
 26404 LD L,119      ;
 26406 LD A,(DE)     ; Pick up the command list number for this lesson from the
                     ; character's personal timetable
 26407 EXX           ;
 26408 LD L,A        ; {#REGa=LSB of the address of the command list
 26409 LD A,(HL)     ; }
 26410 INC L         ; Point #REGhl' at the MSB of the address of the command
                     ; list
 26411 EXX           ;
 26412 LD (HL),A     ; Copy the LSB to byte #b119 of the character's buffer
 26413 INC L         ; #REGl=#b120
 26414 EXX           ;
 26415 LD A,(HL)     ; {#REGa=MSB of the address of the command list
                     ; }
 26416 EXX           ;
 26417 LD (HL),A     ; Copy the MSB to byte #b120 of the character's buffer
 26418 INC H         ; Next character
 26419 DJNZ 26399    ; Jump back until all characters have been done
 26421 RET           ;

@rsub-begin
; Get the ASCII code of the last key pressed (unused)
;
; This routine is not used.
@label=XREADKEY
c26422 SET 3,(IY+48) ; Put CAPS LOCK on, and continue into #R26426
@rsub-end

; Get the ASCII code of the last key pressed
;
; Used by the routines at #R46824, #R47080, #R62771, #R62938 and #R63352.
; Returns with the zero flag set if no key of interest was pressed. Otherwise
; returns with #REGa holding the ASCII code of the last key pressed.
@label=READKEY
c26426 CALL 26584    ; Get input from the Kempston joystick if it's in use
; This entry point is used by the routines at #R26784 and #R64073.
*26429 BIT 5,(HL)    ; {Check bit 5 of #w23611, which will be set if a key was
 26431 RES 5,(HL)    ; pressed; reset bit 5 afterwards}
 26433 RET Z         ; Return with the zero flag set if no key was pressed
 26434 LD A,(23560)  ; Get the code of the last key pressed
 26437 CP 13         ; Was it ENTER?
 26439 JR Z,26445    ; Jump if so
 26441 CP 32         ; {Return with the zero flag reset if the last key pressed
 26443 JR C,26448    ; had an ASCII code between #b32 and #b127 inclusive (or
*26445 CP 128        ; it was ENTER)
 26447 RET C         ; }
*26448 XOR A         ; Set the zero flag to indicate that no key of interest
                     ; was pressed
; The address of this entry point appears in the table of keypress handling
; routines at #R26624. It is called from the main loop at #R26471 whenever a
; non-game key is pressed.
@label=NOACTION
 26449 RET           ;

; Ring the bell
;
; Used by the routine at #R26342.
;
; L #b249
@label=RINGBELL
c26450 DI            ; Disable interrupts
 26451 LD H,17       ; #REGhl=#w4601 (duration parameter)
 26453 LD D,H        ; #REGd=#b17 (blue border)
*26454 LD A,D        ; {Make the bell sound
 26455 OUT (254),A   ;
 26457 XOR 16        ;
 26459 LD D,A        ;
 26460 LD B,128      ;
*26462 DJNZ 26462    ;
 26464 DEC HL        ;
 26465 LD A,H        ;
 26466 OR L          ;
 26467 JR NZ,26454   ; }
 26469 EI            ; Re-enable interrupts before returning
 26470 RET           ;

; Main loop
;
; Entered from the routine at #R63768.
@label=MAINLOOP
c26471 LD HL,(32759) ; #R32759 holds the lesson clock
 26474 DEC HL        ; {Decrease it by 1 and set the zero flag if it's time to
 26475 LD A,H        ; ring the bell
 26476 OR L          ;
 26477 LD (32759),HL ; }
 26480 CALL Z,26342  ; Change the lesson if the lesson clock reached zero
 26483 CALL 25126    ; Move the characters
 26486 CALL 27353    ; Move ERIC
 26489 JR C,26556    ; Jump if ERIC has already been dealt with
 26491 LD HL,32744   ; {Decrement ERIC's main action timer at #R32744
 26494 DEC (HL)      ; }
 26495 JR NZ,26556   ; Jump unless it's time to deal with ERIC
 26497 INC L         ; {Pick up the midstride indicator at #R32745
 26498 LD A,(HL)     ; }
 26499 AND A         ; Is ERIC midstride?
 26500 JR Z,26507    ; Jump if not
 26502 CALL 25856    ; Move ERIC from the midstride position, then scroll the
                     ; screen left or right if necessary
 26505 JR 26559      ;
; Time to check the keyboard (or simulate a keypress in demo mode) to see how
; ERIC should move next.
*26507 DEC L         ; {Reset ERIC's main action timer at #R32744 to 9
 26508 LD (HL),9     ; }
 26510 CALL 62938    ; Collect or simulate a keypress
 26513 JR Z,26556    ; Jump if no relevant keypress was collected or simulated
 26515 LD HL,32763   ; #R32763 holds ERIC's status flags
 26518 BIT 5,(HL)    ; Is ERIC writing on a blackboard?
 26520 JR Z,26527    ; Jump if not
 26522 CALL 63146    ; Deal with keypresses while ERIC is writing on the board
 26525 JR 26556      ;
*26527 INC L         ; {#REGde=#R32764 (which holds the ASCII code of the last
 26528 EX DE,HL      ; keypress)}
 26529 CP 32         ; Was the keypress ASCII code >= #b32?
 26531 JR C,26556    ; Jump if not
@nowarn
 26533 LD HL,26556   ; {Push the address of the entry point at #R26556 (see
 26536 PUSH HL       ; below) onto the stack}
@rsub=LD B,0
 26537 LD L,A        ; {Point #REGhl at the appropriate entry in the
@ssub=LD H,26656/256
@rsub=LD HL,26656
@rsub=SUB 32
@rsub=ADD A,A
@rsub=LD C,A
@rsub=ADD HL,BC
@rsub=LD C,(HL)
@rsub=INC HL
@rsub=LD H,(HL)
 26538 LD H,104      ; #R26656(keypress offset table)
@rsub=LD L,C
 26540 LD L,(HL)     ; }
 26541 LDI           ; Copy the ASCII code of the keypress into #R32764
 26543 LD E,(HL)     ; {Pick up in #REGde the address of the appropriate
@rsub=INC HL
 26544 INC L         ; routine for dealing with the keypress
 26545 LD D,(HL)     ; }
 26546 PUSH DE       ; Push this address onto the stack
 26547 LD HL,44128   ; Point #REGhl at byte #b96 of ERIC's buffer
 26550 LD B,(HL)     ; {Pick up ERIC's animatory state in #REGb and his
 26551 INC L         ; coordinates in #REGde
 26552 LD D,(HL)     ;
 26553 INC L         ;
 26554 LD E,(HL)     ; }
 26555 RET           ; Make an indirect jump to the appropriate routine for
                     ; dealing with ERIC, then return to #R26556 below
; Now that ERIC has been moved or otherwise dealt with, update the display.
*26556 CALL 27026    ; Update the display
; The next section of code ensures that we don't pass through the main loop
; more than once every 20 milliseconds.
*26559 LD HL,32762   ; {Wait until the system variable FRAMES at #w23672 has
*26562 LD A,(23672)  ; been incremented since the last time it was checked
 26565 CP (HL)       ; (FRAMES is incremented every 20ms)
 26566 JR Z,26562    ;
*26568 LD (HL),A     ; }
 26569 JP 26471      ; Jump back to the beginning of the main loop

@rsub-begin
; Unused
u26572 JR Z,26568    ; {Remains of the main loop at #R26471
 26574 JP 26471      ; }
 26577 LD H,L        ;
 26578 ADD HL,BC     ;
 26579 PUSH DE       ;
 26580 EXX           ;
 26581 EX (SP),HL    ;
 26582 LD B,D        ;
 26583 LD C,E        ;
@rsub-end

; Get input from the Kempston joystick if it's in use
;
; Used by the routine at #R26426. Returns with the zero flag set if there was
; no joystick input. Otherwise returns to the caller of #R26426 with the zero
; flag reset and the ASCII code of the equivalent keypress in #REGa.
@label=READJS
c26584 LD HL,23611   ; Prepare #REGhl in case we return to #R26426
 26587 LD A,(26655)  ; #REGa=#b107 ('k') if the Kempston joystick is being
                     ; used, #b0 otherwise
 26590 AND A         ; Is the Kempston joystick being used?
 26591 RET Z         ; Return if not
 26592 IN A,(31)     ; Collect input from the joystick
 26594 AND 31        ; Check bits 0-4
 26596 RET Z         ; Return with the zero flag set if there was no input
 26597 POP HL        ; Drop the return address from the stack so we return
                     ; straight to the caller of #R26426
 26598 LD L,A        ; #REGl=input from the joystick
 26599 BIT 4,L       ;
 26601 LD A,102      ; #b102='f' (fire catapult)
 26603 RET NZ        ; Return if the fire button was pressed
 26604 LD A,81       ; #b81='Q' (up)
 26606 BIT 3,L       ;
 26608 RET NZ        ; Return if the joystick was moved up
 26609 DEC A         ; #REGa=#b80: 'P' (right)
 26610 BIT 0,L       ;
 26612 RET NZ        ; Return if the joystick was moved right
 26613 DEC A         ; #REGa=#b79: 'O' (left)
 26614 BIT 1,L       ;
 26616 RET NZ        ; Return if the joystick was moved left
 26617 LD A,65       ; #b65='A' (down)
 26619 AND A         ; Reset the zero flag
 26620 RET           ;

@rsub-begin
; Unused
;
; Probably remnants of an old version of the routine at #R26584.
u26621 DEFB 81       ; #b81='Q' (up)
 26622 RET
 26623 DEFB 0
@rsub-end

; ASCII codes and routine addresses for the keypress offset table
;
; Used by the routine at #R26471. The entries in this table are pointed to by
; the the entries in the keypress offset table at #R26656. Another table of
; ASCII codes and routine addresses can be found at #R26752. For more details,
; see the #LINK:Keys(keypress table).
@label=K_NONE
b26624 DEFB 32    ; ' ' (SPACE)
 26625 DEFW 26449 ; Do nothing
@label=K_UPF
 26627 DEFB 81    ; 'Q'
 26628 DEFW 26084 ; Up (fast)
@label=K_DOWNF
 26630 DEFB 65    ; 'A'
 26631 DEFW 25983 ; Down (fast)
@label=K_LEFTF
 26633 DEFB 79    ; 'O'
 26634 DEFW 26194 ; Left (fast)
@label=K_RIGHTF
 26636 DEFB 80    ; 'P'
 26637 DEFW 26282 ; Right (fast)
@label=K_UP
 26639 DEFB 113   ; 'q'
 26640 DEFW 26084 ; Up (slow)
@label=K_DOWN
 26642 DEFB 97    ; 'a'
 26643 DEFW 25983 ; Down (slow)
@label=K_LEFT
 26645 DEFB 111   ; 'o'
 26646 DEFW 26194 ; Left (slow)
@label=K_RIGHT
 26648 DEFB 112   ; 'p'
 26649 DEFW 26282 ; Right (slow)
@label=K_SITSTAND
 26651 DEFB 115   ; 's'
 26652 DEFW 27823 ; Sit/stand

@rsub-begin
; Unused
s26654 DEFB 0
@rsub-end

; Input device indicator
;
; Set by the routine at #R26784, and checked by the routine at #R26584. Holds
; #b107 ('k') if the Kempston joystick is being used, #b0 otherwise.
@label=KEMPSTON
b26655 DEFB 0

; Keypress offset table
;
; Used by the routine at #R26471.
@rsub-begin
; Each non-zero entry in this table corresponds to a game key, and is the LSB
@rsub+else
; Each entry in this table corresponds to a game key, and is the address
@rsub+end
; of an entry in the table at #R26624 or the table at #R26752. For more
; details, see the #LINK:Keys(keypress table).
@label=KEYTABLE
@ssub=DEFB 26624%256
@rsub=DEFW 26624
b26656 DEFB 0   ; ' ': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26657 DEFB 0   ; '!': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26658 DEFB 0   ; '"': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26659 DEFB 0   ; '#': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26660 DEFB 0   ; '$': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26661 DEFB 0   ; '%': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26662 DEFB 0   ; '&': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26663 DEFB 0   ; ''': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26664 DEFB 0   ; '(': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26665 DEFB 0   ; ')': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26666 DEFB 0   ; '*': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26667 DEFB 0   ; '+': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26668 DEFB 0   ; ',': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26669 DEFB 0   ; '-': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26670 DEFB 0   ; '.': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26671 DEFB 0   ; '/': Unused
@label=K_NUMERIC
@ssub=DEFB 26761%256
@rsub=DEFW 26761
 26672 DEFB 137 ; '0': Fire catapult
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26673 DEFB 0   ; '1': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26674 DEFB 0   ; '2': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26675 DEFB 0   ; '3': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26676 DEFB 0   ; '4': Unused
@ssub=DEFB 26633%256
@rsub=DEFW 26633
 26677 DEFB 9   ; '5': Move left (fast)
@ssub=DEFB 26630%256
@rsub=DEFW 26630
 26678 DEFB 6   ; '6': Move down (fast)
@ssub=DEFB 26627%256
@rsub=DEFW 26627
 26679 DEFB 3   ; '7': Move up (fast)
@ssub=DEFB 26636%256
@rsub=DEFW 26636
 26680 DEFB 12  ; '8': Move right (fast)
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26681 DEFB 0   ; '9': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26682 DEFB 0   ; ':': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26683 DEFB 0   ; ';': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26684 DEFB 0   ; '<': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26685 DEFB 0   ; '=': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26686 DEFB 0   ; '>': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26687 DEFB 0   ; '?': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26688 DEFB 0   ; '@': Unused
@ssub=DEFB 26630%256
@rsub=DEFW 26630
 26689 DEFB 6   ; 'A': Move down (fast)
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26690 DEFB 0   ; 'B': Unused
@ssub=DEFB 26761%256
@rsub=DEFW 26761
 26691 DEFB 137 ; 'C': Fire catapult
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26692 DEFB 0   ; 'D': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26693 DEFB 0   ; 'E': Unused
@ssub=DEFB 26761%256
@rsub=DEFW 26761
 26694 DEFB 137 ; 'F': Fire catapult
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26695 DEFB 0   ; 'G': Unused
@ssub=DEFB 26755%256
@rsub=DEFW 26755
 26696 DEFB 131 ; 'H': Hit
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26697 DEFB 0   ; 'I': Unused
@ssub=DEFB 26758%256
@rsub=DEFW 26758
 26698 DEFB 134 ; 'J': Jump
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26699 DEFB 0   ; 'K': Unused
@ssub=DEFB 26758%256
@rsub=DEFW 26758
 26700 DEFB 134 ; 'L': Jump
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26701 DEFB 0   ; 'M': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26702 DEFB 0   ; 'N': Unused
@ssub=DEFB 26633%256
@rsub=DEFW 26633
 26703 DEFB 9   ; 'O': Move left (fast)
@ssub=DEFB 26636%256
@rsub=DEFW 26636
 26704 DEFB 12  ; 'P': Move right (fast)
@ssub=DEFB 26627%256
@rsub=DEFW 26627
 26705 DEFB 3   ; 'Q': Move up (fast)
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26706 DEFB 0   ; 'R': Unused
@ssub=DEFB 26651%256
@rsub=DEFW 26651
 26707 DEFB 27  ; 'S': Sit/stand
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26708 DEFB 0   ; 'T': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26709 DEFB 0   ; 'U': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26710 DEFB 0   ; 'V': Unused
@ssub=DEFB 26752%256
@rsub=DEFW 26752
 26711 DEFB 128 ; 'W': Write on board
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26712 DEFB 0   ; 'X': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26713 DEFB 0   ; 'Y': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26714 DEFB 0   ; 'Z': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26715 DEFB 0   ; '[': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26716 DEFB 0   ; '\': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26717 DEFB 0   ; ']': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26718 DEFB 0   ; '#CHR8593': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26719 DEFB 0   ; '_': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26720 DEFB 0   ; '#CHR163': Unused
@ssub=DEFB 26642%256
@rsub=DEFW 26642
 26721 DEFB 18  ; 'a': Move down (slow)
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26722 DEFB 0   ; 'b': Unused
@ssub=DEFB 26761%256
@rsub=DEFW 26761
 26723 DEFB 137 ; 'c': Fire catapult
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26724 DEFB 0   ; 'd': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26725 DEFB 0   ; 'e': Unused
@ssub=DEFB 26761%256
@rsub=DEFW 26761
 26726 DEFB 137 ; 'f': Fire catapult
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26727 DEFB 0   ; 'g': Unused
@ssub=DEFB 26755%256
@rsub=DEFW 26755
 26728 DEFB 131 ; 'h': Hit
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26729 DEFB 0   ; 'i': Unused
@ssub=DEFB 26758%256
@rsub=DEFW 26758
 26730 DEFB 134 ; 'j': Jump
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26731 DEFB 0   ; 'k': Unused
@ssub=DEFB 26758%256
@rsub=DEFW 26758
 26732 DEFB 134 ; 'l': Jump
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26733 DEFB 0   ; 'm': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26734 DEFB 0   ; 'n': Unused
@ssub=DEFB 26645%256
@rsub=DEFW 26645
 26735 DEFB 21  ; 'o': Move left (slow)
@ssub=DEFB 26648%256
@rsub=DEFW 26648
 26736 DEFB 24  ; 'p': Move right (slow)
@ssub=DEFB 26639%256
@rsub=DEFW 26639
 26737 DEFB 15  ; 'q': Move up (slow)
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26738 DEFB 0   ; 'r': Unused
@ssub=DEFB 26651%256
@rsub=DEFW 26651
 26739 DEFB 27  ; 's': Sit/stand
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26740 DEFB 0   ; 't': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26741 DEFB 0   ; 'u': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26742 DEFB 0   ; 'v': Unused
@ssub=DEFB 26752%256
@rsub=DEFW 26752
 26743 DEFB 128 ; 'w': Write on board
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26744 DEFB 0   ; 'x': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26745 DEFB 0   ; 'y': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26746 DEFB 0   ; 'z': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26747 DEFB 0   ; '{': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26748 DEFB 0   ; '|': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26749 DEFB 0   ; '}': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26750 DEFB 0   ; '~': Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26751 DEFB 0   ; '#CHR169': Unused

; ASCII codes and routine addresses for the keypress offset table
;
; Used by the routine at #R26471. The entries in this table are pointed to by
; the entries in the keypress offset table at #R26656. Another table of ASCII
; codes and routine addresses can be found at #R26624. For more details, see
; the #LINK:Keys(keypress table).
@label=K_WRITE
b26752 DEFB 119   ; 'w'
 26753 DEFW 63056 ; Write
@label=K_HIT
 26755 DEFB 104   ; 'h'
 26756 DEFW 62610 ; Hit
@label=K_JUMP
 26758 DEFB 106   ; 'j'
 26759 DEFW 62617 ; Jump
@label=K_FIRE
 26761 DEFB 102   ; 'f'
 26762 DEFW 62574 ; Fire catapult

; Keypress vector table for keyboard input
;
; Used by the routine at #R26784. These 10 bytes are copied to #R26672 in the
; keypress offset table (the entries for keys 0-9) if Int2 is not selected.
@label=NOINT2
@ssub=DEFB 26761%256
@rsub=DEFW 26761
b26764 DEFB 137 ; 0: Fire catapult
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26765 DEFB 0   ; 1: Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26766 DEFB 0   ; 2: Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26767 DEFB 0   ; 3: Unused
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26768 DEFB 0   ; 4: Unused
@ssub=DEFB 26633%256
@rsub=DEFW 26633
 26769 DEFB 9   ; 5: Move left (fast)
@ssub=DEFB 26630%256
@rsub=DEFW 26630
 26770 DEFB 6   ; 6: Move down (fast)
@ssub=DEFB 26627%256
@rsub=DEFW 26627
 26771 DEFB 3   ; 7: Move up (fast)
@ssub=DEFB 26636%256
@rsub=DEFW 26636
 26772 DEFB 12  ; 8: Move right (fast)
@ssub=DEFB 26624%256
@rsub=DEFW 26624
 26773 DEFB 0   ; 9: Unused

; Keypress vector table for Int2 input
;
; Used by the routine at #R26784. These 10 bytes are copied to #R26672 in the
; keypress offset table (the entries for keys 0-9) if Int2 is selected.
@label=INT2
@ssub=DEFB 26761%256
@rsub=DEFW 26761
b26774 DEFB 137 ; 0: Fire catapult
@ssub=DEFB 26633%256
@rsub=DEFW 26633
 26775 DEFB 9   ; 1: Move left (fast)
@ssub=DEFB 26636%256
@rsub=DEFW 26636
 26776 DEFB 12  ; 2: Move right (fast)
@ssub=DEFB 26630%256
@rsub=DEFW 26630
 26777 DEFB 6   ; 3: Move down (fast)
@ssub=DEFB 26627%256
@rsub=DEFW 26627
 26778 DEFB 3   ; 4: Move up (fast)
@ssub=DEFB 26761%256
@rsub=DEFW 26761
 26779 DEFB 137 ; 5: Fire catapult
@ssub=DEFB 26633%256
@rsub=DEFW 26633
 26780 DEFB 9   ; 6: Move left (fast)
@ssub=DEFB 26636%256
@rsub=DEFW 26636
 26781 DEFB 12  ; 7: Move right (fast)
@ssub=DEFB 26630%256
@rsub=DEFW 26630
 26782 DEFB 6   ; 8: Move down (fast)
@ssub=DEFB 26627%256
@rsub=DEFW 26627
 26783 DEFB 3   ; 9: Move up (fast)

; Request and set the input method (keyboard, joystick, Int2)
;
; Used by the routine at #R64073.
@label=INPUTDEV
c26784 LD HL,26836   ; #R26836: 'CONTROL KEYS - Normal/Kempston/Cursor/Int2?'
 26787 CALL 45032    ; Print this message
*26790 LD HL,23611   ; This is the system variable FLAGS
 26793 RES 5,(HL)    ; Signal: no key pressed yet
*26795 CALL 26429    ; {Wait for a keypress and collect its ASCII code in #REGa
 26798 JR Z,26795    ; }
 26800 LD HL,26764   ; Point #REGhl at the keypress table for keys 0-9 when
                     ; Int2 is not selected
@rsub=LD BC,20
 26803 LD BC,10      ; There are 10 entries in this table
 26806 CP 110        ; Was 'n' pressed?
 26808 JR Z,26823    ; Jump if so
 26810 CP 99         ; Was 'c' pressed?
 26812 JR Z,26823    ; Jump if so
 26814 CP 107        ; Was 'k' pressed?
 26816 JR Z,26824    ; Jump if so
 26818 CP 105        ; Was 'i' pressed?
 26820 JR NZ,26790   ; Jump back to collect another keypress if not
@rsub=LD HL,26774
 26822 ADD HL,BC     ; #REGhl=#R26774 if 'i' was pressed
*26823 XOR A         ; Set #REGa to #b0 unless 'k' was pressed
*26824 LD DE,26672   ; {Copy 10 bytes from #R26764 or #R26774 to #R26672 (the
 26827 LDIR          ; keypress table entries for keys 0-9)}
@ssub=LD L,26655%256
@rsub=LD HL,26655
 26829 LD L,31       ; #REGhl=#R26655
 26831 LD (HL),A     ; Store #b107 ('k' for Kempston) or #b0 here as
                     ; appropriate
 26832 LD HL,20480   ; Prepare #REGhl for drawing the catwalk
 26835 RET           ;

; 'CONTROL KEYS - Normal/Kempston/Cursor/Int2?'
;
; Used by the routine at #R26784.
@label=M_INPUT
t26836 DEFM "CONTROL KEYS - Normal/Kempston/Cursor/Int2?"
 26879 DEFB 0 ; End marker

; Start a new game or enter demo mode
;
; This section of code is entered at various points. The main entry point below
; is used by the startup routine at #R24288@start.
@nowarn
@label=START
@rsub=LD SP,24572
c26880 LD SP,23806   ; Put the stack pointer somewhere safe
 26883 CALL 32390    ; Play the theme tune
 26886 JR 26902      ; Enter demo mode
; This entry point is used by the routine at #R63990 when ERIC has been sent
; home (either for having mumps or for having over 10000 lines).
*26888 CALL 32470    ; Remove the speech bubble
 26891 LD DE,(32708) ; #REGde=score
 26895 AND A         ; Reset the carry flag ready for a subtraction
 26896 SBC HL,DE     ; Subtract the score from the high score...
 26898 ADD HL,DE     ; ...and add it back again
 26899 JR NC,26902   ; Jump unless we have a new high score
 26901 EX DE,HL      ; #REGhl=new high score
*26902 LD A,255      ; #b255: demo mode
 26904 JR 26913      ;
; This entry point is used by the routine at #R32250 when exiting demo mode.
*26906 CALL 60896    ; Ask for the input method, and change the character names
                     ; (if desired)
@label=AFTERNAMES
 26909 LD HL,(32706) ; #REGhl=high score
 26912 XOR A         ; #b0: game mode (as opposed to demo mode)
@nowarn
@rsub=LD SP,24572
*26913 LD SP,23806   ; Put the stack pointer somewhere safe
 26916 PUSH HL       ; Save the high score
 26917 LD E,A        ; #REGe=#b255 (demo mode) or #b0
 26918 LD A,(32761)  ; Collect the current lesson number (#b0-#b63) from
                     ; #R32761
 26921 AND 48        ; {Set #REGa to #b15, #b31, #b47 or #b63 (lessons #b0,
 26923 ADD A,15      ; #b16, #b32, and #b48 are PLAYTIME)}
 26925 LD D,A        ; #REGd=new lesson number minus one
 26926 PUSH DE       ; Save this for now
 26927 CALL 63242    ; Unflash the safe and all shields
@rfix+begin
       CALL 32497    ; Wipe the blackboards
@rfix+end
 26930 LD HL,32765   ; #R32765 holds the number (#b152-#b171) of the last
                     ; character moved
 26933 LD (HL),151   ; Reset this number so #b152 (little boy no. 1) is moved
                     ; next
*26935 DEC L         ; {Blank out the rest of the game status buffer (except
 26936 LD (HL),0     ; for the random number seed at #R32766)
 26938 JR NZ,26935   ; }
@ssub=LD L,32744%256
 26940 LD L,232      ; {Initialise ERIC's main action timer at #R32744
 26942 LD (HL),17    ; }
@ssub=LD L,32761%256
 26944 LD L,249      ; #REGhl=#R32761 (which holds the lesson number, #b0-#b63)
 26946 POP DE        ; Restore the lesson number to #REGd and game mode
                     ; indicator (#b0 or #b255) to #REGe
 26947 LD (HL),D     ; Set the lesson number
@ssub=LD L,32759%256
 26948 LD L,247      ; {Set the lesson clock (at #R32759) to 1
 26950 INC (HL)      ; }
 26951 INC E         ; {If a new game is starting, prepare the shields and
 26952 CALL NZ,63668 ; safe, and play the theme tune}
 26955 POP HL        ; {Restore the high score to #REGhl, and save it in
 26956 LD (32706),HL ; #R32706}
; The following loop sets the initial animatory state, location and character
; flags (byte #b122 of the buffer) for each character (including ERIC).
 26959 LD H,152      ; #b152=little boy no. 1
 26961 LD DE,56064   ; The data table at #R56064 holds the initial animatory
                     ; states of the characters
*26964 LD L,96       ; Point #REGhl at byte #b96 of the character buffer
 26966 LD A,(DE)     ; {Set the initial animatory state of the character
 26967 LD (HL),A     ; }
 26968 INC L         ; #REGl=#b97
 26969 INC D         ; The data table at #R56320 holds the initial
                     ; x-coordinates of the characters
 26970 LD (HL),169   ; All characters start on the bottom floor (y=169)
 26972 INC L         ; #REGl=#b98
 26973 LD A,(DE)     ; Pick up the character's initial x-coordinate
 26974 INC D         ; The data table at #R56576 holds the character flags
 26975 LD (HL),A     ; Set the character's initial x-coordinate
 26976 LD A,(DE)     ; Pick up the character flags (#b0=kid; #b16=adult;
                     ; #b32=pellet)
 26977 DEC D         ; {Point #REGde back at the table of initial animatory
 26978 DEC D         ; states}
 26979 INC E         ; Next character
 26980 LD B,29       ; {Blank out the remaining 29 bytes of the character's
*26982 INC L         ; buffer
 26983 LD (HL),0     ;
 26985 DJNZ 26982    ; }
 26987 LD L,122      ; {Place the character flags into byte #b122 of the
 26989 LD (HL),A     ; character's buffer}
 26990 INC L         ;
 26991 INC L         ; #REGl=#b124
@ssub=LD (HL),25247%256
 26992 LD (HL),159   ; {Place the address of the continual subcommand routine
 26994 INC L         ; at #R25247 (#S/RET/) into bytes #b124 and #b125 of the
@ssub=LD (HL),25247/256
 26995 LD (HL),98    ; character's buffer}
 26997 INC H         ; Next character
 26998 INC A         ; Have we done all the non-player characters?
 26999 JR NZ,26964   ; Jump back to do the next one if not
; All that remains now is to print the logo, lesson box and score box, and
; bring the skool into view.
 27001 CALL 27406    ; Print the bottom 3 lines of the screen
 27004 JP 63768      ; Scroll the skool into view and enter the main loop

@rsub-begin
; Unused
u27007 DEFB 101
@rsub-end

; Update the SRB for one column of a sprite
;
; Used by the routine at #R25008. Sets the bits in the #R32524(screen refresh
; buffer) (SRB) that correspond to the four tiles in the left, middle or right
; column of a sprite.
;
; DE Base address of the sprite UDG references
; HL SRB address corresponding to the top row of the sprite
@label=SRBCOL
c27008 LD B,4        ; There are 4 rows (and 3 columns) in a sprite
*27010 LD A,(DE)     ; Pick up a sprite UDG reference
 27011 INC D         ; Next row of the sprite
 27012 AND A         ; Is this the blank UDG?
 27013 JR Z,27017    ; Jump if so (no need to update this SRB byte)
@label=SRBSET1
 27015 SET 0,(HL)    ; Set the appropriate bit in the SRB byte; this
                     ; instruction is modified by the routine at #R25008 before
                     ; this routine is called
*27017 LD A,4        ; {Point #REGhl at the byte of the SRB corresponding to
 27019 ADD A,L       ; the next row of the screen
 27020 LD L,A        ; }
 27021 DJNZ 27010    ; Jump back until all 4 squares in the column are done
 27023 BIT 3,D       ; {Return with the zero flag reset if we have just updated
 27025 RET           ; the SRB for the rightmost column of the sprite}

; Update the display
;
; Used by the routines at #R25856, #R26471, #R32470 and #R46312. Goes through
; the #R32524(screen refresh buffer) (SRB) and for every set bit found, updates
; the corresponding character square on-screen.
@label=UPDATESCR
c27026 LD HL,32524   ; Point #REGhl at the first byte of the SRB
 27029 LD B,84       ; #REGb will count the bytes in the screen refresh buffer
*27031 LD A,(HL)     ; Pick up an SRB byte
 27032 AND A         ; Any character squares in this segment need refreshing?
 27033 JR Z,27078    ; Jump if not
 27035 PUSH BC       ; Save the SRB byte counter
 27036 LD A,L        ; {#REGd=y-coordinate of the segment of 8 character
 27037 AND 124       ; squares to which this SRB byte corresponds
 27039 RRCA          ;
 27040 RRCA          ;
 27041 ADD A,149     ;
 27043 LD D,A        ; }
 27044 LD A,L        ; {#REGe=x-coordinate of the leftmost character square in
 27045 AND 3         ; the segment
 27047 RLCA          ;
 27048 RLCA          ;
 27049 RLCA          ;
 27050 LD E,A        ;
 27051 LD A,(32512)  ;
 27054 ADD A,E       ;
 27055 LD E,A        ; }
 27056 DEC E         ;
; Here we enter a loop to check each SRB byte for set bits.
*27057 PUSH HL       ; Save the pointer to the SRB byte
*27058 INC E         ; Set #REGde to the coordinates of the next character
                     ; square in the current segment
 27059 RR (HL)       ; Push an SRB bit into the carry flag, and 0 into bit 7 of
                     ; the SRB byte
 27061 JR C,27067    ; Refresh the corresponding character square if the bit
                     ; was set
 27063 JR NZ,27058   ; Jump back until all set bits in the SRB byte have been
                     ; checked
 27065 JR 27076      ; Move to the next SRB byte
; We have found a set bit in the current SRB byte. Refresh the corresponding
; tile on screen.
*27067 PUSH DE       ;
 27068 CALL 24843    ; Print the character square at (#REGe,#REGd)
 27071 POP DE        ;
 27072 POP HL        ; Restore the pointer to the SRB byte
 27073 AND A         ; {Clear the carry flag so that bit 7 of the SRB byte will
 27074 JR 27057      ; be reset, and jump back to check the next bit}
; There are no set bits remaining in the current SRB byte. Move on to the next.
*27076 POP HL        ; Restore the pointer to the SRB byte
 27077 POP BC        ; Restore the SRB byte counter to #REGb
*27078 INC L         ; Move to the next byte in the screen refresh buffer
 27079 DJNZ 27031    ; Jump back until every byte in the SRB has been checked
 27081 RET           ;

; Four skool locations
;
; Used by the routine at #R27090.
@label=RANDLOCS
b27082 DEFB 155,36 ; Revision Library
 27084 DEFB 155,94 ; Fire escape
 27086 DEFB 169,94 ; Gym
 27088 DEFB 169,8  ; Big window

; Set a random destination for a character
;
; Used by the routine at #R27111. Selects a destination at random from the
; table of locations at #R27082 and places its coordinates into bytes #b101 and
; #b102 of the character's buffer.
;
; H Character number (#b152-#b169)
@label=RANDDEST
c27090 CALL 24993    ; #REGa=random number
 27093 AND 6         ; {#REGa=#b202, #b204, #b206 or #b208
@ssub=ADD A,27082%256
 27095 ADD A,202     ; }
 27097 LD E,A        ; {Point #REGde at one of the four skool locations in the
@ssub=LD D,27082/256
 27098 LD D,105      ; table at #R27082
@rsub+begin
       JR NC,27100
       INC D
@rsub+end
                     ; }
@rsub+begin
@label=RANDDEST2
@rsub+end
 27100 EX DE,HL      ; {Pick up the coordinates of the skool location in #REGa
 27101 LD A,(HL)     ; and #REGd
@rsub=INC HL
 27102 INC L         ;
 27103 LD H,(HL)     ;
 27104 EX DE,HL      ; }
 27105 LD L,101      ; {Place the coordinates of the skool location into bytes
 27107 LD (HL),A     ; #b101 and #b102 of the character's buffer to make it his
 27108 INC L         ; next destination
 27109 LD (HL),D     ; }
 27110 RET           ;

; Make a character go to a random location
;
; Used by command lists #R64841(#b182), #R64883(#b190), #R64892(#b192),
; #R64988(#b194), #R64914(#b196), #R64230(#b208), #R64240(#b210),
; #R64265(#b212), #R64314(#b216) and #R64255(#b220) to make a character go to a
; place at random (selected from the table at #R27082).
;
; H Character number (#b152-#b169)
; L #b122
@label=GOTORAND
c27111 LD A,(HL)     ; {Reset bits 5 and 6 of byte #b122 of the character's
 27112 AND 159       ; buffer, indicating that he should no longer walk fast or
 27114 LD (HL),A     ; slow continuously (if he was doing so)}
; This entry point is used by the routine at #R27246.
*27115 CALL 27090    ; Set a random destination for the character
 27118 LD L,100      ; {Prepare the MSB of the primary command routine address
@ssub=LD (HL),25553/256
 27120 LD (HL),99    ; in bytes #b99 and #b100 of the character's buffer; the
                     ; LSB will be set to #b209 soon (making the routine
                     ; address #R25553)
@rsub+begin
       DEC L
       LD (HL),25553%256
@rsub+end
                     ; }
 27122 JP 25549      ; Set the character on his way

@rsub-begin
; Unused
s27125 DEFB 0
@rsub-end

; Make a little boy trip people up
;
; The address of this continual subcommand routine is placed into bytes #b124
; and #b125 of little boy no. 1's character buffer by the routine at #R27246,
; and into bytes #b124 and #b125 of the character buffers of little boys 2-11
; by the routine at #R27266.
;
; H Little boy's character number (#b152-#b162)
@label=TRIP
c27126 LD L,97       ; {Pick up the little boy's y-coordinate in #REGa
 27128 LD A,(HL)     ; }
 27129 CALL 26185    ; Is the boy on a staircase?
 27132 RET NZ        ; Return if so
 27133 LD B,10       ; We will check characters #b163-#b172 (teachers and main
                     ; kids)
@ssub=LD DE,41824+2
 27135 LD DE,41826   ; #REGd=#b163 (MR WACKER), #REGe=#b98
 27138 INC L         ; #REGl=#b98
 27139 EX DE,HL      ;
*27140 LD A,(DE)     ; #REGa=little boy's x-coordinate
 27141 CP (HL)       ; Does this teacher's or main kid's x-coordinate match?
 27142 JR Z,27149    ; Jump if so
*27144 INC H         ; Next teacher or main kid
 27145 DJNZ 27140    ; Jump back until all teachers and main kids have been
                     ; checked
 27147 EX DE,HL      ;
 27148 RET           ;
; A teacher or main kid is at the same x-coordinate as the little boy. Now
; check the y-coordinates.
*27149 DEC E         ; {#REGe=#REGl=#b97
 27150 DEC L         ; }
 27151 LD A,(DE)     ; #REGa=little boy's y-coordinate
 27152 INC E         ; #REGe=#b98
 27153 CP (HL)       ; Does this teacher's or main kid's y-coordinate match?
 27154 INC HL        ; #REGl=#b98
 27155 JR NZ,27144   ; Consider the next teacher or main kid if not
; A teacher or main kid is at the same location as the little boy.
 27157 LD L,112      ; {Bytes #b111 and #b112 of the character's buffer may
 27159 LD A,(HL)     ; hold a routine address; pick up the MSB in #REGa}
 27160 LD L,98       ;
 27162 AND A         ; Is there an uninterruptible subcommand routine address
                     ; in bytes #b111 and #b112?
 27163 JR NZ,27144   ; Consider the next teacher or main kid if so
 27165 LD A,H        ; #REGa=number of the character in the same location as
                     ; the little boy
 27166 CP 172        ; Is it ERIC?
 27168 JR Z,27184    ; Jump if so
 27170 LD L,111      ; {Place the address of the uninterruptible subcommand
@ssub=LD (HL),27206%256
 27172 LD (HL),70    ; routine at #R27206 into bytes #b111 and #b112 of the
 27174 INC L         ; teacher's or main kid's buffer
@ssub=LD (HL),27206/256
 27175 LD (HL),106   ; }
 27177 INC L         ; {Initialise the timing parameter in byte #b113 of the
 27178 LD (HL),20    ; character's buffer (which determines how long the
                     ; character will stay down)}
 27180 LD L,98       ;
 27182 JR 27144      ; Consider the next teacher or main kid
; ERIC is in the same location as the little boy. Knock ERIC out.
*27184 LD HL,32763   ; #R32763 holds ERIC's status flags
 27187 SET 4,(HL)    ; Signal: ERIC has been knocked out
 27189 EX DE,HL      ;
 27190 RET           ;

@rsub-begin
; Unused
s27191 DEFS 5
@rsub-end

; Make a stricken character give lines if he's a teacher
;
; Used by the routine at #R63829.
;
; H Character number (#b152-#b169)
@label=DONT
c27196 LD A,H        ; {Return now unless we are dealing with a teacher
 27197 CP 163        ;
 27199 RET C         ;
 27200 CP 167        ;
 27202 RET NC        ; }
 27203 JP 30890      ; Give lines to the nearest main kid (if any)

; Deal with a character who has been knocked over
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b111 and #b112 of a character's buffer by the routines at #R27126 and
; #R28569. It knocks the character to the floor, makes him give lines to any
; nearby kids or reveal his safe combination letter (if he's a teacher), and
; then makes him get up.
;
; H Character number (#b152-#b169)
@label=KNOCKED
c27206 LD L,113      ; Byte #b113 of the character's buffer holds the knockout
                     ; delay counter
 27208 DEC (HL)      ; Has the character already got up?
 27209 JP Z,25248    ; Terminate this uninterruptible subcommand if so
 27212 LD A,(HL)     ; Pick up the delay counter in #REGa
 27213 CP 19         ; Has the character only just been hit?
 27215 JR Z,27233    ; Jump if so
 27217 CALL 63829    ; If the character is a teacher, make him reveal his safe
                     ; combination letter or give lines (as appropriate) and
                     ; exit, or else return here
@rsub-begin
 27220 NOP           ;
@rsub-end
 27221 DEC A         ; Is it time for the character to get up?
 27222 RET NZ        ; Return if not
 27223 INC L         ; {Copy the character's pre-decked animatory state (stored
 27224 LD A,(HL)     ; in byte #b114 of the character's buffer) to #REGa}
 27225 PUSH AF       ;
 27226 CALL 25108    ; Update the SRB for the character's current animatory
                     ; state
 27229 POP AF        ;
 27230 JP 25008      ; Update the character's animatory state and update the
                     ; SRB
; The character has only just been hit, so adjust his animatory state to that
; of 'decked'.
*27233 CALL 25108    ; Update the SRB for the character's current animatory
                     ; state
 27236 LD L,114      ; {Store the character's pre-decked animatory state in
 27238 LD (HL),A     ; byte #b114 of the buffer}
 27239 AND 248       ; {Set #REGa equal to the animatory state of the character
 27241 ADD A,7       ; lying on the floor}
 27243 JP 25008      ; Update the character's animatory state and update the
                     ; SRB

; Make little boy no. 1 go to a place at random and trip people up on the way
;
; Used by command list #R64947(#b204) (which is used only by little boy no. 1).
;
; H #b152 (little boy no. 1)
; L #b122
@label=RANDTRIP
c27246 LD A,(HL)     ; {Reset bit 6 (do not walk slowly continuously) and bit 7
 27247 AND 31        ; (walk fast) and set bit 5 (walk fast continuously) of
 27249 ADD A,32      ; byte #b122 of little boy no. 1's buffer
 27251 LD (HL),A     ; }
 27252 LD L,124      ; {Place the address of the continual subcommand routine
@ssub=LD (HL),27126%256
 27254 LD (HL),246   ; at #R27126 into bytes #b124 and #b125 of little boy no.
 27256 INC L         ; 1's buffer
@ssub=LD (HL),27126/256
 27257 LD (HL),105   ; }
 27259 JP 27115      ; Make little boy no. 1 go to a random location

@rsub-begin
; Unused
s27262 DEFS 4
@rsub-end

; Make a little boy find and follow little boy no. 1
;
; Used by command list #R64975(#b206) (which is used by little boys 2-11).
;
; H Little boy's character number (#b153-#b162)
; L #b122
@label=FOLLOW
c27266 LD A,(HL)     ; {Reset bit 6 (do not walk slowly continuously) and bit 7
 27267 AND 31        ; (walk fast) and set bit 5 (walk fast continuously) of
 27269 ADD A,32      ; byte #b122 of the boy's buffer
 27271 LD (HL),A     ; }
@ssub=LD DE,39008+29
 27272 LD DE,39037   ; {Collect byte #b125 of little boy no. 1's buffer, which
 27275 LD A,(DE)     ; holds the MSB of a continual subcommand routine address}
@ssub=CP 27126/256
 27276 CP 105        ; {Return unless little boy no. 1's continual subcommand
@rsub=RET NZ
@rsub=               ; as he proceeds to his destination
@rsub=DEC E
@rsub=LD A,(DE)
@rsub=INC E
@rsub=CP 27126%256
@rsub=LD A,27126/256
@rsub=RET NZ         ; }
 27278 RET NZ        ; is the routine at #R27126, i.e. he's tripping people up
                     ; as he proceeds to his destination}
 27279 LD L,E        ; {Place the address of the continual subcommand routine
 27280 LD (HL),A     ; at #R27126 into bytes #b124 and #b125 of this boy's
 27281 DEC L         ; character buffer (making him trip people up as he
@ssub=LD (HL),27126%256
 27282 LD (HL),246   ; follows little boy no. 1)}
 27284 LD E,99       ; {Copy bytes #b99-#b102 of little boy no. 1's character
 27286 LD L,E        ; buffer into bytes #b99-#b102 of this little boy's
 27287 LD BC,4       ; character buffer; bytes #b99 and #b100 will then contain
 27290 EX DE,HL      ; #R25553, and bytes #b101 and #b102 will contain little
 27291 LDIR          ; boy no. 1's destination}
 27293 EX DE,HL      ;
 27294 JP 25549      ; Make this little boy follow little boy no. 1

@rsub-begin
; Unused
s27297 DEFS 6
@rsub-end

; Deal with ERIC when he's been knocked over
;
; Used by the routine at #R27353 when bit 4 of ERIC's status flags at #R32763
; is set (by the routine at #R28569, #R27932 or #R27543).
@label=ERICHIT
c27303 LD HL,32757   ; {#R32757 holds the delay counter used when ERIC has been
 27306 LD A,(HL)     ; knocked over; pick up its value (#b0-#b40) in #REGa}
 27307 AND A         ; Has ERIC just been struck (#REGa=#b0)?
 27308 JR Z,27319    ; Adjust his animatory state if so (and initialise the
                     ; delay counter to #b40)
 27310 DEC (HL)      ; Decrement the knockout delay counter
 27311 JP NZ,65111   ; Make a knocked-out sound effect if ERIC's just been
                     ; struck
; The knockout delay counter at #R32757 has reached zero, so ERIC can get up
; any time now.
@ssub=LD L,32763%256
 27314 LD L,251      ; #REGhl=#R32763 (ERIC's status flags)
 27316 LD (HL),128   ; Set bit 7 (indicating that ERIC is sitting or lying
                     ; down) and reset bit 4 (so that we don't visit this
                     ; routine again)
 27318 RET           ;
; ERIC has just been struck; decide whether he should be sitting on the floor
; or lying on his back, and adjust his animatory state accordingly.
*27319 LD (HL),40    ; Initialise the knockout delay counter at #R32757
@ssub=LD L,32745%256
 27321 LD L,233      ; {Set #R32745 to 0, indicating that ERIC is not midstride
 27323 LD (HL),A     ; }
@ssub=LD L,32763%256
 27324 LD L,251      ; #REGhl=#R32763 (ERIC's status flags)
 27326 LD (HL),144   ; Set bit 7 (indicating that ERIC is sitting or lying
                     ; down) and keep bit 4 set (so that we visit this routine
                     ; again)
 27328 LD H,172      ; #b172=ERIC
 27330 CALL 25108    ; Update the SRB for ERIC's current location
 27333 CP 5          ; #AS5=animatory state of ERIC
                     ; sitting on a chair
 27335 JR Z,27341    ; Jump if ERIC's sitting on a chair
 27337 AND 128       ;
 27339 ADD A,6       ;
*27341 INC A         ; #REGa=#AS6 (ERIC sitting on the floor) or
                     ; #AS7(#b7/#b135) (ERIC lying on his back)
 27342 LD B,A        ; Store ERIC's new animatory state in #REGb temporarily
 27343 LD A,D        ; #REGa=ERIC's y-coordinate
 27344 CALL 31242    ; Get the y-coordinate of the floor ERIC's on in #REGd
 27347 LD A,B        ; Restore ERIC's new animatory state to #REGa
 27348 JP 25008      ; Update ERIC's animatory state and update the SRB

; Return to the main loop having already dealt with ERIC
;
; Used indirectly by the routine at #R27353 when ERIC is engaged in an activity
; that precludes responding to keypresses.
@label=ERICDONE
c27351 SCF           ; {Return to the main loop with the carry flag set to
 27352 RET           ; indicate that ERIC has already been dealt with}

; Deal with  ERIC
;
; Called from the main loop at #R26471. Deals with ERIC when any of bits 0-4 at
; #R32763 (ERIC's status flags) are set. Returns with the carry flag set if and
; only if ERIC was dealt with, indicating that there is no need to check
; keypresses in the main loop.
@label=MOVEERIC
c27353 CALL 30636    ; Make any nearby teachers give ERIC lines if he's not
                     ; where he should be, or standing or sitting when or where
                     ; he shouldn't be
 27356 LD A,(32763)  ; {Check ERIC's status flags at #R32763 and return with
 27359 AND 31        ; the carry flag reset unless ERIC has been knocked over,
 27361 RET Z         ; or he is firing, hitting, jumping, or being spoken to}
@nowarn
 27362 LD HL,27351   ; {After dealing with ERIC, return to the main loop via
 27365 PUSH HL       ; the routine at #R27351 with the carry flag set to
                     ; indicate that ERIC was dealt with}
 27366 BIT 3,A       ; Is ERIC being spoken to by a little boy?
 27368 JP NZ,63352   ; Jump if so
 27371 CP 16         ; Has ERIC been knocked over?
 27373 JP NC,27303   ; Jump if so
 27376 DEC A         ; Is ERIC firing a catapult?
 27377 JP Z,62495    ; Jump if so
 27380 DEC A         ; Is ERIC hitting?
 27381 JP Z,62628    ; Jump if so
 27384 JP 62771      ; ERIC is jumping; deal with him accordingly

; Add to the score and print it
;
; Used by the routines at #R27932, #R28143 and #R62628.
@label=ADD10
c27387 LD A,1        ; This will add 10 to the score
; This entry point is used by the routines at #R28143 and #R62628 with #REGa
; holding the amount (divided by 10) to add to the score.
@label=ADDPTS
*27389 LD HL,(32708) ; Pick up the current score in #REGhl
 27392 ADD A,L       ; {Set #REGhl equal to the new score
 27393 LD L,A        ;
 27394 ADC A,H       ;
 27395 SUB L         ;
 27396 LD H,A        ; }
 27397 LD (32708),HL ; Store the new score
 27400 LD DE,20924   ; Set #REGde to the display file address at which to print
                     ; the score
 27403 JP 30408      ; Print the new score

; Print the bottom three lines of the screen
;
; Used by the routine at #R26880. Sets the attribute bytes for the bottom three
; lines of the screen, and then prints the Skool Daze logo and the score box.
@label=PRINTB3L
c27406 LD HL,23200   ; {Set #REGhl and #REGde to the attribute file address for
 27409 LD D,H        ; the leftmost character square of the third line from the
 27410 LD E,L        ; the bottom of the screen}
*27411 LD (HL),18    ; {INK 2: PAPER 2 for the bottom three lines of the screen
 27413 INC L         ;
 27414 JR NZ,27411   ; }
 27416 LD H,239      ; #REGhl=#R61184: Skool Daze logo
 27418 CALL 29977    ; Print the logo at the bottom left of the screen
 27421 LD DE,23224   ; This is the attribute file address for the top-left
                     ; corner of the score box
 27424 LD HL,60928   ; #R60928: Score/Lines/Hi-Score box graphic
 27427 CALL 29977    ; Print the Score/Lines/Hi-Score box
 27430 LD HL,(32706) ; #REGhl=high score
 27433 LD A,H        ; {Is the high score zero?
 27434 OR L          ; }
 27435 RET Z         ; Return if so
 27436 LD DE,20988   ; #REGde=display file address for the high score
 27439 JP 30408      ; Print the high score

; Send a character on a mini-walkabout
;
; The address of this primary command routine is placed into bytes #b99 and
; #b100 of a character's buffer by the routine at #R27453. It either sends the
; character to his next walkabout destination (the walkabout origin or some
; spot within 7 spaces to the left of it), or moves to the next command in the
; command list if the designated number of walkabouts has been completed.
;
; H Character number (#b152-#b169)
@label=NEXTWALK
c27442 LD L,103      ; {Decrement the walkabouts counter in byte #b103 of the
 27444 DEC (HL)      ; character's buffer}
 27445 JP Z,25256    ; Move to the next command in the command list if all the
                     ; walkabouts have been done
 27448 JP 25317      ; Otherwise go for another mini-walkabout

@rsub-begin
; Unused
s27451 DEFS 2
@rsub-end

; Make a character walk up and down a few times or until a certain time
;
; Used by command lists #R64841(#b182), #R64892(#b192), #R64988(#b194),
; #R64914(#b196) and #R64947(#b204) to make a character walk about a fixed
; location until a specified time, or until a certain number of walkabouts have
; been performed.
;
; H Character number (#b152-#b169)
; L #b122
@label=WALKABOUT
c27453 LD A,(HL)     ; {Reset bits 5 and 6 of byte #b122 of the character's
 27454 AND 159       ; buffer, indicating that he should no longer walk fast or
 27456 LD (HL),A     ; slow continuously (if he was doing so)}
 27457 LD L,99       ; {Replace the address of this routine in bytes #b99 and
@ssub=LD (HL),27442%256
 27459 LD (HL),50    ; #b100 of the character's buffer with that of #R27442
@rsub+begin
       INC L
       LD (HL),27442/256
@rsub+end
                     ; }
 27461 LD L,103      ; {Collect the next byte (the number of walkabouts) from
 27463 CALL 24972    ; the command list and place it in byte #b103 of the
 27466 LD (HL),A     ; character's buffer}
 27467 LD L,101      ; {Collect the next byte (the signal byte - always 0) from
 27469 CALL 24972    ; the command list and place it in byte #b101 of the
 27472 LD (HL),A     ; character's buffer}
 27473 JP 25317      ; Send the character on his first mini-walkabout

; Lower the signal for a certain event
;
; Used by command lists #R64947(#b204) and #R64314(#b216).
@label=SIGLOWER
c27476 LD B,134      ; #b134 is the code for '#S/RES 0,(HL)/'
 27478 JR 27482      ; Jump into the signal-setting routine

; Raise the signal for a certain event
;
; Used by command lists #R64384(#b128), #R64410(#b130), #R64436(#b132),
; #R64458(#b134), #R64947(#b204), #R64230(#b208), #R64240(#b210),
; #R64265(#b212), #R64288(#b214), #R64314(#b216) and #R64341(#b218).
;
; H Character number (#b152-#b169)
@label=SIGRAISE
c27480 LD B,198      ; #b198 is the code for '#S/SET 0,(HL)/'
; This entry point is used by the routine at #R27476 with #REGb=#b134 (the code
; for '#S/RES 0,(HL)/').
*27482 CALL 24972    ; Get the event identifier (#b0-#b29) from the command
                     ; list
 27485 RRCA          ; {Point #REGhl at the appropriate signal flag holder
 27486 RRCA          ; (#R32712, #R32713, #R32714 or #R32715)
 27487 RRCA          ;
 27488 LD C,A        ;
 27489 AND 31        ;
@ssub=ADD A,32712%256
 27491 ADD A,200     ;
 27493 LD E,A        ;
 27494 LD D,127      ;
 27496 EX DE,HL      ; }
 27497 LD A,C        ; {Modify the instruction at #R27506 below to
 27498 RRCA          ; '#S/SET n,(HL)/' or '#S/RES n,(HL)/' as appropriate
 27499 RRCA          ;
 27500 AND 56        ;
 27502 ADD A,B       ;
@ssub=LD (27506+1),A
 27503 LD (27507),A  ; }
@label=SIGNAL
 27506 SET 0,(HL)    ; Lower or raise the signal for the event; this
                     ; instruction is modified immediately before execution so
                     ; that it sets or resets the appropriate bit
 27508 EX DE,HL      ; Restore the character number to #REGh
 27509 JP 25256      ; Move to the next command in the command list

@rsub-begin
; Unused
s27512 DEFS 5
@rsub-end

; Knock the current occupant (if any) out of a chair
;
; Used by the routines at #R27772 and #R27823. Knocks the current occupant (if
; any) out of the chair next to the character looking for a seat.
;
; H Number of the character looking for a seat
@label=CLEARSEAT
c27517 LD B,11       ; There are 11 little boys
 27519 LD D,152      ; #b152=little boy no. 1
 27521 CALL 27543    ; Knock any occupant out of the chair
 27524 RET C         ; Return if a little boy was knocked out of the chair
 27525 LD B,3        ; There are 3 main kids besides ERIC
 27527 LD D,167      ; #b167=BOY WANDER
 27529 CALL 27543    ; Knock any occupant out of the chair
 27532 LD D,172      ; #b172=ERIC
 27534 RET C         ; Return if a main kid was knocked out of the chair
 27535 INC B         ; #REGb=1 (just ERIC)
 27536 CALL 27543    ; Knock ERIC out of the chair if he's there
 27539 JR NC,27581   ; Jump unless ERIC was knocked out of the chair
 27541 RET           ;

@rsub-begin
; Unused
s27542 DEFB 0
@rsub-end

; Check whether a chair is occupied and unseat any occupant
;
; Used by the routine at #R27517. Returns with the carry flag reset if the
; chair next to the character looking for a seat is not occupied by any of the
; potential occupants being checked. Otherwise knocks the occupant out of the
; chair and returns with the carry flag set.
;
; B Number of potential occupants to check (11, 3, or 1)
; D Number of the first potential occupant to check (#b152, #b167, or #b172)
; H Number of the character looking for a seat (#b152-#b169)
@label=DETHRONE
c27543 LD L,98       ; {Byte #b98 of a character's buffer holds his
 27545 LD E,L        ; x-coordinate}
 27546 LD A,(DE)     ; #REGa=x-coordinate of the potential dethronee
 27547 CP (HL)       ; Do the x-coordinates match?
 27548 JR NZ,27564   ; Jump ahead to consider the next character if not
 27550 DEC E         ; {#REGe=#REGl=#b97 (which byte holds the character's
 27551 DEC L         ; y-coordinate)}
 27552 LD A,(DE)     ; #REGa=y-coordinate of the potential dethronee
 27553 CP (HL)       ; Do the y-coordinates match?
 27554 JR NZ,27564   ; Jump ahead to consider the next character if not
 27556 DEC E         ; #REGe=#b96
 27557 LD A,(DE)     ; #REGa=animatory state of the potential dethronee
 27558 AND 15        ;
 27560 CP 5          ; Is this character sitting in the chair?
 27562 JR Z,27569    ; Dethrone him if so
*27564 INC D         ; Next character to check
 27565 DJNZ 27543    ; Jump back until all potential dethronees have been
                     ; checked
 27567 AND A         ; {Return with the carry flag reset to indicate that no
 27568 RET           ; one was knocked out of the chair}
*27569 LD A,D        ; #REGa=number of the character sitting in the chair
 27570 CP 172        ; Is ERIC sitting here?
 27572 JR NZ,27601   ; Jump if not
 27574 LD DE,32763   ; #R32763 holds ERIC's status flags
 27577 EX DE,HL      ;
 27578 SET 4,(HL)    ; Signal: ERIC has been knocked out of his chair
*27580 EX DE,HL      ;
; This entry point is used by the routine at #R27517 to make the chair-seeking
; character sit down after having found a vacant seat.
*27581 LD L,112      ; {Remove the uninterruptible subcommand routine address
 27583 LD (HL),0     ; from bytes #b111 and #b112 of the buffer of the
                     ; character who is going to sit down}
 27585 LD L,96       ; {#REGa=this character's current animatory state
 27587 LD A,(HL)     ; }
 27588 AND 248       ; {Set #REGa to the animatory state of this character
 27590 ADD A,5       ; sitting in a chair}
*27592 INC L         ; {Pick up the character's coordinates in #REGde
 27593 LD D,(HL)     ;
 27594 INC L         ;
 27595 LD E,(HL)     ; }
 27596 CALL 25008    ; Update the character's animatory state and update the
                     ; SRB
 27599 SCF           ; {Return with the carry flag set to indicate that a
 27600 RET           ; character was pushed out of his chair}
; Someone is sitting in the chair, but it isn't ERIC.
*27601 LD E,112      ; {Is there an uninterruptible subcommand routine address
 27603 LD A,(DE)     ; in bytes #b111 and #b112 of the seated character's
 27604 AND A         ; buffer?}
 27605 JR Z,27613    ; Jump if not
; The current occupant of the chair must be in the process of being dethroned
; by someone else at the moment (i.e. bytes #b111 and #b112 of his buffer hold
; the address of the uninterruptible subcommand routine at #R27733). In that
; case, the chair-seeking character will give way to the dethroner and look for
; another chair.
 27607 LD L,96       ; {#REGa=current animatory state of the character who
 27609 LD A,(HL)     ; wants to sit down}
 27610 INC A         ; {Put this character midstride; this has the effect of
 27611 JR 27592      ; making him walk to the next chair}
; The current occupant of the chair can be dethroned. Make it so.
*27613 EX DE,HL      ;
@ssub=LD (HL),27733/256
 27614 LD (HL),108   ; {Place the address of the uninterruptible subcommand
 27616 DEC L         ; routine at #R27733 into bytes #b111 and #b112 of the
@ssub=LD (HL),27733%256
 27617 LD (HL),85    ; seated character's buffer}
 27619 JR 27580      ;

@rsub-begin
; Unused
s27621 DEFS 11
@rsub-end

; Check whether a character is beside a chair
;
; Used by the routine at #R27772. Returns with the zero flag set if the
; character is standing beside a chair. Returns with the carry flag set if the
; character should turn round.
;
; A Character's animatory state
; DE Character's coordinates
; H Character number (#b152-#b169)
@label=BYSEAT
c27632 BIT 7,A       ; Set the zero flag if the character is facing left
; This entry point is used by the routine at #R27823 with #REGh=#b172 (ERIC).
*27634 LD A,D        ; #REGa=character's y-coordinate
 27635 JR NZ,27694   ; Jump if the character is facing right
 27637 CP 155        ; Set the zero flag if the character is on the top floor
 27639 LD A,E        ; #REGa=character's x-coordinate
 27640 JR NZ,27666   ; Jump if the character's on the middle floor
 27642 CP 58         ; Is the character to the right of the Map Room wall?
 27644 JR NC,27659   ; Jump if so
 27646 CP 48         ; This is the x-coordinate of the leftmost chair in the
                     ; Reading Room
 27648 RET C         ; Return if the character is to the left of this
@rsub-begin
 27649 NOP           ;
@rsub-end
 27650 CP 56         ; This is the x-coordinate of the rightmost chair in the
                     ; Reading Room
*27652 JR Z,27655    ; Jump if the character is beside the rightmost chair in
                     ; the room
 27654 RET NC        ; Return if the character is to the right of this chair
*27655 AND A         ;
 27656 BIT 0,A       ; {Return with the zero flag set if the character is
 27658 RET           ; standing beside a chair}
; The character is on the top floor to the right of the Map Room wall.
*27659 CP 64         ; This is the x-coordinate of the leftmost chair in the
                     ; Map Room
 27661 RET C         ; Return if the character is to the left of this
 27662 CP 72         ; This is the x-coordinate of the rightmost chair in the
                     ; Map Room
 27664 JR 27652      ;
; The character is somewhere on the middle floor.
*27666 CP 39         ; Is the character to the right of the Exam Room wall?
 27668 JR NC,27678   ; Jump if so
 27670 CP 29         ; This is the x-coordinate of the leftmost chair in the
                     ; White Room
 27672 RET C         ; Return if the character is to the left of this
 27673 INC A         ; {This is the x-coordinate (+1) of the rightmost chair in
 27674 CP 38         ; the White Room}
 27676 JR 27652      ;
; The character is on the middle floor to the right of the Exam Room wall.
*27678 CP 43         ; This is the x-coordinate of the leftmost chair in the
                     ; Exam Room
 27680 RET C         ; Return if the character is to the left of this
 27681 CP 60         ; This is the x-coordinate of the left end of the first
                     ; set of chairs in the Exam Room
 27683 JR C,27689    ; Jump if the character is to the left of this
 27685 CP 68         ; This is the x-coordinate of the rightmost chair in the
                     ; Exam Room
 27687 JR 27652      ;
; The character is in the Exam Room, to the left of the first set of chairs.
*27689 INC A         ; {This is the x-coordinate (+1) of the right end of the
 27690 CP 54         ; second set of chairs in the Exam Room}
 27692 JR 27652      ;
; The character is facing right.
*27694 CP 155        ; Set the zero flag if the character is on the top floor
 27696 LD A,E        ; #REGa=character's x-coordinate
 27697 JR NZ,27714   ; Jump if the character is on the middle floor
 27699 CP 58         ; This is the x-coordinate of the wall between the Reading
                     ; and Map Rooms
 27701 JR NC,27710   ; Jump if the character is to the right of this
 27703 CP 55         ; This is the x-coordinate of the spot between the two
                     ; chairs at the right in the Reading Room; if this were
                     ; '#S/CP/ #n56' instead, kids would be able to find the
                     ; rightmost seat in the room
*27705 CCF           ; Clear the carry flag if the character is to the left of
                     ; the rightmost chair in the room (i.e. he's still on his
                     ; way there)
 27706 RET NZ        ; Return unless the character is beside the rightmost
                     ; chair in the room
 27707 AND A         ; {Reset the zero flag, and set the carry flag to indicate
 27708 CCF           ; that the character should turn round}
 27709 RET           ;
*27710 CP 72         ; This is the x-coordinate of the rightmost seat in the
                     ; Map Room
 27712 JR 27705      ;
*27714 CP 39         ; This is the x-coordinate of the wall between the White
                     ; and Exam Rooms
 27716 JR NC,27722   ; Jump if the character is to the right of this
 27718 CP 37         ; This is the x-coordinate of the rightmost chair in the
                     ; White Room
 27720 JR 27705      ;
*27722 CP 68         ; This is the x-coordinate of the rightmost chair in the
                     ; Exam Room
 27724 JR 27705      ;

@rsub-begin
; Unused
s27726 DEFS 7
@rsub-end

; Deal with a character who's been dethroned (1)
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b111 and #b112 of a character's buffer by the routine at #R27543 when he's
; been knocked out of a chair.
;
; H Dethroned character's number (#b152-#b169)
@label=UNSEAT1
c27733 LD L,113      ; {Set the delay counter determining how long the
 27735 LD (HL),4     ; character will sit on the floor before rising}
 27737 LD L,111      ; {Replace the address of this uninterruptible subcommand
@ssub=LD (HL),27748%256
 27739 LD (HL),100   ; routine in bytes #b111 and #b112 of the character's
                     ; buffer with that of #R27748
@rsub+begin
       INC L
       LD (HL),27748/256
@rsub+end
                     ; }
 27741 CALL 25108    ; Update the SRB for the character's current animatory
                     ; state
 27744 INC A         ; #REGa=animatory state of the character sitting on the
                     ; floor
 27745 JP 25008      ; Update the character's animatory state and update the
                     ; SRB

; Deal with a character who's been dethroned (2)
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b111 and #b112 of a character's buffer by the routine at #R27733.
;
; H Dethroned character's number (#b152-#b169)
@label=UNSEAT2
c27748 LD L,113      ; Byte #b113 holds the delay counter
 27750 DEC (HL)      ; Is it time to stand up yet?
 27751 RET NZ        ; Return if not
 27752 LD L,111      ; {Replace the address of this routine in bytes #b111 and
@ssub=LD (HL),27772%256
 27754 LD (HL),124   ; #b112 of the character's buffer with that of #R27772
@rsub+begin
       INC L
       LD (HL),27772/256
@rsub+end
                     ; }
 27756 CALL 25108    ; Update the SRB for the character's current animatory
                     ; state
 27759 AND 248       ; {#REGc=animatory state of the character standing up
 27761 LD C,A        ; }
 27762 LD A,H        ; #REGa=number of the dethroned character
 27763 CP 169        ; Was EINSTEIN knocked out of his chair?
 27765 JR Z,27768    ; Jump if so
 27767 DEC E         ; Anyone but EINSTEIN will look for another chair to the
                     ; left
*27768 LD A,C        ; #REGa=animatory state of the character standing up
 27769 JP 25008      ; Update the character's animatory state and location and
                     ; update the SRB

; Deal with a character who is looking for a seat
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b111 and #b112 of a character's buffer by the routine at #R27748 (after he's
; been knocked out of his chair and just got up to look for another one - or
; the same one, in EINSTEIN's case), or by the routine at #R27808.
;
; H Character number (#b152-#b169)
@label=FINDSEAT2
c27772 CALL 25108    ; Update the SRB for the character's current location
 27775 LD C,A        ; Store the character's animatory state in #REGc
                     ; temporarily
 27776 BIT 0,A       ; Is the character midstride?
 27778 JP NZ,25434   ; Finish the stride if so
 27781 CALL 27632    ; Is the character standing beside a chair?
 27784 JP Z,27517    ; If so, knock the current occupant (if any) to the floor,
                     ; make this character sit down, and remove the address of
                     ; this routine from bytes #b111 and #b112 of his buffer
 27787 LD A,C        ; Restore the character's animatory state to #REGa
@rsub-begin
 27788 NOP           ;
@rsub-end
 27789 JR NC,27794   ; Jump unless the character should turn round
 27791 XOR 128       ; Flip bit 7 of the animatory state, thus turning him
                     ; round
 27793 DEC A         ; Compensate for the '#S/INC A/' below
*27794 INC A         ; #REGa=character's new animatory state (midstride, or
                     ; just turned round)
 27795 JP 25008      ; Update the character's animatory state and update the
                     ; SRB

@rsub-begin
; Unused
s27798 DEFS 10
@rsub-end

; Make a character find a seat
;
; Used by command lists #R64484(#b136), #R64496(#b140), #R64516(#b142),
; #R64536(#b144), #R64548(#b146), #R64560(#b148), #R64587(#b150),
; #R64607(#b152), #R64619(#b154), #R64631(#b156), #R64658(#b158),
; #R64678(#b160), #R64690(#b162), #R64702(#b164), #R64729(#b166) and
; #R64749(#b168). Makes a character start looking for a seat.
;
; H Character number (#b152-#b169)
@label=FINDSEAT
c27808 LD L,100      ; {Remove the address of this primary command routine from
 27810 LD (HL),0     ; bytes #b99 and #b100 of the character's buffer,
                     ; triggering a move to the next command in the command
                     ; list (which will be #R31162 if the character is
                     ; EINSTEIN, or #R25247=#S/RET/ otherwise) as soon as the
                     ; character has found a seat}
 27812 LD L,111      ; {Place the address of the uninterruptible subcommand
@ssub=LD (HL),27772%256
 27814 LD (HL),124   ; routine at #R27772 into bytes #b111 and #b112 of the
 27816 INC L         ; character's buffer
@ssub=LD (HL),27772/256
 27817 LD (HL),108   ; }
 27819 JP 27772      ; Set the character off in search of a seat

@rsub-begin
; Unused
s27822 DEFB 0
@rsub-end

; 'S' pressed - sit/stand
;
; The address of this routine is found in the table of keypress handling
; routines at #R26624. It is called from the main loop at #R26471 when 'S' is
; pressed.
@label=SITSTAND
c27823 LD HL,32763   ; {Flip bit 7 of ERIC's status flags at #R32763
 27826 LD A,(HL)     ;
 27827 XOR 128       ;
 27829 LD (HL),A     ; }
 27830 LD H,172      ; #b172=ERIC
 27832 RLCA          ; Is ERIC sitting now?
 27833 JR C,27843    ; Jump if so
 27835 CALL 25108    ; Update the SRB for ERIC's current animatory state
 27838 AND 128       ; #REGa=animatory state of ERIC standing up
 27840 JP 25008      ; Update ERIC's animatory state and update the SRB
; ERIC is sitting now - on the floor, the stairs, or a chair?
*27843 CALL 25108    ; Update the SRB for ERIC's current animatory state
 27846 LD B,A        ; #REGb=ERIC's animatory state
 27847 CALL 26184    ; Is ERIC on a staircase?
 27850 JR Z,27864    ; Jump if not
; ERIC is on a staircase.
 27852 LD A,E        ; #REGa=ERIC's x-coordinate
 27853 CP 48         ; Set the carry flag if ERIC's on the left side of the
                     ; skool
 27855 LD A,133      ; #AS133=ERIC sitting down facing right
 27857 JR C,27861    ; Jump if ERIC is on a staircase on the left side of the
                     ; skool
 27859 LD A,5        ; #AS5=ERIC sitting down facing left
*27861 JP 25008      ; Update ERIC's animatory state and update the SRB
; ERIC is not on a staircase.
*27864 CP 169        ; Is ERIC on the bottom floor?
 27866 JR Z,27878    ; Jump if so
 27868 BIT 7,B       ; Is ERIC facing right?
 27870 JR NZ,27878   ; Jump if so
@ofix-begin
@nowarn
 27872 CALL 27633    ; This should be #S/CALL/ #R27634 - is ERIC beside a
                     ; chair?
@ofix+else
 27872 CALL 27634    ; Is ERIC beside a chair?
@ofix+end
 27875 JP Z,27517    ; Seat him if so
*27878 LD A,B        ; {#REGa=#AS6(#b6 or #b134) (ERIC sitting on the floor)
 27879 AND 128       ;
 27881 ADD A,6       ; }
 27883 JP 25008      ; Update ERIC's animatory state and update the SRB

@rsub-begin
; Unused
s27886 DEFS 2
@rsub-end

; Make a character stand up if he's not already standing
;
; Used by the routine at #R25534 to make sure a character is standing up before
; setting off for his destination.
;
; H Character number (#b152-#b169)
@label=STANDUP
c27888 LD L,99       ; {Change the primary command routine address in bytes
@ssub=LD (HL),25553%256
 27890 LD (HL),209   ; #b99 and #b100 of the character's buffer to #R25553
@rsub+begin
       INC L
       LD (HL),25553/256
@rsub+end
                     ; }
 27892 LD L,96       ; Point #REGhl at the character's animatory state
 27894 LD A,(HL)     ; Pick this up in #REGa
 27895 AND 7         ; Keep only bits 0-2
 27897 CP 4          ; Is the character standing?
 27899 RET C         ; Return if so
 27900 POP DE        ; Drop the return address (#R25553) from the stack
 27901 CALL 25108    ; Update the SRB for the character's current animatory
                     ; state
 27904 AND 248       ; #REGa=animatory state of the character standing up
 27906 JP 25008      ; Update the character's animatory state and update the
                     ; SRB

@rsub-begin
; Unused
s27909 DEFS 5
@rsub-end

; Get the base address of the graphic data for a sprite tile
;
; Used by the routine at #R24843. Returns with the base address of the graphic
; data in #REGhl.
;
; A Sprite UDG reference
; H' Character number (#b152-#b172)
@label=UDGADDR
c27914 LD L,A        ; #REGl=sprite UDG reference
 27915 EXX           ;
 27916 LD A,H        ; #REGa=character number (#b152-#b172)
 27917 CP 163        ; Is it a little boy?
 27919 JR C,27927    ; Jump if so
 27921 CP 167        ; Is it a teacher?
 27923 LD A,201      ;
 27925 JR C,27929    ; Jump if so
*27927 LD A,185      ;
*27929 EXX           ;
 27930 LD H,A        ; #REGh=#b201 if the character is a teacher, #b185
                     ; otherwise
 27931 RET           ;

; Control the horizontal flight of a catapult pellet
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b111 and #b112 of a catapult pellet's buffer by the routine at #R28744. It
; controls the pellet from the beginning of its horizontal flight to the end,
; handing over to the routine at #R28102 if the pellet bounces upwards off some
; obstacle.
;
; H #b170 (BOY WANDER's pellet) or #b171 (ERIC's pellet)
@label=PELLETH
c27932 CALL 25108    ; Update the SRB for the pellet's current location
 27935 LD L,113      ; Byte #b113 of the pellet's buffer holds the distance
                     ; left to travel
 27937 DEC (HL)      ; Has the pellet finished travelling?
 27938 JR NZ,27949   ; Jump if not
; This entry point is used by the routine at #R28102. It places the catapult
; pellet off-screen and terminates its flight.
*27940 LD L,98       ; {Set the pellet's x-coordinate to 150 (i.e. off-screen)
 27942 LD (HL),150   ; }
 27944 LD L,112      ; {Remove the address of this routine from bytes #b111 and
 27946 LD (HL),0     ; #b112 of the pellet's buffer}
 27948 RET           ;
; The pellet has not finished travelling. Where to next?
*27949 INC E         ; {Set #REGe equal to the next x-coordinate for the pellet
 27950 RLCA          ;
 27951 JR C,27955    ;
 27953 DEC E         ;
 27954 DEC E         ; }
*27955 LD A,E        ; #REGa=pellet's next x-coordinate
 27956 CP 96         ; Will it still be on-screen?
 27958 JR NC,27940   ; Terminate the pellet if not
 27960 LD A,D        ; #REGa=pellet's y-coordinate
 27961 CALL 26185    ; Was the pellet fired on the top, middle or bottom floor?
 27964 JR NZ,27981   ; Jump if not
 27966 CP 169        ; Is the pellet on the bottom floor?
 27968 JR Z,27981    ; Jump if so
 27970 CP 155        ; Set the zero flag if the pellet is on the top floor
 27972 LD A,38       ; This is the x-coordinate of the wall between the White
                     ; and Exam Rooms
 27974 JR NZ,27978   ; Jump if the pellet is on the middle floor
 27976 LD A,57       ; This is the x-coordinate of the wall between the Reading
                     ; and Map Rooms
*27978 CP E          ; Has the pellet hit a wall?
 27979 JR Z,27940    ; Terminate the pellet if so
*27981 LD L,96       ; Byte #b96 of the pellet's buffer holds its animatory
                     ; state
 27983 LD A,(HL)     ; Pick this up in #REGa
 27984 CALL 25008    ; Update the pellet's location and update the SRB
 27987 LD L,97       ; Byte #b97 of the pellet's buffer holds its y-coordinate
 27989 LD A,(HL)     ; Pick this up in #REGa
 27990 CALL 26185    ; Was the pellet fired on the top, middle or bottom floor?
 27993 JP NZ,28123   ; Jump if not
; The pellet was fired on the top, middle or bottom floor. Let's see if it's
; hit anybody.
 27996 LD L,113      ; Byte #b113 of the pellet's buffer holds the distance
                     ; left to travel
 27998 LD A,(HL)     ; Pick this up in #REGa
 27999 CP 8          ; Is the pellet ready to hit something?
 28001 RET NC        ; Return if not
@ssub=LD DE,44128+2
 28002 LD DE,44130   ; Point #REGde at ERIC's x-coordinate
 28005 LD L,E        ; #REGl=#b98
 28006 LD A,(DE)     ; Pick up ERIC's x-coordinate in #REGa
 28007 CP (HL)       ; Does it match the pellet's x-coordinate?
 28008 JR NZ,28036   ; Jump if not
 28010 DEC E         ; #REGe=#b97
 28011 DEC L         ; #REGl=#b97
 28012 LD A,(DE)     ; Pick up ERIC's y-coordinate in #REGa
 28013 INC E         ; #REGe=#b98
 28014 CP (HL)       ; Compare ERIC's y-coordinate with that of the pellet
 28015 LD L,E        ; #REGl=#b98
 28016 JR NZ,28036   ; Jump unless ERIC's location matches that of the pellet
@rfix-begin
; ERIC has been hit by the pellet. Knock him over.
@rfix+else
; ERIC is in the same location as the pellet. Can he be knocked over?
 28017 LD A,(44128)  ; #REGa=ERIC's animatory state
       AND 15        ; Keep only the 'action' bits (bits 0-3)
       CP 6          ; Is ERIC standing, midstride, or sitting in a chair?
       RET NC        ; Return if not (he can't be knocked over)
@rfix+end
 28018 LD DE,32763   ; {Signal that ERIC has been knocked over by setting bit 4
 28021 EX DE,HL      ; of ERIC's status flags at #R32763
 28022 SET 4,(HL)    ; }
*28024 EX DE,HL      ;
 28025 LD L,113      ; {The pellet has hit something; set its remaining
 28027 LD (HL),1     ; distance to travel to 1, so it's terminated next time}
 28029 LD A,D        ; #REGa=number of the character hit by the pellet
 28030 CP 168        ; Was ANGELFACE hit?
 28032 JP Z,27387    ; Add to the score and print it if so
 28035 RET           ;
; ERIC wasn't hit by the pellet. What about the main kids and teachers?
*28036 LD D,169      ; #b169=EINSTEIN
 28038 LD B,7        ; There are 3 main kids and 4 teachers
*28040 LD A,(DE)     ; Pick up the potential target's x-coordinate in #REGa
 28041 CP (HL)       ; Does it match that of the pellet?
 28042 JR Z,28048    ; Jump if so
*28044 DEC D         ; Next main kid or teacher
 28045 DJNZ 28040    ; Jump back until all the main kids and teachers have been
                     ; checked
 28047 RET           ;
*28048 DEC E         ; #REGe=#b97
 28049 DEC L         ; #REGl=#b97
 28050 LD A,(DE)     ; Pick up the potential target's y-coordinate in #REGa
 28051 INC E         ; #REGe=#b98
 28052 CP (HL)       ; Compare the potential target's y-coordinate
 28053 LD L,E        ; #REGl=#b98
 28054 JR NZ,28044   ; Jump unless the potential target's coordinates match
; We have found a potential target at the pellet's current coordinates. Can we
; knock him over?
 28056 LD E,112      ; {Byte #b112 of the character's buffer may hold the MSB
 28058 LD A,(DE)     ; of an uninterruptible subcommand routine address; pick
                     ; this up in #REGa}
 28059 LD E,L        ; #REGe=#b98
 28060 AND A         ; Is there an uninterruptible subcommand routine address
                     ; in bytes #b111 and #b112?
 28061 JR NZ,28076   ; Jump if so
 28063 EX DE,HL      ;
 28064 LD L,111      ; {Place the address of the uninterruptible subcommand
@ssub=LD (HL),27206%256
 28066 LD (HL),70    ; routine at #R27206 into bytes #b111 and #b112 of the
 28068 INC L         ; character's buffer, which will knock the character over
@ssub=LD (HL),27206/256
 28069 LD (HL),106   ; }
 28071 INC L         ; {Initialise the parameter determining how long the
 28072 LD (HL),20    ; character will stay down in byte #b113 of his buffer}
 28074 JR 28024      ;
; The potential target may already have been knocked over. Let's check.
*28076 LD E,96       ; Byte #b96 of the buffer holds the potential target's
                     ; animatory state
 28078 LD A,(DE)     ; Pick this up in #REGa
 28079 LD E,L        ; #REGe=#b98
 28080 AND 127       ; Remove the direction bit (bit 7)
 28082 CP 72         ; Is the potential target a kid?
 28084 JR C,28044    ; Jump back to consider the next main kid or teacher if so
 28086 AND 7         ; Retain only bits 0-2 of the teacher's animatory state
 28088 CP 7          ; Has the teacher already been knocked down?
 28090 JR NZ,28044   ; Jump back to consider the next teacher if not
; The pellet has hit a teacher who's already been knocked over. Prepare for
; vertical flight.
 28092 LD L,111      ; {Place the address of the uninterruptible subcommand
@ssub=LD (HL),28102%256
 28094 LD (HL),198   ; routine at #R28102 into bytes #b111 and #b112 of the
                     ; pellet's character buffer, which will make the pellet
                     ; travel upwards from now on
@rsub+begin
       INC L
       LD (HL),28102/256
@rsub+end
                     ; }
@rsub=INC L
 28096 LD L,113      ; {Set the pellet's remaining distance to travel to 5
 28098 LD (HL),5     ; spaces}
 28100 RET           ;

@rsub-begin
; Unused
s28101 DEFB 0
@rsub-end

; Control the vertical flight of a catapult pellet
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b111 and #b112 of a catapult pellet's buffer by the routine at #R27932. It
; controls the pellet from the beginning of its vertical flight to the end,
; including any collision with a shield.
;
; H #b170 (BOY WANDER's pellet) or #b171 (ERIC's pellet)
@label=PELLETV
c28102 CALL 25108    ; Update the SRB for the pellet's current location
 28105 LD B,A        ; #REGb=pellet's animatory state
 28106 LD A,D        ; #REGa=pellet's y-coordinate
 28107 CP 152        ; Has the pellet hit the ceiling of the top floor?
 28109 JP Z,27940    ; Terminate the pellet if so
 28112 DEC D         ; Up a level
 28113 LD L,113      ; Byte #b113 of the pellet's buffer holds the distance
                     ; left to travel
 28115 DEC (HL)      ; Has the pellet finished travelling?
 28116 JP Z,27940    ; Jump if so
 28119 LD A,B        ; #REGa=pellet's animatory state
 28120 CALL 25008    ; Update the pellet's location and update the SRB
; This entry point is used by the routine at #R27932 to check whether a pellet
; fired from a staircase has hit a shield.
*28123 LD L,97       ; Byte #b97 holds the pellet's y-coordinate
 28125 LD D,(HL)     ; Pick this up in #REGd
 28126 INC D         ; #REGd=y-coordinate of the pellet's potential target
 28127 INC L         ; Byte #b98 holds the pellet's x-coordinate
 28128 LD E,(HL)     ; Pick this up in #REGe
 28129 INC E         ; #REGe=x-coordinate of the pellet's potential target
; This entry point is used by the routine at #R63270 with #REGde holding the
; coordinates of ERIC's hand (and #REGh=#b172).
*28130 SET 7,E       ; #REGe=128 + x-coordinate of the potential target
 28132 PUSH HL       ;
 28133 CALL 28143    ; Has the pellet (or ERIC's hand) hit a shield?
 28136 POP HL        ;
 28137 RET NC        ; Return if not
 28138 LD L,113      ; {If it was a pellet that hit the shield, this sets its
 28140 LD (HL),1     ; remaining distance to travel to 1, so it will be
                     ; terminated the next time this routine is called}
 28142 RET           ;

; Check whether a shield has been hit
;
; Used by the routine at #R28102. Returns with the carry flag set if a shield
; was hit (either by a catapult pellet or by ERIC while jumping).
;
; D Target y-coordinate
; E 128 + target x-coordinate
@label=CHKSHIELD
c28143 LD A,(32746)  ; #R32746 holds the game mode indicator
 28146 RRCA          ; Are the shields hittable at the moment?
 28147 RET NC        ; Return if not (it's either demo mode, or ERIC's looking
                     ; for the safe combination)
 28148 RRCA          ; {Now bit 7 of #REGc is reset if we're in 'flash the
 28149 LD C,A        ; shields' mode, or set if in 'unflash the shields' mode}
 28150 LD B,10       ; 100 points for hitting a shield on the top floor
 28152 LD A,D        ; #REGa=y-coordinate of the potential target
 28153 CP 154        ; This is the y-coordinate of the shields on the top floor
 28155 JR Z,28171    ; Jump if the pellet or ERIC's hand is at shield-height on
                     ; the top floor
 28157 CP 160        ; This is the y-coordinate of the shields on the middle
                     ; floor
 28159 LD B,20       ; 200 points for hitting a shield on the middle floor
 28161 JR Z,28171    ; Jump if the pellet or ERIC's hand is at shield-height on
                     ; the middle floor
 28163 LD B,40       ; 400 points for hitting a shield on the bottom floor
 28165 CP 166        ; This is the y-coordinate of the shields on the bottom
                     ; floor
 28167 JR Z,28171    ; Jump if the pellet or ERIC's hand is at shield-height on
                     ; the bottom floor
 28169 AND A         ; Reset the carry flag to indicate that no shield was hit
 28170 RET           ;
; The pellet or ERIC's hand is at the right height to hit a shield. Is it at
; the right x-coordinate?
*28171 CALL 62674    ; Is the potential target on-screen?
 28174 CCF           ;
 28175 RET NC        ; Return with the carry flag reset if not
 28176 LD A,(DE)     ; #REGa=attribute of the potential target
 28177 AND 56        ; {Return if the potential target is drawn in black paper
 28179 RET Z         ; or black ink (which is normally true only if it's not a
 28180 LD A,(DE)     ; shield, but is also true if a speech bubble has been
 28181 AND 7         ; drawn over a shield; in this case, the routine exits
 28183 RET Z         ; here, which is a #BUG#hiddenShield(bug))}
 28184 LD A,(DE)     ; #REGa=attribute of the shield
 28185 XOR C         ; {Check whether we should make the shields flash or not
 28186 RLCA          ; flash, and return unless the flash status of the shield
 28187 RET C         ; should be toggled}
 28188 LD A,(DE)     ; #REGa=attribute of the shield
 28189 XOR 128       ; Toggle the FLASH status of the shield
 28191 LD (DE),A     ; Insert the new attribute byte into the skool graphic
                     ; data
 28192 LD (HL),A     ; Apply the new attribute on-screen
 28193 LD A,B        ; #REGa=10 (top floor), 20 (middle) or 40 (bottom)
 28194 CALL 27389    ; Add 100, 200 or 400 to the score and print it
 28197 CALL 58604    ; Play the 'hit a shield' sound effect
 28200 LD HL,32747   ; #R32747 holds the shield counter
 28203 DEC (HL)      ; One more shield hit
 28204 SCF           ; Set the carry flag to indicate that a shield was hit
 28205 RET NZ        ; Return unless the last shield was hit
 28206 CALL 63668    ; All the shields have been hit; take appropriate action
 28209 SCF           ; Set the carry flag to indicate that a shield was hit
 28210 RET           ;

; Select a special PLAYTIME occasionally
;
; Used by the routine at #R63749. Three times out of eight, this routine
; returns with the identifier of a 'special' playtime (#LESSON243, #LESSON244
; or #LESSON245) in #REGa; the rest of the time it returns with #REGa holding
; the PLAYTIME identifier from the #R65024(main timetable).
;
; A Random number
; DE Address of the main timetable entry
@label=PLAYTIME
c28211 AND 7         ; {#REGa=random number between #b238 and #b245
 28213 ADD A,238     ; }
 28215 CP 243        ; {Return if #REGa is #b243, #b244, or #b245 (one of the
 28217 RET NC        ; 'special' playtimes)}
 28218 LD A,(DE)     ; {Otherwise return with #REGa holding the PLAYTIME
 28219 RET           ; identifier from the main timetable}

; Check whether a boy can be seen by a teacher
;
; Used by the routines at #R28446, #R28672 and #R62495. Returns with the carry
; flag set if the boy can be seen by a teacher, and the teacher's character
; number in #REGh'.
;
; H #b167 (BOY WANDER), #b168 (ANGELFACE) or #b172 (ERIC)
@label=VISIBLE
c28220 CALL 28304    ; Get the floor (#b155, #b162, #b169) nearest to the
                     ; character in #REGd
; This entry point is used by the routine at #R30636.
*28223 CALL 28327    ; Get the teacher's visibility range in [#REGc,#REGb]
 28226 EXX           ;
 28227 LD B,4        ; There are 4 teachers
 28229 LD H,163      ; And the first is #b163=MR WACKER
*28231 LD L,98       ; {Collect the teacher's x-coordinate from byte #b98 of
 28233 LD A,(HL)     ; his buffer}
 28234 EXX           ;
 28235 CP B          ; Is the teacher at or to the left of the upper bound of
                     ; the visibility range?
 28236 JR Z,28247    ; {Jump if so
 28238 JR C,28247    ; }
*28240 EXX           ;
*28241 INC H         ; Next teacher
 28242 DJNZ 28231    ; Jump back until all four teachers are done
 28244 AND A         ; Clear the carry flag to indicate that the boy wasn't
                     ; seen by a teacher
 28245 EXX           ;
 28246 RET           ;
*28247 CP C          ; Is the teacher to the left of the lower bound of the
                     ; visibility range?
 28248 JR C,28240    ; Jump back to consider the next teacher if so
; The teacher's x-coordinate is within the visibility range [#REGc,#REGb]. Now
; check his y-coordinate.
 28250 EXX           ;
 28251 LD L,112      ; {Is there an uninterruptible subcommand routine address
 28253 LD A,(HL)     ; in bytes #b111 and #b112 of the teacher's buffer?
 28254 AND A         ; }
 28255 JR NZ,28241   ; Jump back to consider the next teacher if so (this one
                     ; is occupied)
 28257 LD L,97       ; {Collect the teacher's y-coordinate from byte #b97 of
 28259 LD A,(HL)     ; his buffer}
 28260 INC L         ; #REGl=#b98
 28261 EXX           ;
 28262 CP 158        ; Is the teacher near or on the top floor?
 28264 JR NC,28270   ; Jump if not
 28266 LD A,155      ; This is the y-coordinate of the top floor
 28268 JR 28278      ;
*28270 CP 165        ;
 28272 LD A,162      ; This is the y-coordinate of the middle floor
 28274 JR C,28278    ; Jump if the teacher is near or on the middle floor
 28276 LD A,169      ; This is the y-coordinate of the bottom floor
*28278 CP D          ; Is the teacher within the y-coordinate visibility range?
 28279 JR NZ,28240   ; Jump back to consider the next teacher if not
; The teacher is close enough to the boy to see him. But is the teacher facing
; the right way?
 28281 EXX           ;
 28282 LD A,(HL)     ; #REGa=teacher's x-coordinate
 28283 EXX           ;
 28284 CP E          ; Is the teacher standing right where the boy is?
 28285 SCF           ; {Return with the carry flag set if so
 28286 RET Z         ; }
 28287 CP E          ; {#REGa=#b128 if the boy is to the right of the teacher,
 28288 LD A,0        ; #b0 if the boy is to the left
 28290 RRA           ; }
 28291 EXX           ;
 28292 LD L,96       ; Byte #b96 of the teacher's buffer holds his animatory
                     ; state
 28294 XOR (HL)      ; Reset bit 7 of #REGa if the teacher is facing the boy
 28295 LD L,98       ;
 28297 EXX           ;
 28298 RLCA          ; Push bit 7 of #REGa into the carry flag
 28299 CCF           ; {Return with the carry flag set if the teacher is facing
 28300 RET C         ; the boy}
 28301 JR 28240      ; Otherwise consider the next teacher

@rsub-begin
; Unused
s28303 DEFB 0
@rsub-end

; Determine which floor is nearest to a character
;
; Used by the routines at #R28220 and #R30890. Returns with #REGd holding #b155
; (top), #b162 (middle), or #b169 (bottom), corresponding to the floor nearest
; to the character.
;
; H #b167 (BOY WANDER), #b168 (ANGELFACE), #b169 (EINSTEIN) or #b172 (ERIC)
@label=FLOOR
c28304 LD L,98       ; Byte #b98 of a character's buffer holds his x-coordinate
 28306 LD E,(HL)     ; Pick this up in #REGe
 28307 DEC L         ; #REGl=#b97
 28308 LD D,(HL)     ; #REGd=character's y-coordinate
 28309 DEC L         ; #REGl=#b96
; This entry point is used by the routines at #R30636 and #R30890.
*28310 CALL 26184    ; Is the character on a staircase?
 28313 RET Z         ; Return if not
; The character is on a staircase. Which floor is he nearest?
 28314 LD D,155      ; This is the y-coordinate of the top floor
 28316 CP 158        ; Is the character nearest the top floor?
 28318 RET C         ; Return if so
 28319 LD D,162      ; This is the y-coordinate of the middle floor
 28321 CP 165        ; Is the character nearest the middle floor?
 28323 RET C         ; Return if so
 28324 LD D,169      ; This is the y-coordinate of the bottom floor
 28326 RET           ;

; Get the x-coordinate range within which a character can see or be seen
;
; Used by the routines at #R28220 and #R30890. Returns with #REGc and #REGb
; holding the lower and upper x-coordinates of the range within which the
; target character can see or be seen. This routine is called with #REGde
; holding either (a) the coordinates of a teacher (to determine where kids must
; be in order to get lines), or (b) the coordinates of a kid (to determine
; where a teacher must be in order to give lines).
;
; D Target character's floor: #b155 (top), #b162 (middle) or #b169 (bottom)
; E Target character's x-coordinate
@label=VISRANGE
c28327 LD A,E        ; #REGa=x (character's x-coordinate)
@keep
 28328 LD BC,24576   ; #REGb=#b96, #REGc=#b0 (maximum and minimum bounds)
 28331 SUB 10        ; Is the character's x-coordinate < 10?
 28333 JR C,28356    ; Jump if so
 28335 LD C,A        ; #REGc=x-10
 28336 LD A,D        ; #REGa=floor nearest to the character
 28337 CP 169        ; Is the character nearest the bottom floor?
 28339 JR Z,28356    ; Jump if so
 28341 CP 162        ; Set the zero flag if the character is nearest the middle
                     ; floor
 28343 LD A,38       ; This is the x-coordinate of the Exam Room wall
 28345 JR Z,28349    ; Jump if the character is nearest the middle floor
 28347 LD A,57       ; This is the x-coordinate of the Map Room wall
*28349 CP C          ; Is the character more than 10 paces to the right of a
                     ; wall?
 28350 JR C,28356    ; Jump if so
 28352 CP E          ; Is the character to the left of a wall?
 28353 JR NC,28356   ; Jump if so
 28355 LD C,A        ; #REGc=x-coordinate of the wall that the character is
                     ; within 10 paces to the right of
; Now #REGc holds the lower x-coordinate of the visibility range. Time to
; calculate the upper x-coordinate.
*28356 LD A,E        ; #REGa=x (character's x-coordinate)
 28357 ADD A,10      ; #REGa=x+10
 28359 CP B          ; Is the character within 10 paces of the far right wall?
 28360 RET NC        ; Return if so
 28361 LD B,A        ; #REGb=x+10
 28362 LD A,D        ; #REGa=floor nearest to the character
 28363 CP 169        ; Is the character nearest the bottom floor?
 28365 RET Z         ; Return if so
 28366 CP 162        ; Set the zero flag if the character is nearest the middle
                     ; floor
 28368 LD A,37       ; This is the x-coordinate of the White Room wall
 28370 JR Z,28374    ; Jump if the character is nearest the middle floor
 28372 LD A,56       ; This is the x-coordinate of the Reading Room wall
*28374 CP B          ; Is the character more than 10 paces to the left of a
                     ; wall?
 28375 RET NC        ; Return if so
 28376 CP E          ; Is the character to the right of a wall?
 28377 RET C         ; Return if so
 28378 LD B,A        ; #REGb=x-coordinate of the wall
 28379 RET           ;

@rsub-begin
; Unused
s28380 DEFS 36
@rsub-end

; Check whether a character was or can be punched by ERIC or ANGELFACE
;
; Used by the routines at #R28446 and #R28569. On entry, #REGe holds the
; x-coordinate of the spot three spaces in front of ANGELFACE to check whether
; it's worth raising his fist (#R28446), or the x-coordinate of the spot two
; spaces in front of ERIC or ANGELFACE when he has already raised his fist
; (#R28569). Returns with the carry flag set if the potential victim is at the
; target coordinates and is facing the right way.
;
; C Punching character's animatory state
; D Punching character's y-coordinate
; E Target x-coordinate (2 or 3 spaces in front of the punching character)
; H Character number of the potential victim (#b152-#b172)
@label=VICTIM
c28416 LD L,98       ; Byte #b98 of a character's buffer holds his x-coordinate
 28418 LD A,(HL)     ; Pick this up in #REGa
 28419 CP E          ; Is this character at the target x-coordinate?
 28420 JR Z,28424    ; Jump if so
*28422 AND A         ; Reset the carry flag to indicate absence of character
 28423 RET           ;
*28424 DEC L         ; Byte #b97 holds the character's y-coordinate
 28425 LD A,(HL)     ; Pick this up in #REGa
 28426 CP D          ; Is this character at the target y-coordinate?
 28427 JR NZ,28422   ; Jump if not
; The character being checked has been found at the target coordinates. But is
; he facing the right way?
 28429 DEC L         ; Byte #b96 holds the character's animatory state
 28430 LD A,(HL)     ; Pick this up in #REGa
 28431 XOR C         ; {Now #REGa=#b128 if the character and puncher are facing
 28432 AND 128       ; each other, and #b0 otherwise}
 28434 RET Z         ; Return if the character's not facing the puncher
 28435 LD L,112      ; {Is there an uninterruptible subcommand routine address
 28437 LD A,(HL)     ; in bytes #b111 and #b112 of the potential victim's
 28438 AND A         ; buffer (i.e. is he not in a punchable state at the
                     ; moment)?}
 28439 RET NZ        ; Return with the carry flag reset if so
 28440 SCF           ; Set the carry flag to indicate the presence of a ripe
                     ; target
 28441 RET           ;

@rsub-begin
; Unused
s28442 DEFS 4
@rsub-end

; Make ANGELFACE hit now and then
;
; The address of this continual subcommand routine is placed into bytes #b124
; and #b125 of ANGELFACE's buffer by command lists #R64516(#b142),
; #R64587(#b150), #R64658(#b158), #R64729(#b166), #R64785(#b174),
; #R64825(#b180) and #R64841(#b182). It decides whether ANGELFACE should throw
; a punch, and gets the punching action under way if so.
;
; H #b168 (ANGELFACE)
@label=VIOLENT
c28446 LD L,112      ; {Return now if there is an uninterruptible subcommand
 28448 LD A,(HL)     ; routine address in bytes #b111 and #b112 of ANGELFACE's
 28449 AND A         ; buffer (meaning he is currently occupied)
 28450 RET NZ        ; }
 28451 LD L,96       ; Byte #b96 holds ANGELFACE's animatory state
 28453 BIT 0,(HL)    ; Is ANGELFACE midstride?
 28455 RET NZ        ; Return if so
 28456 INC L         ; Byte #b97 holds ANGELFACE's y-coordinate
 28457 LD A,(HL)     ; Pick this up in #REGa
 28458 CALL 26185    ; Is ANGELFACE on a staircase?
 28461 RET NZ        ; Return if so
 28462 CALL 28220    ; Can any teachers see ANGELFACE?
 28465 RET C         ; Return if so
; ANGELFACE is not on a staircase, and there are no teachers nearby. Are there
; any potential victims nearby?
 28466 LD L,98       ; Byte #b98 holds ANGELFACE's x-coordinate
 28468 LD A,(HL)     ; Pick this up in #REGa
 28469 DEC L         ; {Pick up ANGELFACE's y-coordinate in #REGd
 28470 LD D,(HL)     ; }
 28471 DEC L         ; #REGl=#b96 (which byte holds ANGELFACE's animatory
                     ; state)
 28472 SUB 3         ; {Set #REGa equal to the 'target' x-coordinate (i.e.
 28474 BIT 7,(HL)    ; where a character would have to be in order to receive
 28476 JR Z,28480    ; ANGELFACE's punch)
 28478 ADD A,6       ; }
*28480 LD E,A        ; Place the target x-coordinate in #REGe
 28481 LD C,(HL)     ; #REGc=ANGELFACE's animatory state
 28482 LD H,172      ; #b172=ERIC
 28484 CALL 28416    ; Is ERIC a potential target?
 28487 JR NC,28502   ; Jump if not
@rsub-begin
 28489 NOP           ;
@rsub-end
; If we get here, there is a potential victim in front of ANGELFACE for him to
; take a swing at.
*28490 POP HL        ; Drop the return address (#R25172) from the stack; this
                     ; makes the character-moving routine at #R25126 skip any
                     ; further consideration of ANGELFACE on this pass, thus
                     ; preventing him from moving midstride before throwing the
                     ; punch
@ssub=LD HL,43104+17
 28491 LD HL,43121   ; Point #REGhl at byte #b113 of ANGELFACE's buffer
 28494 LD (HL),C     ; Store his current animatory state there
 28495 DEC L         ; {Place the address of the uninterruptible subcommand
@ssub=LD (HL),28544/256
 28496 LD (HL),111   ; routine at #R28544 (throw a punch) into bytes #b111 and
 28498 DEC L         ; #b112 of ANGELFACE's buffer
@ssub=LD (HL),28544%256
 28499 LD (HL),128   ; }
 28501 RET           ;
; ERIC is not a potential target for ANGELFACE's fist. What about the other
; main kids?
*28502 LD H,169      ; #b169=EINSTEIN
 28504 LD B,3        ; There are three main kids
*28506 CALL 28416    ; Is this main kid a potential target?
 28509 JR NC,28513   ; Jump if not
 28511 JR 28490      ; Otherwise throw a punch
*28513 DEC H         ; Next main kid
 28514 DJNZ 28506    ; Jump back until the three main kids have been checked
; EINSTEIN and BOY WANDER weren't potential targets either. What about the
; little boys?
 28516 LD H,152      ; #b152=little boy no. 1
 28518 LD B,7        ; We check only the first seven little boys -
                     ; #FACT#bullyFriends(interesting)!
*28520 CALL 28416    ; Is this little boy a potential target?
 28523 JR NC,28527   ; Jump if not
 28525 JR 28490      ; Otherwise throw a punch
*28527 INC H         ; Next little boy
 28528 DJNZ 28520    ; Jump back until the seven little boys have been checked
 28530 LD H,168      ; Restore ANGELFACE's character number to #REGh
 28532 RET           ;

@rsub-begin
; Unused
s28533 DEFS 11
@rsub-end

; Make ANGELFACE throw a punch (1)
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b111 and #b112 of ANGELFACE's buffer by the routine at #R28446.
;
; H #b168 (ANGELFACE)
@label=PUNCH1
c28544 LD L,111      ; {Place the address of the uninterruptible subcommand
@ssub=LD (HL),28558%256
 28546 LD (HL),142   ; routine at #R28558 into bytes #b111 and #b112 of
                     ; ANGELFACE's buffer
@rsub+begin
       INC L
       LD (HL),28558/256
@rsub+end
                     ; }
 28548 CALL 25108    ; Update the SRB for ANGELFACE's current animatory state
 28551 AND 128       ; Retain the direction bit of ANGELFACE's animatory state
 28553 ADD A,42      ; #AS42=animatory state of ANGELFACE hitting (phase 1)
 28555 JP 25008      ; Update ANGELFACE's animatory state and update the SRB

; Make ANGELFACE throw a punch (2)
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b111 and #b112 of ANGELFACE's buffer by the routine at #R28544.
;
; H #b168 (ANGELFACE)
@label=PUNCH2
c28558 LD L,111      ; {Place the address of the uninterruptible subcommand
@ssub=LD (HL),28642%256
 28560 LD (HL),226   ; routine at #R28642 into bytes #b111 and #b112 of
                     ; ANGELFACE's buffer
@rsub+begin
       INC L
       LD (HL),28642/256
@rsub+end
                     ; }
 28562 CALL 25108    ; Update the SRB for ANGELFACE's current animatory state
 28565 INC A         ; #REGa=#AS43(#b43/#b171): ANGELFACE hitting (phase 2)
 28566 CALL 25008    ; Update ANGELFACE's animatory state and update the SRB,
                     ; then continue into the routine at #R28569

; Check whether anyone was punched by ERIC or ANGELFACE
;
; Continues from #R28558. Also used by the routine at #R62628. Checks whether
; anyone was punched by ERIC or ANGELFACE, and knocks them out if so.
;
; H #b168 (ANGELFACE) or #b172 (ERIC)
@label=CHECKHIT
c28569 LD L,98       ; Byte #b98 of the puncher's buffer holds his x-coordinate
 28571 LD A,(HL)     ; Pick this up in #REGa
 28572 DEC L         ; #REGl=#b97
 28573 LD D,(HL)     ; Pick up the puncher's y-coordinate in #REGd
 28574 DEC L         ; #REGl=#b96
 28575 LD C,(HL)     ; Pick up the puncher's animatory state in #REGc
 28576 SUB 2         ; {#REGa=x-coordinate of the location two spaces in front
 28578 BIT 7,(HL)    ; of the puncher
 28580 JR Z,28584    ;
 28582 ADD A,4       ; }
*28584 LD E,A        ; Store the potential victim's x-coordinate in #REGe
 28585 LD A,(32763)  ; Collect ERIC's status flags from #R32763
 28588 AND A         ; Is ERIC doing the punching?
 28589 JR NZ,28606   ; Jump if so
 28591 LD H,172      ; #b172=ERIC
 28593 CALL 28416    ; Was ERIC punched?
 28596 JR NC,28606   ; Jump if not
 28598 LD DE,32763   ; #R32763 holds ERIC's status flags
 28601 EX DE,HL      ;
 28602 SET 4,(HL)    ; Signal: ERIC was hit
 28604 EX DE,HL      ;
 28605 RET           ;
; Now we check whether anyone was punched. We start with the three main kids.
*28606 LD B,3        ; There are three main kids
 28608 LD H,169      ; #b169=EINSTEIN
*28610 CALL 28416    ; Was this main kid punched?
 28613 JR NC,28626   ; Jump if not
*28615 LD L,111      ; {Place the address of the uninterruptible subcommand
@ssub=LD (HL),27206%256
 28617 LD (HL),70    ; routine at #R27206 into bytes #b111 and #b112 of the
 28619 INC L         ; victim's character buffer
@ssub=LD (HL),27206/256
 28620 LD (HL),106   ; }
 28622 INC L         ; {Initialise the parameter determining how long the
 28623 LD (HL),20    ; character will stay down (in byte #b113)}
 28625 RET           ;
*28626 DEC H         ; Next main kid
 28627 DJNZ 28610    ; Jump back until three main kids have been considered
; None of the main kids was hit. What about the little boys?
 28629 LD H,152      ; #b152=character number of little boy no. 1
 28631 LD B,11       ; There are 11 little boys
*28633 CALL 28416    ; Was this little boy hit?
 28636 JR C,28615    ; Knock him over if so
 28638 INC H         ; Next little boy
 28639 DJNZ 28633    ; Jump back until all 11 little boys have been considered
 28641 RET           ;

; Make ANGELFACE throw a punch (3)
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b111 and #b112 of ANGELFACE's buffer by the routine at #R28558.
;
; H #b168 (ANGELFACE)
@label=PUNCH3
c28642 LD L,111      ; {Place the address of the uninterruptible subcommand
@ssub=LD (HL),28655%256
 28644 LD (HL),239   ; routine at #R28655 into bytes #b111 and #b112 of
                     ; ANGELFACE's buffer
@rsub+begin
       INC L
       LD (HL),28655/256
@rsub+end
                     ; }
 28646 CALL 25108    ; Update the SRB for ANGELFACE's current animatory state
 28649 LD L,113      ; {Collect the animatory state of ANGELFACE before he
 28651 LD A,(HL)     ; threw the punch (from byte #b113 of his buffer)}
 28652 JP 25008      ; Restore ANGELFACE's pre-punch animatory state and update
                     ; the SRB

; Make ANGELFACE throw a punch (4)
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b111 and #b112 of ANGELFACE's buffer by the routine at #R28642.
;
; H #b168 (ANGELFACE)
@label=PUNCH4
c28655 JP 25248      ; Terminate this uninterruptible subcommand (ANGELFACE has
                     ; finished the punch)

@rsub-begin
; Unused
s28658 DEFS 7
@rsub-end

; Make BOY WANDER fire his catapult (1)
;
; Continues from the routine at #R28672.
;
; H #b167 (BOY WANDER)
; L #b111
@label=FIRE1
@ssub=LD (HL),28716%256
c28665 LD (HL),44    ; {Place the address of the uninterruptible subcommand
 28667 INC L         ; routine at #R28716 into bytes #b111 and #b112 of BOY
@ssub=LD (HL),28716/256
 28668 LD (HL),112   ; WANDER's buffer}
 28670 POP HL        ; {Drop the return address (#R25172) from the stack and go
 28671 RET           ; on to consider moving the next character}

; Make BOY WANDER fire his catapult now and then
;
; The address of this continual subcommand routine is placed into bytes #b124
; and #b125 of BOY WANDER's buffer by command lists #R64496(#b140),
; #R64560(#b148), #R64631(#b156), #R64702(#b164), #R64769(#b172),
; #R64809(#b178), #R64892(#b192), #R64988(#b194) and #R64314(#b216). It decides
; whether BOY WANDER should let rip with a pellet, and gets the catapult-firing
; action under way if so.
;
; H #b167 (BOY WANDER)
@label=CATTY
c28672 LD L,98       ; Byte #b98 of BOY WANDER's buffer holds his x-coordinate
 28674 LD A,(HL)     ; Pick this up in #REGa
 28675 AND 3         ; Is BOY WANDER's x-coordinate divisible by 4?
 28677 RET NZ        ; Return if not
 28678 LD L,96       ; Byte #b96 holds BOY WANDER's animatory state
 28680 BIT 0,(HL)    ; Is BOY WANDER midstride?
 28682 RET NZ        ; Return if so
 28683 LD L,112      ; {Return if there is already an uninterruptible
 28685 LD A,(HL)     ; subcommand routine address in bytes #b111 and #b112 of
 28686 AND A         ; BOY WANDER's buffer (he's otherwise occupied)
 28687 RET NZ        ; }
 28688 CALL 24993    ; #REGa=random number
 28691 RRCA          ; {Return half the time
 28692 RET NC        ; }
 28693 LD L,97       ; Byte #b97 holds BOY WANDER's y-coordinate
 28695 LD A,(HL)     ; Pick this up in #REGa
 28696 CALL 26185    ; Is BOY WANDER on a staircase?
 28699 RET NZ        ; Return if so
 28700 CALL 28220    ; Are there any teachers around who can see BOY WANDER?
 28703 RET C         ; Return if so
@ssub=LD A,(43616+2)
 28704 LD A,(43618)  ; Pick up the x-coordinate of BOY WANDER's pellet in #REGa
 28707 RLCA          ; Is BOY WANDER's catapult pellet airborne at the moment?
 28708 RET NC        ; Return if so
 28709 LD L,111      ;
 28711 JR 28665      ; Make BOY WANDER fire his catapult

@rsub-begin
; Unused
s28713 DEFS 3
@rsub-end

; Make BOY WANDER fire his catapult (2)
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b111 and #b112 of BOY WANDER's buffer by the routine at #R28665.
;
; H #b167 (BOY WANDER)
@label=FIRE2
c28716 LD L,111      ; {Replace the address of this uninterruptible subcommand
@ssub=LD (HL),28733%256
 28718 LD (HL),61    ; routine in bytes #b111 and #b112 of BOY WANDER's buffer
                     ; with #R28733
@rsub+begin
       INC L
       LD (HL),28733/256
@rsub+end
                     ; }
 28720 CALL 25108    ; Update the SRB for BOY WANDER's current animatory state
 28723 LD L,113      ; {Store BOY WANDER's pre-fire animatory state in byte
 28725 LD (HL),A     ; #b113 of his buffer}
 28726 AND 128       ; {#REGa=#AS56(#b56/#b184): BOY WANDER firing (phase 1)
 28728 ADD A,56      ; }
 28730 JP 25008      ; Update BOY WANDER's animatory state and update the SRB

; Make BOY WANDER fire his catapult (3)
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b111 and #b112 of BOY WANDER's buffer by the routine at #R28716.
;
; H #b167 (BOY WANDER)
@label=FIRE3
c28733 LD L,111      ; {Replace the address of this uninterruptible subcommand
@ssub=LD (HL),28744%256
 28735 LD (HL),72    ; routine in bytes #b111 and #b112 of BOY WANDER's buffer
                     ; with #R28744
@rsub+begin
       INC L
       LD (HL),28744/256
@rsub+end
                     ; }
; This entry point is used by the routines at #R62495 and #R62628 with
; #REGh=#b172 (ERIC).
*28737 CALL 25108    ; Update the SRB for the character's current animatory
                     ; state
 28740 INC A         ; #REGa=animatory state of the character firing (phase 2)
 28741 JP 25008      ; Update the character's animatory state and update the
                     ; SRB

; Make BOY WANDER fire his catapult (4)
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b111 and #b112 of BOY WANDER's buffer by the routine at #R28733. At this
; point BOY WANDER's catapult is fully raised, and so a pellet is launched.
;
; H #b167 (BOY WANDER)
@label=FIRE4
c28744 LD L,111      ; {Replace the address of this uninterruptible subcommand
@ssub=LD (HL),28775%256
 28746 LD (HL),103   ; routine in bytes #b111 and #b112 of BOY WANDER's buffer
                     ; with #R28775
@rsub+begin
       INC L
       LD (HL),28775/256
@rsub+end
                     ; }
 28748 LD L,96       ; Byte #b96 of BOY WANDER's buffer holds his animatory
                     ; state (#AS57(#b57/#b185))
 28750 LD A,(HL)     ; Pick this up in #REGa
 28751 ADD A,70      ; Now #REGa=#AS127(#b127 or #b255) (catapult pellet)
 28753 INC L         ; {Pick up BOY WANDER's coordinates in #REGde
 28754 LD D,(HL)     ;
 28755 INC L         ;
 28756 LD E,(HL)     ; }
 28757 LD H,170      ; #b170=character number of BOY WANDER's catapult pellet
; This entry point is used by the routine at #R62495 with #REGh=#b171 (ERIC's
; catapult pellet).
*28759 LD (HL),E     ; {Fill in the initial coordinates and animatory state of
 28760 DEC L         ; the catapult pellet
 28761 LD (HL),D     ;
 28762 DEC L         ;
 28763 LD (HL),A     ; }
 28764 LD L,111      ; {Place the address of the uninterruptible subcommand
@ssub=LD (HL),27932%256
 28766 LD (HL),28    ; routine at #R27932 into bytes #b111 and #b112 of the
 28768 INC L         ; catapult pellet's buffer
@ssub=LD (HL),27932/256
 28769 LD (HL),109   ; }
 28771 INC L         ; {Initialise the pellet's remaining distance to travel
 28772 LD (HL),13    ; (13 spaces)}
 28774 RET           ;

; Make BOY WANDER fire his catapult (5)
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b111 and #b112 of BOY WANDER's buffer by the routine at #R28744.
;
; H #b167 (BOY WANDER)
@label=FIRE5
c28775 LD L,111      ; {Replace the address of this uninterruptible subcommand
@ssub=LD (HL),28786%256
 28777 LD (HL),114   ; routine in bytes #b111 and #b112 of BOY WANDER's buffer
                     ; with #R28786
@rsub+begin
       INC L
       LD (HL),28786/256
@rsub+end
                     ; }
; This entry point is used by the routines at #R62495 and #R62771 with
; #REGh=#b172 (ERIC).
*28779 CALL 25108    ; Update the SRB for the character's current animatory
                     ; state
 28782 DEC A         ; #REGa=character's next animatory state (lowering
                     ; catapult)
 28783 JP 25008      ; Update the character's animatory state and update the
                     ; SRB

; Make BOY WANDER fire his catapult (6)
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b111 and #b112 of BOY WANDER's buffer by the routine at #R28775.
;
; H #b167 (BOY WANDER)
@label=FIRE6
c28786 CALL 25108    ; Update the SRB for BOY WANDER's current animatory state
 28789 LD L,113      ; {Byte #b113 of BOY WANDER's buffer holds his pre-fire
 28791 LD A,(HL)     ; animatory state; pick this up in #REGa}
 28792 LD L,111      ; {Replace the address of this uninterruptible subcommand
@ssub=LD (HL),28799%256
 28794 LD (HL),127   ; routine in bytes #b111 and #b112 of BOY WANDER's buffer
                     ; with #R28799
@rsub+begin
       INC L
       LD (HL),28799/256
@rsub+end
                     ; }
 28796 JP 25008      ; Restore BOY WANDER's pre-fire animatory state and update
                     ; the SRB

; Make BOY WANDER his fire catapult (7)
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b111 and #b112 of BOY WANDER's buffer by the routine at #R28786.
;
; H #b167 (BOY WANDER)
@label=FIRE7
c28799 JP 25248      ; Terminate this uninterruptible subcommand (BOY WANDER
                     ; has finished firing)

@rsub-begin
; Unused
s28802 DEFS 5
@rsub-end

; Update the SRB for a blackboard or the speech bubble lip
;
; Used by the routines at #R28994, #R29160, #R29518 and #R29746. Updates the
; #R32524(screen refresh buffer) (SRB) so that the character squares at
; (#REGe,#REGd) and (#REGe+1,#REGd) are marked dirty. Two character squares in
; a row are marked dirty to ensure that blackboard contents are properly
; displayed (characters written on a blackboard may cross character square
; boundaries).
;
; D Skool y-coordinate
; E Skool x-coordinate
@label=SRBXY
c28807 LD A,(32512)  ; #REGa=X: leftmost column of the skool on screen (0-64)
 28810 SUB 2         ; {Return unless X-1<=#REGe<=X+31 (i.e. unless the
 28812 JR C,28816    ; coordinates in #REGde correspond to a skool location
 28814 CP E          ; that is currently on-screen or just off to the left)
 28815 RET NC        ;
*28816 ADD A,33      ;
 28818 CP E          ;
 28819 RET C         ; }
 28820 PUSH DE       ; Store the skool coordinates
 28821 SUB 32        ; {#REGa=#REGe-X (-1, 0-31)
 28823 CPL           ;
 28824 ADD A,E       ; }
 28825 BIT 7,A       ; Are the coordinates in #REGde on-screen?
 28827 JR Z,28830    ; Jump if so
 28829 INC A         ; #REGa=0
*28830 RLCA          ; {#REGa=8x (x=0-31, the screen x-coordinate)
 28831 RLCA          ;
 28832 RLCA          ; }
 28833 LD E,A        ; Save this value in #REGe briefly
 28834 AND 56        ; {Modify the #S/SET m,(HL)/ instruction at #R28857 below
 28836 ADD A,198     ;
@ssub=LD (28857+1),A
 28838 LD (28858),A  ; }
 28841 LD A,E        ; {Point #REGhl at the appropriate byte in the screen
 28842 RLCA          ; refresh buffer
 28843 RLCA          ;
 28844 AND 3         ;
 28846 LD E,A        ;
 28847 LD A,D        ;
 28848 SUB 149       ;
 28850 ADD A,A       ;
 28851 ADD A,A       ;
 28852 ADD A,E       ;
 28853 LD E,A        ;
 28854 LD D,127      ;
 28856 EX DE,HL      ; }
@label=SRBSET2
 28857 SET 0,(HL)    ; Set the appropriate bit in the SRB byte; this
                     ; instruction is modified earlier in this routine to set
                     ; the required bit
@ssub=LD A,(28857+1)
 28859 LD A,(28858)  ;
 28862 ADD A,8       ; Was m=7?
 28864 JR NC,28874   ; Jump if not
 28866 INC L         ; Move to the next SRB byte
 28867 LD A,L        ; {#REGa will be 0 if we wrapped round to the next row of
 28868 AND 3         ; the screen}
 28870 LD A,198      ; #b198 will set n=0
 28872 JR Z,28879    ; Jump if we wrapped round to the next row
@ssub=LD (28877+1),A
*28874 LD (28878),A  ; Modify the #S/SET n,(HL)/ instruction below so that
                     ; n=m+1 mod 8
@label=SRBSET3
 28877 SET 0,(HL)    ; Set the appropriate bit in the SRB byte; this
                     ; instruction is modified immediately before execution to
                     ; set the required bit
*28879 EX DE,HL      ;
 28880 POP DE        ; Restore the skool coordinates to #REGde
 28881 RET           ;

; Get the next character of a message being spoken or written
;
; Used by the routines at #R28994 and #R29706. Returns with the next character
; in #REGa.
;
; H Number of the character speaking or writing (#b152-#b169)
@label=NEXTCHR
c28882 LD L,110      ; {Bytes #b109 and #b110 of the character's buffer hold
 28884 LD A,(HL)     ; the address of the next character in the submessage}
 28885 AND A         ; Are we in a submessage at the moment?
 28886 JR Z,28904    ; Jump if not
 28888 LD D,A        ; {#REGde=address of the next character in the submessage
 28889 DEC L         ;
 28890 LD E,(HL)     ; }
 28891 LD A,(DE)     ; Pick up this character in #REGa
 28892 AND A         ; Has the submessage finished?
 28893 JR Z,28901    ; Jump if so
@rsub-begin
 28895 NOP           ;
@rsub-end
*28896 INC DE        ; {Move to the next character in the submessage, and store
 28897 LD (HL),E     ; its address in bytes #b109 and #b110 of the character's
 28898 INC L         ; buffer
 28899 LD (HL),D     ; }
 28900 RET           ;
; The submessage has finished.
*28901 LD (HL),A     ; {Zero out bytes #b109 and #b110 of the character's
 28902 INC L         ; buffer to indicate that the submessage is finished
 28903 LD (HL),A     ; }
; We are dealing with the main message.
*28904 LD L,108      ; {#REGde=address of the next character in the main
 28906 LD D,(HL)     ; message (collected from bytes #b107 and #b108 of the
 28907 DEC L         ; character's buffer)
 28908 LD E,(HL)     ; }
 28909 LD A,(DE)     ; Pick up the next character of the message
 28910 INC DE        ; {Move to the next character in the main message, and
 28911 LD (HL),E     ; store its address in bytes #b107 and #b108 of the
 28912 INC L         ; character's buffer
 28913 LD (HL),D     ; }
 28914 INC L         ; #REGl=#b109
 28915 BIT 7,A       ; Is the ASCII code of the next character < #b128?
 28917 JR Z,28938    ; Jump if so
; The ASCII code of the next character is >= #b128, which refers to an entry in
; one of the symbol/element, capital city/country and date/battle
; question-and-answer pairs.
 28919 AND 127       ; {Set #REGde to #R57088+#b12*(#REGa-#b128)
 28921 LD E,A        ;
 28922 EX DE,HL      ;
 28923 ADD A,A       ;
 28924 ADD A,L       ;
 28925 LD L,A        ;
 28926 LD H,56       ;
 28928 JR NC,28931   ;
 28930 INC H         ;
*28931 ADD HL,HL     ;
 28932 ADD HL,HL     ;
 28933 DEC H         ;
 28934 EX DE,HL      ; }
 28935 LD A,(DE)     ; {Pick up the first character of this submessage in #REGa
 28936 JR 28896      ; and store the next address in bytes #b109 and #b110 of
                     ; the character's buffer}
; The ASCII code of the next character in the message is < #b128.
*28938 CP 32         ; {Return if the next character is a normal, printable
 28940 RET NC        ; character (ASCII code >= #b32)}
 28941 CP 16         ; {Return if the ASCII code of the next character in the
 28943 RET C         ; message is < #b16}
; The ASCII code of the next character in the message is #b16-#b24. We have a
; submessage to deal with, which will be one of the following:
; .
; #TABLE(default,centre,centre)
; { =h Code | =h Address | =h Submessage }
; { #b16    | #R55680    | 'ERIC' }
; { #b17    | #R55694    | 'BOY WANDER' }
; { #b18    | #R55708    | 'ANGELFACE' }
; { #b19    | #R55722    | 'EINSTEIN' }
; { #b20    | #R55736    | 'MR WACKER' }
; { #b21    | #R55750    | 'MR ROCKITT' }
; { #b22    | #R55764    | 'MR WITHIT' }
; { #b23    | #R55778    | 'MR CREAK' }
; { #b24    | #R55792    | 'Please Sir - I cannot tell a lie . . ' }
; TABLE#
 28944 SUB 16        ; {Point #REGde at the appropriate submessage from the
 28946 LD E,A        ; table above
 28947 ADD A,A       ;
 28948 ADD A,A       ;
 28949 ADD A,A       ;
 28950 SUB E         ;
 28951 ADD A,A       ;
 28952 ADD A,128     ;
 28954 LD E,A        ;
 28955 LD D,217      ; }
 28957 LD A,(DE)     ; Pick up the first character of the submessage in #REGa
 28958 JR 28896      ; Store the address of the next character in the
                     ; submessage

@rsub-begin
; Unused
s28960 DEFS 8
@rsub-end

; Get the identifier and coordinates of the blackboard closest to a character
;
; Used by the routines at #R28994, #R29148, #R29160, #R29284, #R32048, #R62208,
; #R63056, #R63146 and #R64016. Returns with #REGa holding the blackboard
; identifier (the LSB of #R32748, #R32750 or #R32752) and #REGde holding the
; coordinates:
; .
; #TABLE(default)
; { =h A  | =h (D,E)  | =h Description }
; { #b236 | (155,42)  | Reading Room blackboard }
; { #b238 | (161,26)  | White Room blackboard }
; { #b240 | (161,41)  | Exam Room blackboard }
; TABLE#
;
; H Character number (#b163-#b167)
@label=BOARDID
c28968 LD L,97       ; Byte #b97 of the character's buffer holds his
                     ; y-coordinate
 28970 LD A,(HL)     ; Pick this up in #REGa
@keep
 28971 LD DE,39722   ; #REGd=155 (y-coordinate), #REGe=42 (x-coordinate)
 28974 CP 160        ; Set the carry flag if the character's on the top floor
 28976 LD A,236      ; #b236=Reading Room blackboard
 28978 RET C         ; Return if the character's on the top floor
 28979 INC L         ; #REGl=#b98
@keep
 28980 LD DE,41242   ; #REGd=161 (y-coordinate), #REGe=26 (x-coordinate)
 28983 LD A,(HL)     ; #REGa=character's x-coordinate
 28984 CP 37         ; This is the x-coordinate of the wall between the White
                     ; and Exam Rooms
 28986 LD A,238      ; #b238=White Room blackboard
 28988 RET C         ; Return if the character's to the left of the wall
                     ; between the White and Exam Rooms
 28989 LD E,41       ; #REGd=161 (y-coordinate), #REGe=41 (x-coordinate)
 28991 LD A,240      ; #b240=Exam Room blackboard
 28993 RET           ;

; Write a single character on a blackboard
;
; Used by the routine at #R29284. Returns with the zero flag set if the end of
; the message has been reached.
;
; H Number of the character writing on the board (#b163-#b167)
@label=WRITECHR
c28994 CALL 28882    ; #REGa=next character in the message being written
 28997 LD B,A        ; Save this in #REGb briefly
 28998 CALL 28968    ; #REGa=identifier of the blackboard being written on
 29001 LD C,A        ; Transfer this to #REGc
 29002 LD A,B        ; #REGa=next character in the message being written
 29003 LD B,127      ; Point #REGbc at the appropriate blackboard buffer
 29005 AND A         ; Is the message finished?
 29006 JR NZ,29012   ; Jump if not
 29008 DEC A         ; #REGa=#b255
*29009 LD (BC),A     ; Store the pixel coordinates of the next character to be
                     ; written on the board
 29010 INC A         ; Set the zero flag if the message is finished
 29011 RET           ;
; The character has not finished writing on the blackboard. #REGa holds the
; ASCII code of the next letter to be written.
*29012 CP 2          ; Is it newline?
 29014 JR NZ,29023   ; Jump if not
 29016 LD A,(BC)     ; {Pick up the contents of #R32748 (Reading Room
 29017 AND 64        ; blackboard), #R32750 (White Room blackboard) or #R32752
 29019 XOR 64        ; (Exam Room blackboard) and set it to 0 (start of top
                     ; line) or 64 (start of bottom line)}
 29021 JR 29009      ;
; This entry point is used by the routine at #R63146 when ERIC is writing on a
; blackboard with #REGbc=#R32684 (Reading Room blackboard), #R32690 (White Room
; blackboard), or #R32696 (Exam Room blackboard).
*29023 PUSH HL       ;
 29024 LD L,A        ; {Point #REGhl at the address holding the pixel width of
 29025 LD H,217      ; the character to be written on the board}
 29027 LD A,(BC)     ; #REGa=pixel coordinates (0-127) of the location at which
                     ; the character will be written
 29028 AND 63        ; Discard bit 6 (the line indicator bit)
 29030 ADD A,192     ; {Set the carry flag if there is not enough space at the
 29032 SCF           ; end of the current line to print the character
 29033 ADC A,(HL)    ; }
 29034 LD A,(BC)     ; #REGa=pixel coordinates (0-127)
 29035 JR NC,29042   ; Jump if there is enough space to print the character on
                     ; the current line
 29037 AND 64        ; {Otherwise toggle which line (top or bottom) to write on
 29039 XOR 64        ; and reset the pixel x-coordinate to 0 (start of the
 29041 LD (BC),A     ; line)}
*29042 RRCA          ; {Compute the skool coordinates of the location of the
 29043 RRCA          ; character to be written and store them in #REGde
 29044 RRCA          ;
 29045 AND 15        ;
 29047 CP 8          ;
 29049 JR C,29054    ;
 29051 INC D         ;
 29052 AND 7         ;
*29054 ADD A,E       ;
 29055 LD E,A        ; }
 29056 CALL 28807    ; Update the screen refresh buffer for these coordinates
 29059 LD A,(BC)     ; {Modify the #S/RES n,(HL)/ instruction at #R29102 below,
 29060 AND 7         ; which in effect draws a white pixel (of chalk) at the
 29062 ADD A,A       ; appropriate spot
 29063 ADD A,A       ;
 29064 ADD A,A       ;
 29065 CPL           ;
 29066 SUB 65        ;
@ssub=LD (29102+1),A
 29068 LD (29103),A  ; }
 29071 LD A,(BC)     ; {Compute the pixel x-coordinate (0-63) of the rightmost
 29072 ADD A,(HL)    ; pixel column of the character to be written on the
 29073 INC A         ; board, and store it in the blackboard buffer
 29074 LD (BC),A     ; }
 29075 LD C,(HL)     ; #REGc=pixel width of the character to be written on the
                     ; board
 29076 EX DE,HL      ; {Point #REGhl at the skool UDG reference of the
 29077 LD A,(HL)     ; character square of the blackboard that will be written
 29078 LD L,A        ; on and pick it up in #REGl}
; Now we enter the loop that draws the pixel columns of the font character
; bitmap onto the blackboard.
*29079 LD H,128      ; {Point #REGhl at the graphic data for the skool UDG
 29081 CP 233        ; reference in #REGa; the skool UDG references are
 29083 JR NC,29095   ; #b206-#b191 for the Reading Room board, #b238-#b223 for
 29085 CP 231        ; the White Room board, and #b222-#b207 for the Exam Room
 29087 JR NC,29093   ; board, decreasing from left to right
 29089 CP 225        ;
 29091 JR NC,29095   ;
*29093 LD H,136      ; }
*29095 INC D         ; {#REGa=next pixel column of the character to be written
 29096 LD A,(DE)     ; on the board}
 29097 LD B,8        ; There are 8 pixels in a pixel column
*29099 RLCA          ; {Draw the pixel column on the blackboard by directly
 29100 JR NC,29104   ; resetting bits in the skool graphic data; any bits
@label=CHALK
 29102 RES 7,(HL)    ; already reset by previous writing remain reset (the
*29104 INC H         ; '#S/RES n,(HL)/' instruction is modified earlier in this
 29105 DJNZ 29099    ; routine to reset the required bit)}
 29107 DEC C         ; Next pixel column
 29108 JR Z,29134    ; Jump if we've finished drawing the character on the
                     ; board
 29110 LD A,H        ; {Point #REGhl back at the top pixel row of the skool UDG
 29111 SUB 8         ; data
 29113 LD H,A        ; }
@ssub=LD A,(29102+1)
 29114 LD A,(29103)  ; {Modify the #S/RES n,(HL)/ instruction at #R29102 above
 29117 OR 64         ; to #S/RES m,(HL)/ where m=n-1 (mod 8), effectively
 29119 SUB 8         ; moving one pixel column to the right
 29121 AND 191       ;
@ssub=LD (29102+1),A
 29123 LD (29103),A  ; }
 29126 CP 190        ; Did we wrap round from bit 0 to bit 7?
 29128 JR NZ,29095   ; Continue drawing pixel columns in this character square
                     ; if not
 29130 DEC L         ; {#REGa=skool UDG reference of the next character square
 29131 LD A,L        ; to the right on the blackboard}
 29132 JR 29079      ; Draw the next pixel column in the next character square
*29134 INC C         ; Reset the zero flag to indicate that the message isn't
                     ; finished
 29135 POP HL        ; Restore the character number to #REGh
 29136 RET           ;

@rsub-begin
; Unused
u29137 DEFB 120,120,120,120,120,120,120,120,120,120,120
@rsub-end

; Make a teacher wipe a blackboard (1)
;
; The address of this interruptible subcommand routine is placed into bytes
; #b105 and #b106 of a teacher's buffer by the routine at #R32048.
;
; H Teacher's character number (#b163-#b166)
@label=WIPE1
c29148 CALL 28968    ; #REGa=identifier of the blackboard the teacher is next
                     ; to
@rsub-begin
 29151 JR 29160      ; Jump over the unused code remnants at #R29153 (which
                     ; apparently would have made the teacher skip wiping the
                     ; board if it was already clean)

; Unused
;
; Code remnants in the routine at #R29148. If this code were still in use, it
; would make the teacher skip wiping the board if it was already clean.
@label=WIPESKIP
u29153 DEFB 127      ; This was probably the operand of '#S/LD B/,#n127'
 29154 INC C         ; #REGc=1 + blackboard identifier
 29155 LD A,(BC)     ; #REGa=number of the character who last wrote on the
                     ; board
 29156 AND A         ; Is the board clean?
 29157 JP Z,25252    ; Terminate this interruptible subcommand if so (there is
                     ; nothing to wipe)
@rsub-end

; Make a teacher wipe a blackboard (2)
;
; Continues from #R29148.
;
; A Blackboard identifier (#b236, #b238 or #b240)
; DE Coordinates of the top-left corner of the blackboard
; H Teacher's character number (#b163-#b166)
@label=WIPE2
c29160 LD L,105      ; {Replace the address of the interruptible subcommand
@ssub=LD (HL),29175%256
 29162 LD (HL),247   ; routine at #R29148 in bytes #b105 and #b106 of the
                     ; teacher's buffer with #R29175 (below)
@rsub+begin
       INC L
       LD (HL),29175/256
@rsub+end
                     ; }
@rsub=INC L
 29164 LD L,107      ; {Wiping a blackboard requires 32 distinct actions (in 8
 29166 LD (HL),32    ; groups of 4: two paces forward, arm up, arm down)}
 29168 INC L         ; {Store the x-coordinate of the rightmost column of the
 29169 LD A,E        ; blackboard (which will be wiped first) in byte #b108 of
 29170 ADD A,7       ; the teacher's buffer
 29172 LD (HL),A     ; }
 29173 INC L         ; {Store the y-coordinate of the top row of the blackboard
 29174 LD (HL),D     ; in byte #b109 of the teacher's buffer}
; After the initial call to this routine, each subsequent call enters here.
@label=WIPING
 29175 LD L,107      ; {Decrement the number of board-wiping actions remaining
 29177 DEC (HL)      ; }
 29178 BIT 7,(HL)    ; Has the teacher finished wiping the board?
 29180 JR NZ,29264   ; Jump if so
 29182 CALL 25108    ; Update the SRB for the teacher's current location
 29185 LD L,107      ; {Is the teacher midstride or is his arm raised?
 29187 BIT 0,(HL)    ; }
 29189 JR Z,29248    ; Jump if so
 29191 BIT 1,(HL)    ; Is the teacher ready to raise his arm (and wipe)?
 29193 JR Z,29199    ; Jump if so
 29195 INC A         ; #REGa=animatory state of the teacher midstride
 29196 JP 25008      ; Update the teacher's animatory state and update the SRB
; The teacher is ready to raise his arm and wipe a column of the board.
*29199 ADD A,5       ; #REGa=animatory state of the teacher with his arm raised
 29201 CP 72         ; Are we actually dealing with a teacher?
 29203 JR NC,29207   ; Jump if so
 29205 ADD A,8       ; If ANGELFACE or BOY WANDER were wiping the board, #REGa
                     ; would now hold the animatory state of the boy with his
                     ; arm raised
*29207 CALL 25008    ; Update the teacher's animatory state and update the SRB
 29210 LD L,108      ; {#REGe=x-coordinate of the blackboard column to wipe
 29212 LD E,(HL)     ; }
 29213 DEC (HL)      ; Decrement the blackboard column x-coordinate
 29214 INC L         ; {#REGd=y-coordinate of the top row of the blackboard
 29215 LD D,(HL)     ; column to wipe}
 29216 CALL 28807    ; {Update the SRB for the upper and lower character
 29219 INC D         ; squares of the blackboard column that will be wiped
 29220 CALL 28807    ; }
 29223 LD A,(DE)     ; {#REGl=skool UDG reference for the lower character
 29224 LD L,A        ; square of the blackboard column}
 29225 ADD A,8       ; {#REGe=skool UDG reference for the upper character
 29227 LD E,A        ; square of the blackboard column}
 29228 LD H,128      ; {Point #REGhl at the base address of the UDG data for
 29230 CP 233        ; the lower character square of the blackboard column, and
 29232 JR NC,29236   ; #REGde at the base address of the UDG data for the upper
 29234 LD H,136      ; character square of the blackboard column
*29236 LD D,H        ; }
 29237 LD B,8        ; There are 8 bytes in a UDG
 29239 LD A,255      ; All bits set means clean (no chalk)
*29241 LD (HL),A     ; {Wipe the blackboard column clean by altering the skool
 29242 LD (DE),A     ; UDG data directly
 29243 INC H         ;
 29244 INC D         ;
 29245 DJNZ 29241    ; }
 29247 RET           ;
; The teacher is midstride or his arm is raised.
*29248 AND 248       ; #REGa=base animatory state of the teacher
 29250 CP 72         ; Are we actually dealing with a teacher?
 29252 JR NC,29256   ; Jump if so
 29254 AND 240       ; If ANGELFACE or BOY WANDER were wiping the board, #REGa
                     ; would now hold the base animatory state of the boy
*29256 BIT 1,(HL)    ; Is the teacher's arm raised?
 29258 JR Z,29261    ; Jump if so
 29260 DEC E         ; The teacher was midstride, so move him forward to the
                     ; next blackboard column
*29261 JP 25008      ; Update the teacher's animatory state and location and
                     ; update the SRB
; The teacher has finished wiping the board.
*29264 CALL 28968    ; #REGa=identifier of the blackboard the teacher is next
                     ; to
 29267 LD L,A        ; {#REGhl=#R32748 (Reading Room blackboard), #R32750
 29268 LD H,127      ; (White Room blackboard), or #R32752 (Exam Room
                     ; blackboard)}
 29270 LD (HL),1     ; The first clean pixel column is now column no. 1
 29272 INC L         ; {Signal: no one has written on this blackboard
 29273 LD (HL),0     ; }
 29275 JP 25252      ; Terminate this interruptible subcommand

@rsub-begin
; Unused
s29278 DEFS 6
@rsub-end

; Make a character write on a blackboard
;
; The address of this interruptible subcommand routine is placed into bytes
; #b105 and #b106 of a character's buffer by the routines at #R32048, #R32158
; and #R62208.
;
; H Character number (#b163-#b167)
@label=WRITEBRD
c29284 CALL 28968    ; Collect the identifier of the nearest blackboard in
                     ; #REGa
 29287 LD C,A        ; {#REGbc=#R32749 (Reading Room blackboard), #R32751
 29288 LD B,127      ; (White Room blackboard), or #R32753 (Exam Room
 29290 INC C         ; blackboard)}
 29291 LD A,(BC)     ; #REGa=number of the character who last wrote on the
                     ; board
 29292 AND A         ; Is the board dirty?
 29293 JP NZ,25252   ; Terminate this interruptible subcommand if so
@rsub-begin
 29296 NOP           ;
 29297 NOP           ;
 29298 NOP           ;
@rsub-end
; The board is clean, so the character can go ahead and write on it.
 29299 LD A,H        ; {Store this character's number in the blackboard buffer,
 29300 LD (BC),A     ; indicating that he wrote on it}
 29301 LD L,110      ; {Zero out bytes #b109 and #b110 of the character's
 29303 LD (HL),0     ; buffer (which hold the submessage address)
 29305 DEC L         ;
 29306 LD (HL),0     ; }
 29308 ADD A,67      ; #REGa=#b234 (BOY WANDER) or #b230-#b233 (a teacher)
 29310 CP 234        ; Are we dealing with a teacher?
 29312 JR C,29316    ; Jump if so
 29314 LD A,229      ; #REGa=#b229 if we're dealing with BOY WANDER
*29316 DEC L         ; {#REGa holds the MSB of the blackboard message address;
 29317 LD (HL),A     ; store this in byte #b108 of the character's buffer}
 29318 DEC L         ; {Get a random multiple of 32 in #REGa; this will be the
 29319 CALL 24993    ; LSB of the blackboard message address, which is stored
 29322 AND 224       ; in byte #b107 of the character's buffer
 29324 LD (HL),A     ; }
 29325 LD L,105      ; {Replace the address of this routine in bytes #b105 and
@ssub=LD (HL),29329%256
 29327 LD (HL),145   ; #b106 of the character's buffer with that of the entry
                     ; point at #R29329 (below)
@rsub+begin
       INC L
       LD (HL),29329/256
@rsub+end
                     ; }
; This entry point is used on subsequent calls.
@label=WRITELTR
 29329 CALL 28994    ; Write a single letter on the blackboard
 29332 JR NZ,29351   ; Jump unless the character has finished writing
 29334 CALL 25108    ; Update the SRB for the character's current animatory
                     ; state
 29337 AND 248       ; #REGa=base animatory state of the teacher writing on the
                     ; board
 29339 BIT 6,A       ; Is it actually a teacher writing on the board?
 29341 JR NZ,29345   ; Jump if so
 29343 AND 240       ; #REGa=base animatory state of BOY WANDER
*29345 CALL 25008    ; Update the character's animatory state and update the
                     ; SRB
 29348 JP 25252      ; Terminate this interruptible subcommand
; The character hasn't finished writing on the board yet.
*29351 CALL 25108    ; Update the SRB for the character's current animatory
                     ; state
 29354 BIT 6,A       ; Set the zero flag if BOY WANDER is writing on the board
 29356 LD B,A        ; #REGb=character's current animatory state
 29357 JR NZ,29375   ; Jump if a teacher is writing on the board
; BOY WANDER is writing on the board. Determine his next animatory state:
; #AS60(#b60/#b188) or #AS61(#b61/#b189).
 29359 AND 127       ; Drop the direction bit (bit 7) for now
 29361 CP 60         ; #AS60=BOY WANDER writing (phase 1)
 29363 LD A,122      ; #REGa/2=#AS61=BOY WANDER writing (phase 2)
 29365 JR Z,29369    ; Jump if BOY WANDER is in writing phase 1
 29367 LD A,120      ; #REGa/2=#AS60=BOY WANDER writing (phase 1)
*29369 RL B          ; {Slide the direction bit into bit 7 of #REGa, which will
 29371 RRA           ; then hold BOY WANDER's next animatory state}
 29372 JP 25008      ; Update BOY WANDER's animatory state and update the SRB
; A teacher is writing on the board. Toggle the status of his arm (up/down).
*29375 AND 248       ; #REGa=base animatory state of the teacher
 29377 CP B          ; Is the teacher's arm raised?
 29378 JR NZ,29382   ; Jump if not
 29380 ADD A,5       ; #REGa=animatory state of the teacher with his arm raised
*29382 JP 25008      ; Update the teacher's animatory state and update the SRB

@rsub-begin
; Unused
s29385 DEFS 9
@rsub-end

; Update the SRB for the middle six columns of the speech bubble
;
; Used by the routines at #R29746 and #R62714. Returns with the carry flag set
; if the speech bubble is off-screen.
@label=SPEECHSRB
c29394 LD DE,(32612) ; Copy the speech bubble lip coordinates from #R32612 to
                     ; #REGde
 29398 LD A,E        ; {Now #REGe holds the x-coordinate of the left edge of
 29399 AND 248       ; the speech bubble
 29401 LD E,A        ; }
 29402 LD A,(32512)  ; #REGa=leftmost column of the skool on screen (0-64)
 29405 SUB E         ; Is the speech bubble at the far left of the screen?
 29406 JR Z,29418    ; Jump if so
 29408 CCF           ; {Return with the carry flag set if the speech bubble is
 29409 RET C         ; off-screen to the left}
 29410 CP 225        ; {Return with the carry flag set if the speech bubble is
 29412 RET C         ; off-screen to the right}
 29413 NEG           ; {#REGa=1, 2 or 3 (corresponding to the quadrant of the
 29415 RRCA          ; screen containing the speech bubble)
 29416 RRCA          ;
 29417 RRCA          ; }
*29418 LD E,A        ; #REGe=0-3 (quadrant of the screen containing the speech
                     ; bubble)
 29419 LD A,D        ; {Point #REGde at the byte of the screen refresh buffer
 29420 SUB 151       ; corresponding to the top row of the speech bubble
 29422 ADD A,A       ;
 29423 ADD A,A       ;
 29424 ADD A,E       ;
 29425 LD E,A        ;
 29426 LD D,127      ; }
 29428 LD A,(DE)     ; {Set bits 1-6 of this screen refresh buffer byte (so
 29429 OR 126        ; that the part of the screen hidden by the middle 6 UDGs
 29431 LD (DE),A     ; of the top row of the speech bubble will be refreshed)}
 29432 LD A,E        ; {Point #REGde at the byte of the screen refresh buffer
 29433 ADD A,4       ; corresponding to the bottom row of the speech bubble
 29435 LD E,A        ; }
 29436 LD A,(DE)     ; {Set bits 1-6 of this screen refresh buffer byte (so
 29437 OR 126        ; that the part of the screen hidden by the middle 6 UDGS
 29439 LD (DE),A     ; of the bottom row of the speech bubble will be
                     ; refreshed)}
 29440 RET           ; Return with the carry flag reset

@rsub-begin
; Unused
s29441 DEFB 0
@rsub-end

; Slide a message character into the speech bubble text window (2)
;
; Continues from the routine at #R29706. Returns with the carry flag set if the
; speech bubble is off-screen.
;
; A ASCII code of the character
@label=SLIDECHR2
c29442 LD E,A        ; #REGe=ASCII code of the character from the message being
                     ; spoken
 29443 LD A,(32612)  ; Copy the speech bubble lip x-coordinate from #R32612 to
                     ; #REGa
 29446 AND 120       ; {#REGa=x-coordinate of the right edge of the text window
 29448 ADD A,6       ; within the speech bubble}
 29450 LD HL,32512   ; #R32512 holds the leftmost column of the skool on screen
                     ; (0-64)
 29453 SUB (HL)      ; {Return with the carry flag set if the speech bubble is
 29454 RET C         ; off-screen to the left}
 29455 CP 32         ; {Return with the carry flag set if the speech bubble is
 29457 CCF           ; off-screen to the right
 29458 RET C         ; }
; The speech bubble is on screen.
 29459 LD C,A        ; #REGc=screen x-coordinate of the right edge of the text
                     ; window within the speech bubble (6, 14, 22 or 30)
@ssub=LD A,(32612+1)
 29460 LD A,(32613)  ; #REGa=y-coordinate of the speech bubble lip
 29463 SUB 154       ; {#REGd=screen y-coordinate of the top row of the speech
 29465 LD D,A        ; bubble (0-17)}
 29466 RRCA          ; {Set #REGhl to the display file address corresponding
 29467 RRCA          ; to the top right edge of the text window within the
 29468 RRCA          ; speech bubble
 29469 AND 224       ;
 29471 ADD A,C       ;
 29472 LD L,A        ;
 29473 LD A,D        ;
 29474 AND 24        ;
 29476 ADD A,68      ;
 29478 LD H,A        ; }
 29479 LD D,217      ; {#REGc=width (in pixels) of the message character bitmap
 29481 LD A,(DE)     ;
 29482 LD C,A        ; }
; Now we enter a loop to slide the pixel columns of the message character
; bitmap into the text window of the speech bubble.
*29483 INC D         ; {#REGa=next pixel column of the message character bitmap
 29484 LD A,(DE)     ; }
 29485 CALL 29491    ; Slide this into the speech bubble text window
 29488 DEC C         ; Next pixel column
 29489 JR NZ,29483   ; Jump back until all pixel columns are done
*29491 PUSH HL       ; Store the display file address temporarily
 29492 CALL 32216    ; Slide the top four pixel rows of the text window one
                     ; pixel to the left
 29495 LD B,A        ; Store the message character pixel column in #REGb
                     ; temporarily
 29496 LD A,L        ; {Set #REGhl to the display file address corresponding
 29497 ADD A,32      ; to the fifth pixel row down from the top right edge of
 29499 LD L,A        ; the text window within the speech bubble
 29500 JR C,29506    ;
 29502 LD A,H        ;
 29503 SUB 8         ;
 29505 LD H,A        ; }
*29506 LD A,B        ; Restore the message character pixel column to #REGa
 29507 CALL 32216    ; Slide the bottom four pixel rows of the text window one
                     ; pixel to the left
 29510 POP HL        ; Restore the display file address to #REGhl
 29511 XOR A         ; Reset the carry flag
 29512 RET           ;

@rsub-begin
; Unused
;
; Remnants of an old version of the routine at #R29442.
u29513 CALL 32216    ; Slide the bottom four pixel rows of the text window one
                     ; pixel to the left
 29516 POP HL        ; Restore the display file address to #REGhl
 29517 RET           ;
@rsub-end

; Print the speech bubble
;
; Used by the routine at #R31110. Returns with the carry flag set if the
; character about to speak is off-screen. Returns with the zero flag reset if
; somebody else is speaking at the moment.
;
; H Number of the character about to speak (#b152-#b169)
@label=SPKWAIT
c29518 LD A,(32512)  ; #REGa=leftmost column of the skool on screen (0-64)
 29521 LD B,A        ;
 29522 LD L,98       ; Byte #b98 of a character's buffer holds his x-coordinate
 29524 LD A,(HL)     ; Pick this up in #REGa
 29525 INC A         ; {Return with the carry flag set if the character is
 29526 LD E,A        ; off-screen to the left
 29527 SUB B         ;
 29528 RET C         ; }
 29529 CP 32         ; {Return with the carry flag set if the character is
 29531 CCF           ; off-screen to the right
 29532 RET C         ; }
 29533 LD C,A        ; #REGc=screen x-coordinate (0-31) of the spot above
                     ; the character's head (where the speech bubble lip will
                     ; be)
@ssub=LD A,(32612+1)
 29534 LD A,(32613)  ; #REGa=current speech bubble lip x-coordinate (if any)
 29537 AND A         ; Is somebody else speaking at the moment?
 29538 RET NZ        ; Return with the zero flag reset if so
; The character is on-screen and no one else is speaking at the moment.
 29539 LD L,96       ;
 29541 LD A,H        ; #REGa=character number (#b152-#b169)
 29542 INC L         ; #REGl=#b97
 29543 CP 167        ; Set the carry flag unless EINSTEIN is the speaker
 29545 SBC A,A       ; #REGa=#b0 if EINSTEIN is speaking, #b255 otherwise
 29546 ADD A,(HL)    ; {#REGd=y if EINSTEIN is speaking, y-1 otherwise (where y
 29547 LD D,A        ; is the speaker's y-coordinate)}
 29548 LD (32612),DE ; Store the speech bubble lip coordinates at #R32612
 29552 SUB 152       ; {Get the attribute file address of the speech bubble lip
 29554 RRCA          ; in #REGbc
 29555 RRCA          ;
 29556 RRCA          ;
 29557 LD B,A        ;
 29558 AND 224       ;
 29560 ADD A,C       ;
 29561 LD C,A        ;
 29562 LD A,B        ;
 29563 AND 3         ;
 29565 ADD A,88      ;
 29567 LD B,A        ; }
 29568 LD A,(DE)     ; #REGa=UDG reference of the character square under the
                     ; speech bubble lip
 29569 LD (32614),A  ; Store this in #R32614
 29572 LD A,239      ; #b239=UDG reference for the speech bubble lip
 29574 LD (DE),A     ; Replace the skool UDG with the speech bubble lip UDG
 29575 SET 7,E       ; {Pick up the skool attribute byte of the character
 29577 LD A,(DE)     ; square under the speech bubble lip and store it in
 29578 LD (32615),A  ; #R32615}
 29581 LD A,56       ; #b56=PAPER 7: INK 0
 29583 LD (DE),A     ; Replace the skool attribute byte
 29584 LD (BC),A     ; Set the new attribute on-screen
; The skool UDG reference and attribute byte for the location of the speech
; bubble lip have been adjusted. Now for the speech bubble itself.
 29585 LD A,E        ; {Get the x-coordinate of the left edge of the speech
 29586 AND 120       ; bubble in #REGe
 29588 LD E,A        ; }
 29589 DEC D         ; {The speech bubble is two character squares high
 29590 DEC D         ; }
 29591 PUSH HL       ;
@keep
 29592 LD HL,65472   ; {Set #REGhl to the attribute file address for the
 29595 ADD HL,BC     ; top-left corner of the speech bubble
 29596 LD A,L        ;
 29597 AND 248       ;
 29599 LD L,A        ; }
 29600 LD B,8        ; {Fill in the top row of 8 character squares with the
*29602 LD (HL),56    ; speech bubble attribute (#b56=PAPER 7: INK 0)
 29604 INC HL        ;
 29605 DJNZ 29602    ; }
 29607 LD C,24       ; {Set #REGhl to the attribute file address for the
 29609 ADD HL,BC     ; bottom-left corner of the speech bubble}
 29610 LD B,8        ; {Fill in the bottom row of 8 character squares with the
*29612 LD (HL),56    ; speech bubble attribute (#b56=PAPER 7: INK 0)
 29614 INC L         ;
 29615 DJNZ 29612    ; }
 29617 LD HL,32616   ; {Store the UDG references for the part of the skool that
 29620 EX DE,HL      ; will be overwritten by the top row of the speech bubble
 29621 LD A,L        ; at #R32616
 29622 LD C,8        ;
 29624 LDIR          ; }
 29626 LD L,A        ; {Replace the 8 UDG references for the part of the skool
 29627 LD BC,2288    ; that will be overwritten by the top row of the speech
*29630 LD (HL),C     ; bubble with the appropriate speech bubble UDG references
 29631 INC L         ; (#b240-#b247)
 29632 INC C         ;
 29633 DJNZ 29630    ; }
 29635 LD L,A        ; {Store the UDG references for the part of the skool that
 29636 INC H         ; will be overwritten by the bottom row of the speech
 29637 LD C,8        ; bubble at #R32624
 29639 LDIR          ; }
 29641 LD L,A        ; {Replace the 8 UDG references for the part of the skool
 29642 LD BC,2296    ; that will be overwritten by the bottom row of the speech
*29645 LD (HL),C     ; bubble with the appropriate speech bubble UDG references
 29646 INC L         ; (#b248-#b255)
 29647 INC C         ;
 29648 DJNZ 29645    ; }
 29650 ADD A,128     ; {Store the 8 attribute bytes for the part of the skool
 29652 LD L,A        ; that will be overwritten by the top row of the speech
 29653 LD C,8        ; bubble at #R32632
 29655 DEC H         ;
 29656 LDIR          ; }
 29658 LD L,A        ; {Replace the 8 attribute bytes for the part of the skool
 29659 LD BC,2104    ; that will be overwritten by the top row of the speech
*29662 LD (HL),C     ; bubble with the appropriate speech bubble attribute byte
 29663 INC L         ; (#REGc=#b56=PAPER 7: INK 0)
 29664 DJNZ 29662    ; }
 29666 LD L,A        ; {Store the 8 attribute bytes for the part of the skool
 29667 LD C,8        ; that will be overwritten by the bottom row of the speech
 29669 INC H         ; bubble at #R32640
 29670 LDIR          ; }
 29672 LD L,A        ; {Replace the 8 attribute bytes for the part of the skool
 29673 LD BC,2104    ; that will be overwritten by the bottom row of the speech
*29676 LD (HL),C     ; bubble with the appropriate speech bubble attribute byte
 29677 INC L         ; (#REGc=#b56=PAPER 7: INK 0)
 29678 DJNZ 29676    ; }
 29680 LD DE,(32612) ; Copy the speech bubble lip coordinates from #R32612 to
                     ; #REGde
 29684 CALL 28807    ; Update the SRB for the lip of speech bubble
 29687 CALL 62714    ; Open the lip of the speech bubble
 29690 CALL 29735    ; Update the SRB for the speech bubble
 29693 POP HL        ;
 29694 INC A         ; Set the zero flag
 29695 RET           ; Return with the zero flag set to indicate success

@rsub-begin
; Unused
;
; Code remnants, perhaps from an old version of the routine at #R29518.
@label=XSPKWAIT
u29696 LD B,6        ; The text window in the speech bubble is 6 character
                     ; squares wide
 29698 LD L,249      ; UDG #b249 corresponds to the second tile on the bottom
                     ; row of the speech bubble
*29700 LD (HL),0     ; {Blank out a pixel row in the bottom half of the text
 29702 INC L         ; window in the speech bubble UDGs
 29703 DJNZ 29700    ; }
 29705 INC H         ; Next pixel row down
@rsub-end

; Slide a message character into the speech bubble text window (1)
;
; Used by the routine at #R31130.
;
; H Number of the character who is speaking (#b152-#b169)
@label=SLIDECHR1
c29706 CALL 28882    ; Get the next character from the message being spoken
 29709 AND A         ; {Return with the carry flag set if the message has
 29710 SCF           ; finished
 29711 RET Z         ; }
 29712 CP 2          ; {Replace an ASCII code of #b2 with #b32 (space)
 29714 JR Z,29727    ; }
 29716 CP 3          ; {Jump unless the ASCII code is #b3, which stands for 8
 29718 JR NZ,29729   ; spaces}
 29720 LD L,108      ; {#R55830='<8 spaces>'; place the address of this message
@ssub=LD (HL),55830/256
 29722 LD (HL),218   ; into bytes #b107 and #b108 of the speaking character's
 29724 DEC L         ; buffer
@ssub=LD (HL),55830%256
 29725 LD (HL),22    ; }
*29727 LD A,32       ; #b32=' ' (space)
*29729 JP 29442      ;

@rsub-begin
; Unused
u29732 RET
 29733 DEFS 2
@rsub-end

; Update the SRB for the speech bubble
;
; Used by the routines at #R29518 (when printing the speech bubble) and #R29746
; (when removing the speech bubble). Sets the bits in the #R32524(screen
; refresh buffer) (SRB) that correspond to the speech bubble, so that they are
; refreshed when the display is updated.
;
; DE SRB byte address
@label=BUBBLESRB
c29735 LD A,255      ; {Set all bits in this SRB byte, indicating that 8
 29737 LD (DE),A     ; squares in a row (the bottom half of the bubble) need
                     ; refreshing}
 29738 LD A,E        ; {Point #REGde at the SRB byte corresponding to the next
 29739 SUB 4         ; row up
 29741 LD E,A        ; }
 29742 LD A,255      ; {Set all bits in this SRB byte, indicating that 8
 29744 LD (DE),A     ; squares in a row (the top half of the bubble) need
                     ; refreshing}
 29745 RET           ;

; Remove the speech bubble
;
; Used by the routines at #R31130 and #R32470.
;
; H Number of the character who is speaking (#b152-#b169)
@label=RMBUBBLE
c29746 PUSH HL       ; Save the character number
 29747 CALL 29394    ; Is the speech bubble off-screen?
 29750 JR C,29815    ; Jump if so
 29752 CALL 29735    ; Update the SRB for the part of the screen hidden by the
                     ; speech bubble
; First, restore the original attribute bytes for the area of the screen
; occupied by the speech bubble.
 29755 LD DE,(32612) ; Copy the speech bubble lip coordinates from #R32612 to
                     ; #REGde
 29759 CALL 28807    ; Update the SRB for the part of the screen hidden by the
                     ; lip
 29762 LD HL,32512   ; #R32512 holds the leftmost column of the skool on screen
                     ; (0-64)
 29765 LD A,E        ; {#REGe=screen x-coordinate of the speech bubble lip
 29766 SUB (HL)      ; (0-31)
 29767 LD E,A        ; }
 29768 LD A,D        ; {#REGa=screen y-coordinate of the speech bubble lip
 29769 SUB 152       ; (2-17)}
 29771 RRCA          ; {Set #REGde to the attribute file address corresponding
 29772 RRCA          ; to the lip of the speech bubble
 29773 RRCA          ;
 29774 LD D,A        ;
 29775 AND 224       ;
 29777 ADD A,E       ;
 29778 LD E,A        ;
 29779 LD A,D        ;
 29780 AND 3         ;
 29782 ADD A,88      ;
 29784 LD D,A        ; }
 29785 LD L,103      ; {Pick up the attribute byte for the part of screen
 29787 LD A,(HL)     ; hidden by the speech bubble lip from #R32615 and restore
 29788 LD (DE),A     ; it to the attribute file}
 29789 EX DE,HL      ; {Point #REGde at the attribute file address
@keep
 29790 LD BC,65472   ; corresponding to the top left corner of the speech
 29793 ADD HL,BC     ; bubble
 29794 LD A,L        ;
 29795 AND 248       ;
 29797 LD L,A        ;
 29798 EX DE,HL      ; }
 29799 LD BC,8       ; {Restore the attribute bytes of the part of the screen
 29802 LD L,120      ; overwritten by the top row of the speech bubble (stored
 29804 LDIR          ; at #R32632 by the routine at #R29518)}
 29806 LD C,24       ; {Point #REGde at the attribute file address
 29808 EX DE,HL      ; corresponding to the bottom left corner of the speech
 29809 ADD HL,BC     ; bubble
 29810 EX DE,HL      ; }
 29811 LD C,8        ; {Restore the attribute bytes of the part of the screen
 29813 LDIR          ; overwritten by the bottom row of the speech bubble
                     ; (stored at #R32640 by the routine at #R29518)}
; Next, restore the skool UDG references and attribute bytes for the area of
; the skool occupied by the speech bubble.
*29815 LD DE,(32612) ; Copy the speech bubble lip coordinates from #R32612 to
                     ; #REGde
 29819 LD HL,32614   ; {Pick up the UDG reference for the part of the skool
 29822 LD A,(HL)     ; occupied by the speech bubble lip and restore it
 29823 INC L         ;
 29824 LD (DE),A     ; }
 29825 SET 7,E       ; {Pick up the attribute byte for the part of the skool
 29827 LD A,(HL)     ; occupied by the speech bubble lip and restore it
 29828 INC L         ;
 29829 LD (DE),A     ; }
 29830 LD A,E        ; {#REGde=coordinates of the top left corner of the speech
 29831 AND 120       ; bubble
 29833 DEC D         ;
 29834 DEC D         ;
 29835 LD E,A        ; }
 29836 LD BC,8       ; {Restore the UDG references of the part of the skool
 29839 LDIR          ; overwritten by the top row of the speech bubble (stored
                     ; at #R32616 by the routine at #R29518)}
 29841 INC D         ; {Restore the UDG references of the part of the skool
 29842 LD C,8        ; overwritten by the bottom row of the speech bubble
 29844 LD E,A        ; (stored at #R32624 by the routine at #R29518)
 29845 LDIR          ; }
 29847 ADD A,128     ; {Point #REGde at the skool graphic data attribute byte
 29849 LD E,A        ; corresponding to the top-left corner of the speech
 29850 DEC D         ; bubble}
 29851 LD C,8        ; {Restore the attribute bytes of the part of the skool
 29853 LDIR          ; overwritten by the top row of the speech bubble (stored
                     ; at #R32632 by the routine at #R29518)}
 29855 INC D         ; {Restore the attribute bytes of the part of the skool
 29856 LD C,8        ; overwritten by the bottom row of the speech bubble
 29858 LD E,A        ; (stored at #R32640 by the routine at #R29518)
 29859 LDIR          ; }
; Finally, clear the speech bubble lip coordinates (at #R32612) to indicate
; that no one is speaking.
 29861 LD (32612),BC ; Set the speech bubble lip coordinates at to (0,0)
 29865 POP HL        ; Restore the speaker's character number to #REGh
 29866 XOR A         ;
 29867 RET           ;

@rsub-begin
; Unused
u29868 DEFB 120,120,120
@rsub-end

; Save the area of the screen that will be overwritten by a lines bubble
;
; Used by the routines at #R30464 and #R63829. Returns with the carry flag set
; if the teacher whose coordinates are in #REGde is off-screen. Otherwise
; calculates the position of the lines bubble and copies the area of the screen
; that would be overwritten by the bubble to the buffer at #R59904, and returns
; with #REGde holding the attribute file address for the top-left corner of the
; lines bubble.
;
; DE Teacher's coordinates
@label=SCR2BUF
c29871 LD A,(32512)  ; #REGa=leftmost column of the skool on screen (0-64)
 29874 LD B,A        ; Copy this to #REGb
 29875 LD A,E        ; #REGa=teacher's x-coordinate
 29876 AND 248       ;
 29878 SUB B         ; Is the teacher off-screen to the left?
 29879 RET C         ; Return with the carry flag set if so
 29880 CP 32         ; Is the teacher off-screen to the right?
 29882 CCF           ;
 29883 RET C         ; Return with the carry flag set if so
; The teacher is on screen. First, save the attribute bytes of the area of the
; screen that will be overwritten by the lines bubble.
 29884 LD E,A        ; #REGe=teacher's screen x-coordinate (0-31)
 29885 LD A,D        ; #REGa=teacher's y-coordinate (152-169)
 29886 SUB 155       ; {#REGa=teacher's screen y-coordinate (0-14)
 29888 JR NC,29891   ;
 29890 XOR A         ; }
*29891 RRCA          ; {Set #REGde to the attribute file address of the top
 29892 RRCA          ; left corner of the lines bubble
 29893 RRCA          ;
 29894 LD D,A        ;
 29895 AND 224       ;
 29897 ADD A,E       ;
 29898 LD E,A        ;
 29899 LD A,D        ;
 29900 AND 3         ;
 29902 ADD A,88      ;
 29904 LD D,A        ; }
 29905 PUSH HL       ;
 29906 PUSH DE       ;
 29907 LD HL,59904   ; The buffer at #R59904 will store the area of the screen
                     ; overwritten by the lines bubble
 29910 EX DE,HL      ; #REGde=#R59904, #REGhl=attribute file address
 29911 LD BC,8       ; {Copy the 24 attribute bytes that will be overwritten by
 29914 LDIR          ; the lines bubble from the screen to #R59904
 29916 LD C,24       ;
 29918 ADD HL,BC     ;
 29919 LD C,8        ;
 29921 LDIR          ;
 29923 LD C,24       ;
 29925 ADD HL,BC     ;
 29926 LD C,8        ;
 29928 LDIR          ; }
; Next, save the display file bytes of the area of the screen that will be
; overwritten by the lines bubble.
 29930 POP HL        ; {Restore the attribute file address of the top-left
 29931 PUSH HL       ; corner of the lines bubble to #REGhl}
 29932 LD A,H        ; {Get the display file address of the top-left corner of
 29933 SUB 80        ; the lines bubble in #REGhl
 29935 ADD A,A       ;
 29936 ADD A,A       ;
 29937 ADD A,A       ;
 29938 LD H,A        ; }
 29939 LD BC,3       ; A lines bubble has 3 rows...
*29942 LD A,8        ; {...and 8 columns; copy the 192 display file bytes that
 29944 PUSH BC       ; will be overwritten by the lines bubble from the screen
*29945 PUSH HL       ; to #R59928
 29946 LD C,8        ;
 29948 LDIR          ;
 29950 POP HL        ;
 29951 INC H         ;
 29952 DEC A         ;
 29953 JR NZ,29945   ;
 29955 LD A,L        ;
 29956 ADD A,32      ;
 29958 LD L,A        ;
 29959 JR C,29965    ;
 29961 LD A,H        ;
 29962 SUB 8         ;
 29964 LD H,A        ;
*29965 POP BC        ;
 29966 DEC C         ;
 29967 JR NZ,29942   ; }
 29969 POP DE        ; Restore the attribute file address of the top-left
                     ; corner of the lines bubble to #REGde
 29970 POP HL        ;
 29971 RET           ; Return with the carry flag reset

@rsub-begin
; Unused
s29972 DEFS 5
@rsub-end

; Copy a graphic buffer to the screen
;
; Used by the routines at #R27406 (to print the Skool Daze logo and the score
; box), #R30464 (to print a lines bubble), #R31040 (to print the lesson box)
; and #R63829 (to print a safe combination letter in a bubble).
;
; DE Attribute file address
; HL Graphic buffer address
@label=BUF2SCR
c29977 PUSH DE       ; Save the attribute file address
 29978 LD BC,8       ; {Copy the first row of attribute bytes from the graphic
 29981 LDIR          ; buffer to the screen}
 29983 LD C,24       ; {Copy the second row of attribute bytes from the graphic
 29985 EX DE,HL      ; buffer to the screen
 29986 ADD HL,BC     ;
 29987 EX DE,HL      ;
 29988 LD C,8        ;
 29990 LDIR          ; }
 29992 LD C,24       ; {Copy the third row of attribute bytes from the graphic
 29994 EX DE,HL      ; buffer to the screen
 29995 ADD HL,BC     ;
 29996 EX DE,HL      ;
 29997 LD C,8        ;
 29999 LDIR          ; }
; The attribute bytes have been copied to the screen. Now for the graphic
; bytes. This entry point is used by the routine at #R30156.
*30001 POP DE        ; Restore the attribute file address to #REGde
 30002 LD A,D        ; {Set #REGde to the corresponding display file address
 30003 SUB 80        ;
 30005 ADD A,A       ;
 30006 ADD A,A       ;
 30007 ADD A,A       ;
 30008 LD D,A        ; }
 30009 LD C,3        ; There are three rows of UDGs to copy to the screen
*30011 LD A,8        ; There are 8 pixel lines per row of UDGs
 30013 PUSH BC       ; Save #REGc (the row counter)
*30014 PUSH DE       ; {Copy a row of 8 UDGs from the graphic buffer to the
 30015 LD C,8        ; screen
 30017 LDIR          ;
 30019 POP DE        ;
 30020 INC D         ;
 30021 DEC A         ;
 30022 JR NZ,30014   ; }
 30024 LD A,E        ; {Set #REGde to the display file address for the next row
 30025 ADD A,32      ;
 30027 LD E,A        ;
 30028 JR C,30034    ;
 30030 LD A,D        ;
 30031 SUB 8         ;
 30033 LD D,A        ; }
*30034 POP BC        ; Restore the row counter to #REGc
 30035 DEC C         ; Next row
 30036 JR NZ,30011   ; Jump back until all three rows of UDGs have been copied
 30038 RET           ;

@rsub-begin
; Unused
s30039 DEFS 3
@rsub-end

; Write a line of text into a graphic buffer
;
; Used by the routines at #R30156, #R30208, #R31040 and #R63909. Writes a line
; of text into a graphic buffer (at #R60160, #R60416 or #R60672) and centres
; it.
;
; DE Buffer address
; HL Message address
@label=TXT2BUF
c30042 XOR A         ; {Clear the buffer ready for writing
 30043 LD B,64       ;
*30045 LD (DE),A     ;
 30046 INC DE        ;
 30047 DJNZ 30045    ; }
 30049 DEC DE        ; Point #REGde at the last byte of the buffer
 30050 LD C,62       ; There are 62 pixel columns available for writing in
*30052 LD A,(HL)     ; Pick up a character from the message in #REGa
 30053 INC HL        ; Move to the next character in the message
 30054 AND A         ; Have we reached the end of the message?
 30055 JR Z,30079    ; Jump if so
 30057 PUSH HL       ; Save the message pointer
 30058 LD L,A        ; {Point #REGhl at the pixel width of the bitmap for the
 30059 LD H,217      ; character in #REGa}
 30061 LD A,(HL)     ; Pick up the width in #REGa
 30062 LD B,A        ; Transfer the width to #REGb
*30063 INC H         ; Point #REGhl at the next font character bitmap byte
 30064 LD A,(HL)     ; Pick this up in #REGa
 30065 CALL 30097    ; Insert the font character bitmap byte into the buffer
 30068 DEC C         ; Decrease the pixel column count
 30069 DJNZ 30063    ; Jump back until all pixel columns for this letter are
                     ; done
 30071 XOR A         ; #REGa=0 (empty vertical pixel column, i.e. space)
 30072 DEC C         ; Decrease the pixel column count
 30073 CALL 30097    ; Insert the space into the buffer
 30076 POP HL        ; Restore the message pointer to #REGhl
 30077 JR 30052      ; Jump back to write the next letter from the message
; We've finished writing the message. Now centre it.
*30079 BIT 7,C       ; Did we use more than 62 pixel columns?
 30081 RET NZ        ; Return if so
 30082 RR C          ; {#REGc holds the number of unused pixel columns; halve
 30084 INC C         ; this and add one to get the padding}
*30085 XOR A         ; {Insert an empty pixel column (space)
 30086 CALL 30097    ; }
 30089 DEC C         ; Next column of padding
 30090 JR NZ,30085   ; Jump back until the text has been centred
 30092 RET           ;

@rsub-begin
; Unused
s30093 DEFS 4
@rsub-end

; Insert a pixel column into a graphic buffer
;
; Used by the routine at #R30042. Slides the current contents of a row of the
; graphic buffer (at #R60160, #R60416 or #R60672) one pixel to the left, and
; places the new pixel column into the slot freed up on the right.
;
; A Pixel column byte
; DE Graphic buffer address
@label=PCOL2BUF
c30097 PUSH DE       ;
 30098 EXX           ;
 30099 POP HL        ; #REGhl'=graphic buffer address
 30100 LD C,8        ; There are 8 pixels to insert into the column
*30102 LD B,8        ; There are 8 bytes per row in the buffer
 30104 RRCA          ; Push a pixel into the carry flag
*30105 RL (HL)       ; {Drag the pixel from the carry flag into the buffer, and
 30107 DEC HL        ; slide all the other pixels in the row one to the left
 30108 DJNZ 30105    ; }
 30110 DEC C         ; Next pixel
 30111 JR NZ,30102   ; Jump back until all 8 pixels have been inserted
 30113 EXX           ;
 30114 RET           ;

; Lines bubble edge graphics
;
; Used by the routine at #R30132. The graphic bytes are arranged in eight
; pairs. The first byte (after 1 is added to the value) of each pair
; corresponds to the left edge of the lines bubble, and the second byte
; corresponds to the right edge.
; .
; #UDGTABLE
; { #UDG30115,23,,2,1(lines_bubble_left_edge) | Left edge }
; { #UDG30116,23,,2(lines_bubble_right_edge)  | Right edge }
; TABLE#
@label=BUBEDGES
b30115 DEFB 127,1
 30117 DEFB 191,3
 30119 DEFB 223,7
 30121 DEFB 239,15
 30123 DEFB 239,15
 30125 DEFB 223,7
 30127 DEFB 191,3
 30129 DEFB 127,1
 30131 DEFB 255    ; End marker

; Draw the left and right edges of a lines bubble
;
; Used by routines at #R30156 and #R30208. Draws the left and right edges of
; the lines bubble against the lines of text just written into the graphic
; buffer (at #R60160 or #R60416).
;
; DE Graphic buffer address
@label=DRAWEDGES
@keep
c30132 LD HL,65473   ; {Point #REGhl at the top left corner of the text that
 30135 ADD HL,DE     ; was just written into the graphic buffer}
 30136 LD DE,7       ; This is the 'distance' (in bytes) between the left and
                     ; right edges of the graphic buffer
 30139 LD BC,30115   ; Point #REGbc at the graphic data table at #R30115
*30142 LD A,(BC)     ; Pick up a bubble left-edge graphic byte in #REGa
@rsub=INC BC
 30143 INC C         ; Move #REGbc along in the graphic data table
 30144 INC A         ; Have we finished drawing the edges?
 30145 RET Z         ; Return if so
 30146 OR (HL)       ; {Superimpose the bubble left-edge graphic byte
 30147 LD (HL),A     ; }
 30148 ADD HL,DE     ; Move over to the right edge
 30149 LD A,(BC)     ; Pick up a bubble right-edge graphic byte in #REGa
@rsub=INC BC
 30150 INC C         ; Move #REGbc along in the graphic data table
 30151 OR (HL)       ; {Superimpose the bubble right-edge graphic byte
 30152 LD (HL),A     ; }
 30153 INC HL        ; Move back to the left edge, one pixel row down
 30154 JR 30142      ; Jump back to superimpose another edge graphic byte

; Print a reprimand message
;
; Used by the routine at #R30464. Generates the graphic data for the text of a
; reprimand message (e.g. 'NOW FIND A SEAT') in the buffer at #R60416, and then
; copies the buffer to the screen.
;
; A Reprimand message identifier (#b0-#b15)
; DE Attribute file address
@label=LINESMSG
c30156 PUSH DE       ; Save the attribute file address
 30157 RRCA          ; {Point #REGhl at the appropriate message
 30158 RRCA          ;
 30159 LD H,A        ;
 30160 AND 192       ;
 30162 SCF           ;
 30163 RRA           ;
 30164 LD L,A        ;
 30165 LD A,H        ;
 30166 AND 3         ;
@ssub=ADD A,56192/256
 30168 ADD A,219     ;
 30170 LD H,A        ; }
; Now #REGhl points at the appropriate message.
; .
; #TABLE(default,centre)
; { =h #REGa | =h #REGhl | =h Message }
; { #b0      | #R56192   | DON'T SIT ON THE STAIRS }
; { #b1      | #R56224   | THE ROOM IS PRIVATE }
; { #b2      | #R56256   | GET TO WHERE YOU SHOULD BE }
; { #b3      | #R56288   | NOW FIND A SEAT }
; { #b4      | #R56448   | GET OFF THE FLOOR }
; { #b5      | #R56480   | COME ALONG WITH ME BOY }
; { #b6      | #R56512   | HURRY UP YOU HORROR }
; { #b7      | #R56544   | DON'T TRY MY PATIENCE BOY }
; { #b8      | #R56704   | NOW DON'T DO IT AGAIN }
; { #b9      | #R56736   | DON'T TELL TALES }
; { #b10     | #R56768   | NEVER BE LATE AGAIN }
; { #b11     | #R56800   | AND STAY THIS TIME }
; { #b12     | #R56960   | DON'T TOUCH BLACKBOARDS }
; { #b13     | #R56992   | CATAPULTS ARE FORBIDDEN }
; { #b14     | #R57024   | DON'T HIT YOUR MATES }
; { #b15     | #R57056   | YOU ARE NOT A KANGAROO }
; TABLE#
 30171 PUSH HL       ; Save the message address
 30172 LD DE,60464   ; #R60464=appropriate lines bubble graphic buffer address
                     ; for the first line of the message
 30175 CALL 30042    ; Write the first line of the message
 30178 CALL 30132    ; Draw the left and right edges of the bubble
 30181 POP HL        ; Restore the message address to #REGhl
 30182 LD A,L        ; {Point #REGhl at the second half of the message
 30183 ADD A,16      ;
 30185 LD L,A        ; }
 30186 LD DE,60528   ; #R60528=appropriate lines bubble graphic buffer address
                     ; for the second line of the message
 30189 CALL 30042    ; Write the second line of the message
 30192 CALL 30132    ; Draw the left and right edges of the bubble
 30195 LD B,0        ; Prepare #REGb for the routine at #R30001
 30197 LD HL,60440   ; #R60440=first byte of the graphic data in the lines
                     ; bubble graphic buffer
 30200 JP 30001      ; Transfer the lines bubble graphic data to the screen
                     ; (the lines bubble attribute bytes are already on-screen)

@rsub-begin
; Unused
s30203 DEFS 5
@rsub-end

; Write a character's name into the lines bubble graphic buffer
;
; Used by the routine at #R30464. Generates the graphic data for the text of
; the lines recipient's name (e.g. 'ERIC') and stores it in the buffer at
; #R60160.
;
; A Lines recipient's character number (#b167-#b169, #b172)
@label=NAME2BUF
c30208 LD BC,6167    ; #REGb=#b24; #REGc=#b23 (INK 7: PAPER 2)
 30211 LD HL,60160   ; The lines bubble graphic is stored at #R60160
 30214 LD DE,55680   ; #R55680: 'ERIC'
 30217 CP 172        ; Is ERIC being given lines?
 30219 JR Z,30238    ; Jump if so
 30221 LD C,31       ; #b31=INK 7: PAPER 3
@ssub=LD E,55694%256
@rsub=LD DE,55694
 30223 LD E,142      ; #REGde=#R55694: 'BOY WANDER'
 30225 SUB 167       ; Is BOY WANDER being given lines?
 30227 JR Z,30238    ; Jump if so
 30229 LD C,39       ; #b39=INK 7: PAPER 4
@ssub=LD E,55708%256
@rsub=LD DE,55708
 30231 LD E,156      ; #REGde=#R55708: 'ANGELFACE'
 30233 DEC A         ; Is ANGELFACE being given lines?
 30234 JR Z,30238    ; Jump if so
@ssub=LD E,55722%256
@rsub=LD DE,55722
 30236 LD E,170      ; #REGde=#R55722: 'EINSTEIN'
*30238 LD (HL),C     ; {Fill in the appropriate attribute bytes for the lines
 30239 INC L         ; bubble
 30240 DJNZ 30238    ; }
 30242 LD L,120      ; #REGhl=#R60280
 30244 EX DE,HL      ; #REGde=#R60280, #REGhl=address of character name
; This entry point is used by the routine at #R63829.
*30245 CALL 30042    ; Write the message into the graphic buffer
 30248 JP 30132      ; Draw the left and right edges of the bubble

@rsub-begin
; Unused
s30251 DEFS 7
@rsub-end

; Insert a pixel column into the number graphic buffer
;
; Used by the routine at #R30278. Slides the current contents of the number
; graphic buffer (at #R55563) one pixel to the left, and places the new pixel
; column into the slot freed up on the right.
;
; A Pixel column byte
@label=PCOL2NBUF
@ssub=LD HL,55552+31
c30258 LD HL,55583   ; Point #REGhl at the end of the buffer at #R55563
 30261 RRCA          ; Discard the baseline bit
 30262 LD C,7        ; We will consider the remaining 7 bits
*30264 LD B,3        ; The buffer is 3 character squares wide
 30266 RRCA          ; Drop a bit into the carry flag
*30267 RL (HL)       ; {Pick it up in the buffer and shift the other pixels in
 30269 DEC HL        ; this row one to the left
 30270 DJNZ 30267    ; }
 30272 DEC C         ; Next bit
 30273 JR NZ,30264   ; Jump back until all 7 bits in the column are done
 30275 RET           ;

@rsub-begin
; Unused
s30276 DEFS 2
@rsub-end

; Generate graphic data for a number
;
; Used by the routines at #R30408 and #R30432. Generates a 7x24-bit graphic for
; the digits of the number in #REGde, and stores it in the buffer at #R55563.
;
; DE Number
@label=NUMGRAPH
c30278 PUSH HL       ;
@ssub=LD HL,55552+31
 30279 LD HL,55583   ; {Blank out the 32-byte buffer at #R55552
 30282 XOR A         ;
 30283 LD B,31       ;
*30285 LD (HL),A     ;
 30286 DEC L         ;
 30287 DJNZ 30285    ; }
 30289 LD A,48       ; #b48 is the ASCII code for '0' (zero)
@keep
 30291 LD BC,55536   ; #REGbc=-10000
 30294 EX DE,HL      ; #REGhl=the number, #REGde=#R55552
 30295 ADD HL,BC     ; Subtract 10000
 30296 JR C,30325    ; Jump if the number is > 10000
 30298 SBC HL,BC     ; Add the 10000 back on
@keep
 30300 LD BC,64536   ; #REGbc=-1000
 30303 ADD HL,BC     ; Subtract 1000
 30304 JR C,30338    ; Jump if the number is > 1000
 30306 SBC HL,BC     ; Add the 1000 back on
@keep
 30308 LD BC,65436   ; #REGbc=-100
 30311 ADD HL,BC     ; Subtract 100
 30312 JR C,30351    ; Jump if the number is > 100
 30314 SBC HL,BC     ; Add the 100 back on
 30316 LD C,246      ; #REGbc=-10
 30318 ADD HL,BC     ; Subtract 10
 30319 JR C,30363    ; Jump if the number is > 10
 30321 SBC HL,BC     ; Add the 10 back on
 30323 JR 30371      ;
; We get here if the number is >= 10000.
*30325 INC A         ; {Perform trial subtractions of 10000 and get the ASCII
 30326 ADD HL,BC     ; code for the 10000s digit in #REGa
 30327 JR C,30325    ; }
 30329 SBC HL,BC     ; Undo the last trial subtraction
@keep
 30331 LD BC,64536   ; #REGbc=-1000
 30334 LD (DE),A     ; Store the ASCII code for the 10000s digit
 30335 LD A,47       ;
 30337 INC E         ; Move along in the buffer
*30338 INC A         ; {Perform trial subtractions of 1000 and get the ASCII
 30339 ADD HL,BC     ; code for the 1000s digit in #REGa
 30340 JR C,30338    ; }
 30342 SBC HL,BC     ; Undo the last trial subtraction
@keep
 30344 LD BC,65436   ; #REGbc=-100
 30347 LD (DE),A     ; Store the ASCII code for the 1000s digit
 30348 LD A,47       ;
 30350 INC E         ; Move along in the buffer
*30351 INC A         ; {Perform trial subtractions of 100 and get the ASCII
 30352 ADD HL,BC     ; code for the 100s digit in #REGa
 30353 JR C,30351    ; }
 30355 SBC HL,BC     ; Undo the last trial subtraction
 30357 LD (DE),A     ; Store the ASCII code for the 100s digit
 30358 INC E         ; Move along in the buffer
 30359 LD C,246      ; #REGbc=-10
 30361 LD A,47       ;
*30363 INC A         ; {Perform trial subtractions of 10 and get the ASCII code
 30364 ADD HL,BC     ; for the 10s digit in #REGa
 30365 JR C,30363    ; }
 30367 SBC HL,BC     ; Undo the last trial subtraction
 30369 LD (DE),A     ; Store the ASCII code for the 10s digit
 30370 INC E         ; Move along in the buffer
*30371 LD A,L        ; {Get the ASCII code for the units digit in #REGa
 30372 ADD A,48      ; }
 30374 LD (DE),A     ; Store the ASCII code for the units digit
 30375 XOR A         ;
 30376 INC E         ; Move along in the buffer
 30377 LD (DE),A     ; Mark the end of the number string with a 0 byte
; Now that the ASCII codes for the digits of the number have been calculated
; and stored at #R55552, generate the corresponding graphic data.
 30378 LD E,0        ; #REGde=#R55552 (first character in the number string)
*30380 LD A,(DE)     ; Pick up a character from the number string
 30381 AND A         ; Have we reached the end of the string?
 30382 JR NZ,30386   ; Jump if not
 30384 POP HL        ;
 30385 RET           ;
*30386 INC E         ; Move to the next character in the number string
 30387 EXX           ;
 30388 LD L,A        ; #REGl'=ASCII code for a digit of the number (#b48-#b57)
 30389 LD H,217      ; Point #REGhl' at the start of the font data for this
                     ; digit
 30391 LD B,(HL)     ; Pick up the pixel width in #REGb'
 30392 INC B         ; Add 1 for left padding
 30393 XOR A         ; An empty byte for left padding
*30394 INC H         ; Point #REGhl' at the next bitmap byte
 30395 EXX           ;
 30396 CALL 30258    ; Slide the bitmap byte into the buffer
 30399 EXX           ;
 30400 LD A,(HL)     ; Pick up the next bitmap byte
 30401 DJNZ 30394    ; Jump back until all bitmap bytes are done
 30403 EXX           ;
 30404 JR 30380      ; Jump back to collect the next digit

@rsub-begin
; Unused
s30406 DEFS 2
@rsub-end

; Print the score, lines total or hi-score (1)
;
; Used by the routines at #R27387, #R27406, #R30464, #R62705 and #R63456.
; Prepares the buffer at #R55563 with the graphic data for the digits of the
; number in #REGhl, then copies the graphic data to the screen at the location
; specified by #REGde.
;
; DE Display file address: #w20924 (score), #w20956 (lines) or #w20988
; .  (hi-score)
; HL Score, lines total or hi-score
@label=PRINTNUM
c30408 EX DE,HL      ; Transfer the score, lines total or hi-score to #REGde
 30409 CALL 30278    ; Generate a 7x24-bit graphic for the number stored in
                     ; #REGde
 30412 EX DE,HL      ; Transfer the display file address back to #REGde
@ssub=LD HL,55552+11
@nowarn
 30413 LD HL,55563   ; The graphic data for the number is stored in the buffer
                     ; at #R55563
 30416 LD BC,2047    ; #REGb=#b7 (number of pixel rows), #REGc=#b255
*30419 PUSH DE       ; Save the display file address temporarily
 30420 LDI           ; {Transfer a 24-bit wide row of pixels to the screen
 30422 LDI           ;
 30424 LDI           ; }
 30426 POP DE        ; Restore the display file address to #REGde
 30427 INC D         ; Next pixel row on the screen
 30428 DJNZ 30419    ; Jump back until all 7 pixel rows are done
 30430 JR 30457      ; Jump over the routine at #R30432

; Write the number of lines into the lines bubble graphic buffer
;
; Used by the routine at #R30464. Writes the number of lines being given by a
; teacher into the lines bubble graphic buffer at #R60160.
;
; DE Number of lines
@label=NUM2BUF
c30432 CALL 30278    ; Generate the graphic data for the number of lines
@ssub=LD HL,55563+1
 30435 LD HL,55564   ; Point #REGhl at the buffer containing the graphic data
                     ; for the number (at #R55563)
@ssub=LD DE,60160+57
 30438 LD DE,60217   ; Point #REGde at the appropriate spot in the lines bubble
                     ; graphic buffer (at #R60160) for writing the number of
                     ; lines
 30441 LD BC,2047    ; #REGb=#b7, #REGc=#b255
*30444 LDI           ; {Copy the graphic data (a 7x16 block of pixels) for the
 30446 LDI           ; number of lines into the lines bubble graphic buffer
 30448 INC HL        ;
 30449 INC DE        ;
 30450 LD A,E        ;
 30451 ADD A,5       ;
 30453 LD E,A        ;
 30454 DJNZ 30444    ; }
 30456 RET           ;

; Print the score, lines total or hi-score (2)
;
; Continues from #R30408. Checks whether ERIC is over the lines limit (if the
; number of lines was just printed).
;
; DE Display file address: #w20924 (score), #w20956 (lines) or #w20988
; .  (hi-score)
@label=PRINTNUM2
c30457 LD A,E        ; Copy the LSB of the display file address to #REGa
 30458 CP 220        ; Was it the lines total that was just printed?
 30460 RET NZ        ; Return if not
 30461 JP 63931      ; Otherwise check whether ERIC is over the lines limit

; Make a teacher give lines
;
; Used by the routines at #R30636, #R30890, #R31904 and #R62495. Prints the
; lines message (e.g. '100 LINES ERIC') in a bubble above the teacher's head,
; and shortly afterwards prints the reprimand message (e.g. 'NOW FIND A SEAT')
; in the same bubble.
;
; A Lines recipient's character number (#b167-#b169, #b172)
; B Reprimand message identifier (#b0-#b15)
; DE Teacher's coordinates
@label=GIVELINES
c30464 PUSH BC       ;
 30465 PUSH AF       ;
 30466 CALL 29871    ; Is the lines-giving teacher fully on-screen?
 30469 JR NC,30474   ; Jump if so
 30471 POP AF        ;
 30472 POP BC        ;
 30473 RET           ; Otherwise return without having given lines
; The teacher is on-screen, so it's time to prepare the lines bubble for
; display. First, write the lines recipient's name into the lines bubble
; graphic buffer.
*30474 POP AF        ;
 30475 PUSH DE       ; Save the attribute file address of the lines bubble
 30476 PUSH AF       ; Save the character number of the lines recipient
 30477 CALL 30208    ; Write the recipient's name into the lines bubble graphic
                     ; buffer
; Next, determine how many lines should be given.
 30480 CALL 24993    ; #REGa=random number
 30483 AND 14        ; {Set #REGde equal to the number of lines (divided by
 30485 ADD A,2       ; 10): 10, 20, 30, 40, 50, 60, 70 or 80
 30487 LD E,A        ;
 30488 ADD A,A       ;
 30489 ADD A,A       ;
 30490 ADD A,E       ;
 30491 LD E,A        ;
 30492 LD D,0        ; }
; Add to the lines total or the score depending on who's getting lines.
 30494 POP AF        ; Restore the lines recipient's character number to #REGa
 30495 CP 167        ; Is BOY WANDER the lines recipient?
 30497 JR Z,30530    ; Jump if so
 30499 PUSH DE       ; Store the number of lines
 30500 CP 172        ; Is ERIC the lines recipient?
 30502 JR Z,30516    ; Jump if so
 30504 LD HL,(32708) ; {Add to the score if ANGELFACE or EINSTEIN was the lines
 30507 ADD HL,DE     ; recipient
 30508 LD (32708),HL ; }
 30511 LD DE,20924   ;
 30514 JR 30526      ;
*30516 LD HL,(32710) ; #REGhl=number of lines ERIC has
 30519 ADD HL,DE     ; Add the lines being given
 30520 LD (32710),HL ; Store the new lines total
 30523 LD DE,20956   ; Set #REGde to the appropriate display file address for
                     ; the lines total
*30526 CALL 30408    ; Print the new lines total
 30529 POP DE        ; #REGde=number of lines being given
; Now write the number of lines being given into the lines bubble graphic
; buffer, and copy the lines bubble graphic to the screen.
*30530 CALL 30432    ; Write the number of lines into the lines bubble graphic
                     ; buffer
 30533 POP DE        ; {Restore the attribute file address to #REGde and save
 30534 PUSH DE       ; it again}
 30535 LD HL,60160   ; Point #REGhl at the lines bubble graphic buffer at
                     ; #R60160
 30538 CALL 29977    ; Copy the lines bubble graphic to the screen
; Time for the first lines-giving sound effect.
 30541 LD A,(60160)  ; #REGa=lines bubble graphic attribute byte
 30544 LD DE,10240   ; #REGde=sound effect duration parameter
 30547 RRCA          ; {The border colour will be the same as the PAPER colour
 30548 RRCA          ; of the lines bubble
 30549 RRCA          ;
 30550 AND 7         ; }
*30552 OUT (254),A   ; {Play the first lines-giving sound effect
 30554 XOR 16        ;
 30556 LD B,20       ;
*30558 DJNZ 30558    ;
 30560 DEC E         ;
 30561 JR NZ,30552   ;
 30563 DEC D         ;
 30564 JR NZ,30552   ; }
; Now that the lines have been dished out, the teacher should explain why.
 30566 POP DE        ; Restore the attribute file address to #REGde
 30567 POP BC        ; Restore the reprimand message identifier (#b0-#b15) to
                     ; #REGb
 30568 PUSH DE       ; Save the attribute file address
 30569 PUSH AF       ; Save the border colour
 30570 LD A,B        ; #REGa=reprimand message identifier (#b0-#b15)
 30571 CALL 30156    ; Print the reprimand message
 30574 POP AF        ; Restore the border colour to #REGa
; This entry point is used by the routine at #R63829.
*30575 LD DE,5120    ; #REGde=sound effect duration parameter
*30578 OUT (254),A   ; {Play the second lines-giving sound effect
 30580 XOR 16        ;
 30582 LD B,50       ;
*30584 DJNZ 30584    ;
 30586 DEC E         ;
 30587 JR NZ,30578   ;
 30589 DEC D         ;
 30590 JR NZ,30578   ; }
 30592 LD A,1        ; {Set the border colour back to blue
 30594 OUT (254),A   ; }
 30596 POP DE        ; Restore the attribute file address to #REGde
 30597 LD HL,59904   ; Point #REGhl at the buffer containing the area of the
                     ; screen overwritten by the lines bubble
 30600 JP 29977      ; Restore the area of the screen that was overwritten

@rsub-begin
; Unused
u30603 DEFB 120,120,120,120,120
@rsub-end

; Skool region data table for the top floor
;
; Used by the routine at #R30636.
@label=TOPFLOOR
b30608 DEFB 8,0   ; Head's study (x<8; always off-limits)
 30610 DEFB 16,7  ; Head's study door to the Revision Library (8<=x<16)
 30612 DEFB 40,5  ; Revision Library (16<=x<40)
 30614 DEFB 57,1  ; Reading Room (40<=x<57)
 30616 DEFB 74,2  ; Map Room (57<=x<74)
 30618 DEFB 130,7 ; Map Room door to the fire escape (x>=74)

; Skool region data table for the middle floor
;
; Used by the routine at #R30636.
@label=MIDFLOOR
b30620 DEFB 10,0  ; Staff room (x<10; always off-limits)
 30622 DEFB 22,7  ; Between the staff room and the White Room (10<=x<22)
 30624 DEFB 38,3  ; White Room (22<=x<38)
 30626 DEFB 70,4  ; Exam Room (38<=x<70)
 30628 DEFB 130,7 ; Outside the Exam Room door (x>=70)

; Skool region data table for the bottom floor
;
; Used by the routine at #R30636.
@label=BOTFLOOR
b30630 DEFB 34,7  ; Left of the dinner hall (x<34)
 30632 DEFB 51,6  ; Dinner hall (34<=x<51)
 30634 DEFB 130,7 ; Right of the dinner hall (x>=51)

; Make any nearby teacher give ERIC lines if necessary
;
; Used by the routine at #R27353. Checks whether ERIC is somewhere he shouldn't
; be, or sitting or standing when or where he shouldn't be, or lying down, and
; makes any nearby teacher give lines accordingly.
@label=CHKERIC
c30636 LD HL,32754   ; {Check (and decrement) the lines-giving delay counter at
 30639 LD A,(HL)     ; #R32754, and proceed only if it was <#b75 (the counter
 30640 AND A         ; starts off at 0 for a new game, and is set to #b150 by
 30641 JR Z,30647    ; this routine after ERIC has been given lines)
 30643 DEC (HL)      ;
 30644 CP 75         ;
 30646 RET NC        ; }
@ssub=LD BC,(44128+1)
*30647 LD BC,(44129) ; Collect ERIC's coordinates in #REGbc
 30651 LD L,251      ; #REGhl=#R32763 (ERIC's status flags)
 30653 BIT 2,(HL)    ; Is ERIC jumping?
 30655 JR Z,30672    ; Jump if not
 30657 LD A,C        ; #REGa=ERIC's y-coordinate
 30658 LD C,155      ; This is the y-coordinate of the top floor
 30660 CP 156        ; Is ERIC on the top floor?
 30662 JR C,30672    ; Jump if so
 30664 LD C,162      ; This is the y-coordinate of the middle floor
 30666 CP 163        ; Is ERIC on the middle floor?
 30668 JR C,30672    ; Jump if so
 30670 LD C,169      ; This is the y-coordinate of the bottom floor
*30672 LD A,C        ; #REGa=ERIC's y-coordinate (adjusted if he's jumping)
 30673 LD DE,30608   ; {Point #REGhl at the skool region data table for the top
 30676 EX DE,HL      ; floor at #R30608}
 30677 CP 155        ; Is ERIC on the top floor?
 30679 JR Z,30704    ; Jump if so
@ssub=LD L,30620%256
@rsub=LD HL,30620
 30681 LD L,156      ; #REGhl=#R30620 (skool region data table for the middle
                     ; floor)
 30683 CP 162        ; Is ERIC on the middle floor?
 30685 JR Z,30704    ; Jump if so
@ssub=LD L,30630%256
@rsub=LD HL,30630
 30687 LD L,166      ; #REGhl=#R30630 (skool region data table for the bottom
                     ; floor)
 30689 CP 169        ; Is ERIC on the bottom floor?
 30691 JR Z,30704    ; Jump if so
; ERIC is on a staircase. Is he sitting on the stairs?
 30693 EX DE,HL      ; #REGhl=#R32763 (ERIC's status flags)
 30694 BIT 7,(HL)    ; Reset the zero flag if ERIC is sitting
 30696 LD A,7        ; This value is ignored
 30698 JR Z,30712    ; Jump unless ERIC is sitting on the stairs
 30700 LD A,0        ; Lines reprimand #R56192(#b0): DON'T SIT ON THE STAIRS
 30702 JR 30776      ; Make any nearby teacher give lines
; At this point, #REGhl holds the base address of a data table describing the
; regions in the skool (#R30608 for the top floor, #R30620 for the middle
; floor, or #R30630 for the bottom floor).
*30704 LD A,B        ; #REGb=ERIC's x-coordinate
*30705 CP (HL)       ; Compare it with the x-coordinate from the region table
 30706 INC HL        ;
 30707 INC HL        ;
 30708 JR NC,30705   ; Jump back until we've determined where ERIC is
 30710 DEC HL        ; {Point #REGde at the ID byte of the region table entry
 30711 EX DE,HL      ; }
; #HTML(<span id="regionID" />)
; The ID bytes in the region tables have the following meanings:
; .
; #TABLE(default,centre)
; { =h ID | =h Meaning }
; { 0     | ERIC should never be here (head's study or staff room) }
; { 1     | Reading Room }
; { 2     | Map Room }
; { 3     | White Room }
; { 4     | Exam Room }
; { 5     | Revision Library }
; { 6     | Dinner hall }
; { 7     | None of the above }
; TABLE#
*30712 LD A,(DE)     ; #REGa=ID of the region ERIC's in (7 if he's on a
                     ; staircase)
 30713 AND A         ; Set the zero flag if ERIC's in a forbidden zone
 30714 LD A,1        ; Lines reprimand #R56224(#b1): THE ROOM IS PRIVATE
 30716 JR Z,30776    ; Jump if ERIC's in the head's study or the staff room
 30718 LD A,(DE)     ; #REGa=ID of the region ERIC's in
 30719 LD L,200      ; #REGhl=#R32712 (lesson status flags)
 30721 BIT 7,(HL)    ; {Jump if EINSTEIN has not had a chance to grass on ERIC
 30723 JR Z,30763    ; for being absent yet, or dinner has not started yet, or
                     ; this is PLAYTIME or REVISION LIBRARY}
*30725 LD A,(32756)  ; #R32756 holds the current lesson descriptor
 30728 AND 7         ; Keep only the 'room' bits (0-2)
 30730 EX DE,HL      ;
 30731 CP (HL)       ; Compare this with ERIC's region ID
 30732 EX DE,HL      ;
 30733 LD A,2        ; Lines reprimand #R56256(#b2): GET TO WHERE YOU SHOULD BE
 30735 JR NZ,30776   ; Jump if ERIC is not where he should be
 30737 LD A,(HL)     ; Pick up the lesson status flags from #R32712
 30738 RLCA          ; {Set the carry flag if ERIC's lesson has started with
 30739 RLCA          ; ERIC present}
*30740 LD A,(44128)  ; #REGa=ERIC's animatory state
 30743 JR NC,30754   ; Jump if ERIC's lesson has not started
 30745 AND 15        ; {ERIC's lesson has started; is ERIC sitting in a chair?
 30747 CP 5          ; }
 30749 RET Z         ; Return if so
 30750 LD A,3        ; Lines reprimand #R56288(#b3): NOW FIND A SEAT
 30752 JR 30776      ; Make any nearby teacher give lines
; ERIC's lesson has not started yet.
*30754 AND 7         ; {Is ERIC standing, or midstride, or sitting on a chair?
 30756 CP 6          ; }
 30758 RET C         ; Return if so
 30759 LD A,4        ; Lines reprimand #R56448(#b4): GET OFF THE FLOOR
 30761 JR 30776      ; Make any nearby teacher give lines
; Bit 7 of #R32712 is reset, which means EINSTEIN has not yet had a chance to
; grass on ERIC for being absent at the start of the lesson, or dinner has not
; started yet, or this is PLAYTIME or REVISION LIBRARY.
*30763 CP 5          ; Is ERIC in a room?
 30765 JR NC,30740   ; Jump if not
@ssub=LD A,(32759+1)
 30767 LD A,(32760)  ; Pick up the MSB of the lesson clock in #REGa
 30770 CP 19         ; Should ERIC have left the room he was in last period?
 30772 JR NC,30740   ; Jump if not
 30774 JR 30725      ; Otherwise check ERIC's location
; ERIC is not where he should be, or is not sitting down when he should be, or
; is sitting on the floor or on the stairs. In short, he should be given lines
; by any adult witness. At this point #REGa holds one of the following values:
; .
; #TABLE(default)
; { =h #REGa | =h Meaning }
; { 0        | ERIC is sitting on the stairs }
; { 1        | ERIC is in the head's study or the staff room }
; { 2        | ERIC is not in the room he should be in }
; { 3        | ERIC is not sitting down when he should be }
; { 4        | ERIC is sitting on the floor }
; TABLE#
*30776 LD D,A        ; #REGd=0, 1, 2, 3 or 4
 30777 LD L,242      ; #REGhl=#R32754: lines-giving delay counter (#b0-#b73)
 30779 LD A,(HL)     ; {Is it too soon for the same teacher to give ERIC lines
 30780 AND A         ; twice in a row?}
 30781 JR Z,30790    ; Jump if not
 30783 INC HL        ; {Otherwise, collect from #R32755 into #REGh the
 30784 LD H,(HL)     ; character number of the teacher who last gave ERIC
                     ; lines}
 30785 LD L,98       ; {Store this teacher's x-coordinate in #REGe, and set his
 30787 LD E,(HL)     ; x-coordinate to 255 temporarily, so he's out of range
 30788 LD (HL),255   ; and will not be regarded as a lines-giving candidate}
*30790 PUSH DE       ;
 30791 PUSH AF       ;
 30792 LD D,C        ; {#REGde=ERIC's coordinates
 30793 LD E,B        ; }
 30794 LD HL,44128   ; Point #REGhl at ERIC's character buffer
 30797 CALL 28310    ; Get the floor closest to ERIC (#b155, #b162 or #b169) in
                     ; #REGd
 30800 CALL 28223    ; Can ERIC be seen by a teacher?
 30803 JR C,30816    ; Jump if so
 30805 POP AF        ;
 30806 POP DE        ;
 30807 RET Z         ; Return unless we need to restore the x-coordinate of the
                     ; last teacher who gave ERIC lines
 30808 LD A,(32755)  ; {Restore the x-coordinate of the teacher who was
 30811 LD H,A        ; temporarily placed out of lines-giving range
 30812 LD L,98       ;
 30814 LD (HL),E     ; }
 30815 RET           ;
; Time to dish out some lines to ERIC.
*30816 POP AF        ;
 30817 POP DE        ;
 30818 JR Z,30827    ; Jump unless we need to restore the x-coordinate of the
                     ; last teacher who gave ERIC lines
 30820 LD A,(32755)  ; {Restore the x-coordinate of the teacher who was
 30823 LD H,A        ; temporarily placed out of lines-giving range
 30824 LD L,98       ;
 30826 LD (HL),E     ; }
*30827 LD B,D        ; #REGb=0, 1, 2, 3 or 4 (lines reprimand ID)
 30828 EXX           ; {#REGh=character number of the teacher who saw ERIC
 30829 PUSH HL       ;
 30830 EXX           ;
 30831 POP HL        ; }
 30832 LD L,150      ; {Reset the lines-giving delay counter at #R32754 to
 30834 LD (32754),HL ; #b150, and set #R32755 to the character number of the
                     ; teacher who saw ERIC}
 30837 LD L,98       ; {#REGde=coordinates of the teacher who saw ERIC
 30839 LD E,(HL)     ;
 30840 DEC L         ;
 30841 LD D,(HL)     ; }
 30842 LD A,B        ; #REGb=0, 1, 2, 3 or 4 (lines reprimand ID)
 30843 CP 2          ; Was ERIC spotted somewhere other than where he should
                     ; be?
 30845 JR NZ,30883   ; Jump if not
; ERIC was spotted somewhere other than where he should be. The appropriate
; lines reprimand depends on who saw him: his teacher for this period, or
; another teacher.
 30847 LD A,(32756)  ; Pick up the current lesson descriptor from #R32756
 30850 AND 240       ; Keep only the teacher bits (4-7)
 30852 RRCA          ; {#REGa=character number of ERIC's teacher for this
 30853 RRCA          ; period
 30854 RRCA          ;
 30855 RRCA          ;
 30856 ADD A,163     ; }
 30858 CP H          ; Was it ERIC's teacher who saw him?
 30859 JR NZ,30883   ; Jump if not (with #REGb=#R56256(#b2): GET TO WHERE YOU
                     ; SHOULD BE)
; The truant ERIC has been spotted by his teacher for this period.
 30861 LD B,5        ; Lines reprimand #R56480(#b5): COME ALONG WITH ME BOY
 30863 LD A,(32712)  ; Bits 4 and 5 of #R32712 hold the flags that determine
                     ; ERIC's teacher's next lines reprimand
 30866 BIT 5,A       ; Set the zero flag if ERIC's teacher hasn't said 'COME
                     ; ALONG WITH ME BOY' yet
 30868 SET 5,A       ; Indicate that he has said this now
 30870 JR Z,30880    ; Jump if ERIC's teacher has spotted him for the first
                     ; time
 30872 XOR 16        ; Flip bit 4
 30874 INC B         ; #REGb=#R56512(#b6): HURRY UP YOU HORROR
 30875 BIT 4,A       ; Should ERIC's teacher say this next?
 30877 JR Z,30880    ; Jump if so
 30879 INC B         ; #REGb=#R56544(#b7): DON'T TRY MY PATIENCE BOY
*30880 LD (32712),A  ; Update the truancy lines reprimand flags in #R32712
; Now #REGb holds the appropriate lines reprimand ID. Finally, give lines to
; ERIC.
*30883 LD A,172      ; #b172=ERIC
 30885 JP 30464      ; Give lines to ERIC

@rsub-begin
; Unused
s30888 DEFS 2
@rsub-end

; Make a teacher give lines to the closest main kid
;
; Used by the routine at #R27196. Makes a teacher who has been knocked over
; give lines to the closest main kid (if any).
;
; H Teacher's character number (#b163-#b166)
@label=CHKKIDS
c30890 PUSH HL       ;
 30891 LD A,(32763)  ; Copy ERIC's status flags from #R32763 to #REGa
@ssub=LD HL,44128+2
 30894 LD HL,44130   ; {Pick up ERIC's coordinates in #REGde
 30897 LD E,(HL)     ;
 30898 DEC L         ;
 30899 LD D,(HL)     ; }
@ssub=LD BC,768+32654%256
 30900 LD BC,910     ; #REGb=3 (number of main kids besides ERIC), #REGc=LSB of
                     ; #R32654
 30903 BIT 2,A       ; Is ERIC jumping?
 30905 JR Z,30924    ; Jump if not
 30907 LD A,D        ; #REGa=ERIC's y-coordinate
 30908 LD D,155      ; This is the y-coordinate of the top floor
 30910 CP 156        ; Is ERIC jumping on the top floor?
 30912 JR C,30927    ; Jump if so
 30914 LD D,162      ; This is the y-coordinate of the middle floor
 30916 CP 163        ; Is ERIC jumping on the middle floor?
 30918 JR C,30927    ; Jump if so
 30920 LD D,169      ; This is the y-coordinate of the bottom floor
 30922 JR 30927      ;
*30924 CALL 28310    ; Get the floor nearest ERIC (#b155, #b162, #b169) in
                     ; #REGd
*30927 LD (32652),DE ; Store ERIC's normalised coordinates in #R32652
; Here we enter a loop that calculates BOY WANDER's, ANGELFACE's and EINSTEIN's
; normalised coordinates and stores them in #R32654, #R32656 and #R32658
; respectively. (If a character's coordinates are (x, y), then his normalised
; coordinates are (x, Y), where Y=155, 162, 169, i.e. the y-coordinate of the
; floor he is closest to.)
 30931 LD H,167      ; #b167=BOY WANDER
*30933 CALL 28304    ; #REGd=floor nearest the kid (#b155, #b162, #b169)
 30936 LD L,C        ; #REGl=#b142, #b144 or #b146
 30937 LD A,H        ; Store the kid's character number in #REGa temporarily
 30938 LD H,127      ; #REGhl=#R32654, #R32656 or #R32658
 30940 LD (HL),E     ; {Store the kid's normalised coordinates here
 30941 INC L         ;
 30942 LD (HL),D     ; }
 30943 INC L         ; Point #REGhl at the next normalised coordinates slot
 30944 LD C,L        ; Save #REGl in #REGc temporarily
 30945 LD H,A        ; Restore the kid's character number (#b167-#b169) to
                     ; #REGh
 30946 INC H         ; Next kid
 30947 DJNZ 30933    ; Jump back until the three main kids have been done
 30949 POP HL        ; {Restore the teacher's character number (#b163-#b166) to
 30950 PUSH HL       ; #REGh}
 30951 LD L,98       ; {Pick up the teacher's coordinates in #REGde
 30953 LD E,(HL)     ;
 30954 DEC L         ;
 30955 LD D,(HL)     ; }
 30956 CALL 28327    ; Get the lower and upper limits of the teacher's
                     ; visibility range in #REGc and #REGb
; Now we enter a loop to calculate the distance of each main kid from the
; teacher.
@ssub=LD HL,32652+7
 30959 LD HL,32659   ; Point #REGhl at EINSTEIN's normalised y-coordinate
 30962 LD A,4        ; There are four main kids to check
*30964 PUSH AF       ;
 30965 LD A,(HL)     ; Pick up a kid's normalised y-coordinate
 30966 DEC HL        ; Point #REGhl at the kid's x-coordinate
 30967 CP D          ; Compare the normalised y-coordinate with the teacher's
                     ; y-coordinate
 30968 LD A,(HL)     ; #REGa=kid's x-coordinate
 30969 LD (HL),255   ; Default assumption: kid and teacher are on different
                     ; floors
 30971 JR NZ,30987   ; Jump unless the kid's normalised y-coordinate matches
                     ; the teacher's y-coordinate
 30973 CP B          ; {Jump forward if the teacher cannot see the kid
 30974 JR Z,30978    ;
 30976 JR NC,30987   ;
*30978 CP C          ;
 30979 JR C,30987    ; }
 30981 SUB E         ; #REGa=distance between the teacher and the kid (possibly
                     ; < 0)
 30982 JR NC,30986   ; Jump if the kid is to the right of the teacher
                     ; (#REGa>=0)
 30984 NEG           ;
*30986 LD (HL),A     ; Store the absolute distance between the teacher and the
                     ; kid (if they are close to each other)
*30987 DEC HL        ; {Point #REGhl at the normalised y-coordinate of the next
 30988 POP AF        ; main kid and jump back until all four have been checked
 30989 DEC A         ;
 30990 JR NZ,30964   ; }
; Finally, we enter a loop to determine which main kid (if any) is closest to
; the teacher.
 30992 INC HL        ; #REGhl=#R32652 (holding ERIC's distance from the
                     ; teacher)
 30993 LD B,4        ; There are four main kids to consider
 30995 LD A,255      ; #b255 was used to signal that the kid was not on the
                     ; same floor as the teacher
*30997 CP (HL)       ; {When this loop is finished, #REGa will hold the
 30998 JR C,31001    ; distance between the teacher and the closest main kid
 31000 LD A,(HL)     ; (or #b255 if none of the kids were nearby)
*31001 INC HL        ;
 31002 INC HL        ;
 31003 DJNZ 30997    ; }
 31005 INC A         ; Were any of the main kids close to the teacher?
 31006 JR NZ,31010   ; Jump if so
 31008 POP HL        ; Restore the teacher's character number to #REGh
 31009 RET           ;
; So at least one of the main kids is within range. Which one will get lines?
*31010 DEC A         ; #REGa=distance between the teacher and the nearest kid
 31011 LD L,140      ; #REGhl=#R32652 (holding ERIC's distance from the
                     ; teacher)
 31013 INC D         ; #REGd=teacher's y-coordinate + 1
 31014 LD BC,2220    ; #REGb=#R56704(#b8) (NOW DON'T DO IT AGAIN), #REGc=#b172
                     ; (ERIC)
 31017 CP (HL)       ; Is ERIC closest to the teacher?
 31018 JR Z,31028    ; Jump if so
 31020 LD C,166      ; {On exit from this loop, #REGc will hold #b167 (BOY
*31022 INC C         ; WANDER), #b168 (ANGELFACE), or #b169 (EINSTEIN)
 31023 INC L         ;
 31024 INC L         ;
 31025 CP (HL)       ;
 31026 JR NZ,31022   ; }
*31028 LD A,C        ; #REGa=character number of the kid closest to the teacher
 31029 CALL 30464    ; Give lines to the kid who is closest to the teacher
 31032 POP HL        ; Restore the teacher's character number to #REGh
 31033 RET           ;

@rsub-begin
; Unused
s31034 DEFS 6
@rsub-end

; Print the lesson
;
; Used by the routine at #R63909. Prints the lesson (or DINNER or PLAYTIME) in
; the lesson box.
@label=PRTLESSON
c31040 LD A,(32756)  ; Pick up the lesson descriptor from #R32756
 31043 AND 7         ; Keep only the 'room' bits (bits 0-2)
 31045 CP 5          ; Set the zero flag if this period is REVISION LIBRARY,
                     ; and set the carry flag if this is a classroom period
@ssub=LD DE,60672+48
@nowarn
 31047 LD DE,60720   ; Point #REGde at the appropriate spot in the lesson box
                     ; graphic buffer (at #R60672) for the first line of text
 31050 LD HL,55945   ; #R55945=' ' (single space)
 31053 JR NZ,31057   ; Jump if this period is not REVISION LIBRARY
@ssub=LD L,55936%256
@rsub=LD HL,55936
 31055 LD L,128      ; #REGhl=#R55936: 'REVISION'
*31057 JR NC,31076   ; Jump if this is REVISION LIBRARY, DINNER or PLAYTIME
; This period takes place in a classroom. With which teacher?
 31059 LD A,(32756)  ; Pick up the lesson descriptor from #R32756
 31062 AND 240       ; Keep only the 'teacher' bits (bits 4-7)
 31064 LD L,A        ; {Point #REGhl at the appropriate teacher's name:
 31065 RRCA          ; #R55736 (MR WACKER), #R55750 (MR ROCKITT), #R55764 (MR
 31066 RRCA          ; WITHIT), or #R55778 (MR CREAK)
 31067 RRCA          ;
 31068 LD H,A        ;
 31069 LD A,L        ;
 31070 SUB H         ;
 31071 ADD A,184     ;
 31073 LD L,A        ;
@ssub=LD H,55736/256
 31074 LD H,217      ; }
*31076 CALL 30042    ; Write the first line of text (' ', 'REVISION' or the
                     ; teacher's name) into the lesson box graphic buffer
 31079 LD A,(32756)  ; Pick up the lesson descriptor from #R32756
 31082 AND 7         ; Keep only the 'room' bits (bits 0-2)
 31084 ADD A,A       ; {Point #REGhl at the appropriate room name: #R55952
 31085 ADD A,A       ; (READING ROOM), #R55968 (MAP ROOM), #R55984 (WHITE
 31086 ADD A,A       ; ROOM), #R56000 (EXAM ROOM), #R56032 (DINNER), or #R56048
 31087 ADD A,A       ; (PLAYTIME)
 31088 ADD A,128     ;
 31090 LD L,A        ;
@ssub=LD H,55952/256
 31091 LD H,218      ; }
; This entry point is also used by the routine at #R63909.
@ssub=LD DE,60672+128
@nowarn
*31093 LD DE,60800   ; Point #REGde at the appropriate spot in the lesson box
                     ; graphic buffer (at #R60672) for the second line of text
 31096 CALL 30042    ; Write the second line of text into the buffer
 31099 LD HL,60672   ; Point #REGhl at the start of the lesson box graphic
                     ; buffer
 31102 LD DE,23212   ; Set #REGde to the attribute file address for the lesson
                     ; box
 31105 JP 29977      ; Copy the lesson box graphic buffer to the screen

@rsub-begin
; Unused
u31108 DEFB 120,120
@rsub-end

; Make a character speak (1)
;
; The address of this interruptible subcommand routine is placed into bytes
; #b105 and #b106 of a character's buffer by the routines at #R31282, #R31996
; and #R62464. The subcommand terminates if the character is off-screen;
; otherwise it waits for anybody else to stop speaking before printing the
; speech bubble above the character's head and handing over control to the
; routine at #R31130.
;
; H Character number (#b152-#b169)
@label=SPEAK
c31110 LD L,110      ; {Zero out bytes #b109 and #b110 of the character's
 31112 XOR A         ; buffer, which normally hold the address of the next
 31113 LD (HL),A     ; character in the submessage being spoken (when a
 31114 DEC L         ; character starts speaking, there is no submessage)
 31115 LD (HL),A     ; }
; This entry point is used while the character is waiting for someone else to
; stop speaking.
@label=WAITSPK
 31116 CALL 29518    ; Make the character start speaking if possible
 31119 JP C,25252    ; Terminate this interruptible subcommand if the character
                     ; is off-screen
 31122 LD L,105      ; {Set the interruptible subcommand routine address in
@ssub=LD (HL),31116%256
 31124 LD (HL),140   ; bytes #b105 and #b106 of the character's buffer to the
                     ; entry point at #R31116
@rsub+begin
       INC HL
       LD (HL),31116/256
       DEC HL
@rsub+end
                     ; }
 31126 RET NZ        ; Return if somebody else is speaking at the moment
; Now it's this character's turn to speak.
@ssub=LD (HL),31130%256
 31127 LD (HL),154   ; {Set the interruptible subcommand routine address in
                     ; bytes #b105 and #b106 of the character's buffer to
                     ; #R31130
@rsub+begin
       INC L
       LD (HL),31130/256
@rsub+end
                     ; }
 31129 RET           ;

; Make a character speak (2)
;
; The address of this interruptible subcommand routine is placed into bytes
; #b105 and #b106 of a character's buffer by the routine at #R31110 just after
; the speech bubble has been printed above the character's head. It controls
; the character until he has finished speaking, and then removes the speech
; bubble.
;
; H Character number (#b152-#b169)
@label=SPEAK2
c31130 CALL 32242    ; Make sure the character speaks slowly
 31133 PUSH HL       ;
 31134 CALL 29706    ; Slide one letter into the text window of the speech
                     ; bubble
 31137 POP HL        ;
 31138 JR NC,31146   ; Jump unless the character has finished speaking
*31140 CALL 29746    ; Remove the speech bubble
 31143 JP 25252      ; Terminate this interruptible subcommand
*31146 CALL 29706    ; Slide another letter into the text window of the speech
                     ; bubble
 31149 JR C,31140    ; Remove the speech bubble if the character has finished
                     ; speaking
 31151 RET           ;

@rsub-begin
; Remnants of an old version of the previous routine
;
; This unused code appears to be the remnants of an early version of the
; routine at #R31130; the job previously done by this code is now done by the
; routine at #R29706.
u31152 LD (HL),218   ; {(#b22,#b218)=#R55830='<8 spaces>'
 31154 DEC L         ;
 31155 LD (HL),22    ; }
 31157 LD A,32       ; #b32=' ' (space)
 31159 JP 29442      ;
@rsub-end

; Control EINSTEIN during class (1)
;
; Used by command lists #R64536(#b144), #R64607(#b152), #R64678(#b160) and
; #R64749(#b168). Makes EINSTEIN wait for his turn to speak, and then hands
; over control to the interruptible subcommand routine at #R31116; when
; EINSTEIN has finished speaking, control returns to the primary command
; routine at #R31178.
;
; H #b169 (EINSTEIN)
@label=GRASSETC
c31162 LD A,(32713)  ; Pick up the lesson signal flags from #R32713
 31165 RLCA          ; Is it EINSTEIN's turn to speak yet?
 31166 RET NC        ; Return if not
 31167 LD L,99       ; {Replace the address of this primary command routine in
@ssub=LD (HL),31178%256
 31169 LD (HL),202   ; bytes #b99 and #b100 of EINSTEIN's buffer with that of
                     ; #R31178 (so that we go there after EINSTEIN has finished
                     ; speaking)
@rsub+begin
       INC L
       LD (HL),31178/256
@rsub+end
                     ; }
 31171 LD L,106      ; {Set the routine address MSB in byte #b106 of EINSTEIN's
@ssub=LD (HL),31110/256
 31173 LD (HL),121   ; buffer to that of #R31116; the LSB will be set later}
 31175 JP 31110      ; Make EINSTEIN join the queue to speak

; Control EINSTEIN during class (2)
;
; The address of this primary command routine is placed into bytes #b99 and
; #b100 of EINSTEIN's buffer by the routine at #R31162. After EINSTEIN has
; finished speaking, control resumes here.
;
; H #b169 (EINSTEIN)
@label=GRASS2
c31178 LD L,99       ; {Replace the address of this primary command routine in
@ssub=LD (HL),31162%256
 31180 LD (HL),186   ; bytes #b99 and #b100 of EINSTEIN's buffer with that of
                     ; #R31162
@rsub+begin
       INC L
       LD (HL),31162/256
@rsub+end
                     ; }
 31182 LD HL,32713   ; #R32713 holds the lesson signal flags
 31185 RES 7,(HL)    ; Signal: EINSTEIN has just spoken (so it's now the
                     ; teacher's turn to speak)
 31187 RET           ;

; Check whether ERIC is where he should be
;
; Used by the routines at #R31648, #R31854, #R31895, #R31952 and #R62208.
; Returns with the zero flag set if and only if ERIC is where he should be
; during dinner or class.
@label=PRESENT
c31188 CALL 31229    ; Get ERIC's coordinates in #REGde
 31191 LD A,D        ; #REGa=ERIC's y-coordinate
 31192 PUSH HL       ;
 31193 LD HL,30608   ; Point #REGhl at the skool region table for the top floor
                     ; (see #R30636)
 31196 CP 155        ; Is ERIC on the top floor?
 31198 JR Z,31214    ; Jump if so
 31200 CP 162        ; Set the zero flag if ERIC's on the middle floor
@ssub=LD L,30620%256
@rsub=LD HL,30620
 31202 LD L,156      ; #REGhl=#R30620 (skool region data table for the middle
                     ; floor; see #R30636)
 31204 JR Z,31214    ; Jump if ERIC's on the middle floor
@ssub=LD L,30630%256
@rsub=LD HL,30630
 31206 LD L,166      ; #REGhl=#R30630 (skool region data table for the bottom
                     ; floor; see #R30636)
 31208 CP 169        ; Is ERIC on the bottom floor?
 31210 JR Z,31214    ; Jump if so
 31212 POP HL        ;
 31213 RET           ; Return with the zero flag reset
; ERIC is on the top, middle or bottom floor (i.e. not on a staircase).
*31214 LD A,E        ; #REGa=ERIC's x-coordinate
*31215 CP (HL)       ; {Find the #R30636#regionID(region identifier) (0-7) for
 31216 INC HL        ; ERIC's current location
 31217 INC HL        ;
 31218 JR NC,31215   ; }
 31220 DEC HL        ; #REGhl now points at the region identifier
 31221 LD A,(32756)  ; Pick up the current lesson descriptor from #R32756
 31224 AND 7         ; Keep only the room bits (bits 0-2)
 31226 CP (HL)       ; Is ERIC where he should be?
 31227 POP HL        ;
 31228 RET           ; Return with the zero flag set if so

; Get ERIC's coordinates
;
; Used by the routines at #R31188, #R31648 and #R63374. Returns with ERIC's
; coordinates (adjusted appropriately if he's jumping) in #REGde.
@label=ERICLOC
@ssub=LD DE,(44128+1)
c31229 LD DE,(44129) ; Pick up ERIC's coordinates in #REGde
 31233 LD A,(32763)  ; #R32763 holds ERIC's status flags
 31236 BIT 2,A       ; Bit 2 will be set if ERIC is jumping
 31238 LD A,E        ; {Get ERIC's y-coordinate in #REGd and x-coordinate in
 31239 LD E,D        ; #REGe
 31240 LD D,A        ; }
 31241 RET Z         ; Return unless ERIC is jumping
; This entry point is used by the routine at #R27303 with ERIC's y-coordinate
; in #REGa.
*31242 LD D,155      ; This is the y-coordinate of the top floor
 31244 CP 156        ; Is ERIC on the top floor?
 31246 RET C         ; Return if so
 31247 LD D,162      ; This is the y-coordinate of the middle floor
 31249 CP 163        ; Is ERIC on the middle floor?
 31251 RET C         ; Return if so
 31252 LD D,169      ; This is the y-coordinate of the bottom floor
 31254 RET           ;

@rsub-begin
; Unused
s31255 DEFB 0
@rsub-end

; Data table for MR WACKER's questions and answers
;
; Used by the routine at #R31282.
@label=WACKERQA
@ssub=DEFB 61457%256
b31256 DEFB 17 ; LSB of #R61457: '{Please Sir...}It's 1234'
@ssub=DEFB 61440%256
 31257 DEFB 0  ; LSB of #R61440: 'WHAT IS 12 x 34?{8 spaces}'

; Data table for MR ROCKITT's questions and answers
;
; Used by the routine at #R31282.
@label=ROCKITTQA
@ssub=DEFB 61496%256
b31258 DEFB 56  ; LSB of #R61496: 'Q' in 'WHAT ELEMENT HAS THE SYMBOL Q?'
@ssub=DEFB 61506%256
 31259 DEFB 66  ; LSB of #R61506: 'Q' in '{Please Sir...}It is Q'
@ssub=DEFB 61499%256
 31260 DEFB 59  ; LSB of #R61499: '{Please Sir...}It is Q'
@ssub=DEFB 61468%256
 31261 DEFB 28  ; LSB of #R61468: 'WHAT ELEMENT HAS THE SYMBOL Q?'
@ssub=DEFB 61540%256
 31262 DEFB 100 ; LSB of #R61540: 'Q' in 'WHAT IS THE CHEMICAL SYMBOL FOR Q?'
@ssub=DEFB 61506%256
 31263 DEFB 66  ; LSB of #R61506: 'Q' in '{Please Sir...}It is Q'
@ssub=DEFB 61499%256
 31264 DEFB 59  ; LSB of #R61499: '{Please Sir...}It is Q'
@ssub=DEFB 61508%256
 31265 DEFB 68  ; LSB of #R61508: 'WHAT IS THE CHEMICAL SYMBOL FOR Q?'

; Data table for MR WITHIT's questions and answers
;
; Used by the routine at #R31282.
@label=WITHITQA
@ssub=DEFB 61595%256
b31266 DEFB 155 ; LSB of #R61595: 'Q' in 'WHICH COUNTRY'S CAPITAL IS Q?'
@ssub=DEFB 61506%256
 31267 DEFB 66  ; LSB of #R61506: 'Q' in '{Please Sir...}It is Q'
@ssub=DEFB 61499%256
 31268 DEFB 59  ; LSB of #R61499: '{Please Sir...}It is Q'
@ssub=DEFB 61568%256
 31269 DEFB 128 ; LSB of #R61568: 'WHICH COUNTRY'S CAPITAL IS Q?'
@ssub=DEFB 61565%256
 31270 DEFB 125 ; LSB of #R61565: 'Q' in 'WHAT'S THE CAPITAL OF Q?'
@ssub=DEFB 61506%256
 31271 DEFB 66  ; LSB of #R61506: 'Q' in '{Please Sir...}It is Q'
@ssub=DEFB 61499%256
 31272 DEFB 59  ; LSB of #R61499: '{Please Sir...}It is Q'
@ssub=DEFB 61543%256
 31273 DEFB 103 ; LSB of #R61543: 'WHAT'S THE CAPITAL OF Q?'

; Data table for MR CREAK's questions and answers
;
; Used by the routine at #R31282.
@label=CREAKQA
@ssub=DEFB 61649%256
b31274 DEFB 209 ; LSB of #R61649: 'Q' in 'WHICH BATTLE OCCURRED IN Q?'
@ssub=DEFB 61687%256
 31275 DEFB 247 ; LSB of #R61687: 'Q' in '{Please Sir...}It was the BATTLE OF
                ; Q'
@ssub=DEFB 61665%256
 31276 DEFB 225 ; LSB of #R61665: '{Please Sir...}It was the BATTLE OF Q'
@ssub=DEFB 61624%256
 31277 DEFB 184 ; LSB of #R61624: 'WHICH BATTLE OCCURRED IN Q?'
@ssub=DEFB 61621%256
 31278 DEFB 181 ; LSB of #R61621: 'Q' in 'WHEN WAS THE BATTLE OF Q?'
@ssub=DEFB 61663%256
 31279 DEFB 223 ; LSB of #R61663: 'Q' in '{Please Sir...}It was in Q'
@ssub=DEFB 61652%256
 31280 DEFB 212 ; LSB of #R61652: '{Please Sir...}It was in Q'
@ssub=DEFB 61598%256
 31281 DEFB 158 ; LSB of #R61598: 'WHEN WAS THE BATTLE OF Q?'

; Prepare a question and answer
;
; Used by the routine at #R62464. Prepares a question message and stores its
; address in bytes #b107 and #b108 of the teacher's buffer; also prepares the
; answer message and stores its address in bytes #b107 and #b108 of EINSTEIN's
; buffer. Places the address of the interruptible subcommand routine at #R31110
; (make character speak) into bytes #b105 and #b106 of the teacher's buffer
; before returning.
;
; H Teacher's character number (#b163-#b166)
@label=PREPQA
c31282 PUSH HL       ; Save the teacher's character number
 31283 LD A,H        ; #REGa=teacher's character number
 31284 CP 163        ; Is it MR WACKER?
 31286 JR NZ,31378   ; Jump if not
; MR WACKER is conducting this lesson, so we have to prepare a multiplication
; question and answer. First, generate two random numbers and store the ASCII
; codes of their digits in the question message.
@ssub=LD HL,61440+8
 31288 LD HL,61448   ; #REGhl=#R61448: the '12' in 'WHAT IS 12 x 34?'
 31291 LD B,2        ; There are two numbers to generate
*31293 LD C,A        ; Store the second (the multiplier) in #REGc on pass 2
*31294 CALL 24993    ; {Collect a random number between 32 and 99 in #REGa
 31297 AND 127       ;
 31299 CP 100        ;
 31301 JR NC,31294   ;
 31303 CP 32         ;
 31305 JR C,31294    ; }
 31307 PUSH AF       ; Store this number temporarily
 31308 LD (HL),47    ; {Insert the ASCII codes for the digits of the number
*31310 INC (HL)      ; into the 'WHAT IS 12 x 34?' message
 31311 SUB 10        ;
 31313 JR NC,31310   ;
 31315 ADD A,58      ;
 31317 INC L         ;
 31318 LD (HL),A     ; }
 31319 POP AF        ; Restore the number to #REGa
@ssub=LD L,61453%256
@rsub=LD HL,61453
 31320 LD L,13       ; #REGhl=#R61453: the '34' in 'WHAT IS 12 x 34?'
 31322 DJNZ 31293    ; Jump back to insert the multiplier into the message
; Now multiply the two numbers, and store the ASCII codes of the digits of the
; product in the answer message.
 31324 LD DE,0       ; {#REGhl=0 (ready for multiplication), and #REGde=#R61463
@ssub=LD L,61463%256
@rsub=LD HL,61463
 31327 LD L,23       ; (the '1234' in EINSTEIN's response message)
 31329 EX DE,HL      ; }
*31330 ADD HL,BC     ; {#REGhl=the product of the two numbers
 31331 DEC A         ;
 31332 JR NZ,31330   ; }
@keep
 31334 LD BC,64536   ; {Calculate the 1000s digit and store its ASCII code in
*31337 INC A         ; the appropriate spot
 31338 ADD HL,BC     ;
 31339 JR C,31337    ;
 31341 SBC HL,BC     ;
 31343 ADD A,47      ;
 31345 LD (DE),A     ; }
@keep
 31346 LD BC,65436   ; {Calculate the 100s digit and store its ASCII code in
 31349 LD A,47       ; the appropriate spot
*31351 INC A         ;
 31352 ADD HL,BC     ;
 31353 JR C,31351    ;
 31355 SBC HL,BC     ;
 31357 INC E         ;
 31358 LD (DE),A     ; }
 31359 LD A,L        ; {Calculate the 10s digit and store its ASCII code in the
 31360 EX DE,HL      ; appropriate spot
 31361 INC L         ;
 31362 LD (HL),47    ;
*31364 INC (HL)      ;
 31365 SUB 10        ;
 31367 JR NC,31364   ; }
 31369 ADD A,58      ; {Store the ASCII code of the units digit in the
 31371 INC L         ; appropriate spot
 31372 LD (HL),A     ; }
 31373 LD HL,31256   ; This is the base address of the data table used for MR
                     ; WACKER's questions and answers
 31376 JR 31424      ;
; Some teacher other than MR WACKER is conducting this lesson.
*31378 SUB 164       ; #REGa=0 (MR ROCKITT), 1 (MR WITHIT), or 2 (MR CREAK)
 31380 CALL 63779    ; Make MR CREAK ask the birth year question if appropriate
 31383 LD B,128      ;
 31385 JR Z,31398    ; Jump if we're dealing with MR ROCKITT
 31387 LD B,170      ;
@ssub=LD L,31266%256
@rsub=LD HL,31266
 31389 LD L,34       ; #REGhl=#R31266
 31391 DEC A         ; Are we dealing with MR WITHIT?
 31392 JR Z,31398    ; Jump if so
@ssub=LD L,31274%256
@rsub=LD HL,31274
 31394 LD L,42       ; #REGhl=#R31274
 31396 LD B,212      ;
; Now #REGhl points at one of the data tables at #R31258 (MR ROCKITT), #R31266
; (MR WITHIT) and #R31274 (MR CREAK). Each data table contains eight LSBs: four
; LSBs for each type of question. The LSBs correspond to (1) the identifier
; slot in the teacher's question; (2) the identifier slot in EINSTEIN's answer;
; (3) the base address of EINSTEIN's answer; and (4) the base address of the
; teacher's question.
*31398 CALL 24993    ; {Get a random number between #b0 and #b41 in #REGa
 31401 CP 42         ;
 31403 JR NC,31398   ; }
 31405 ADD A,B       ; #REGa=#b128-#b169 (MR ROCKITT), #b170-#b211 (MR WITHIT),
                     ; or #b212-#b253 (MR CREAK)
 31406 BIT 0,A       ; {There are two types of question the teacher can ask;
 31408 JR Z,31414    ; here we decide which one}
@rsub=INC HL
 31410 INC L         ; {Move forward four spaces in the data table to the LSBs
@rsub=INC HL
 31411 INC L         ; for the second type of question
@rsub=INC HL
 31412 INC L         ;
@rsub=INC HL
 31413 INC L         ; }
@ssub=LD D,61440/256
*31414 LD D,240      ; {Insert the random identifier into the teacher's
 31416 LD E,(HL)     ; question
 31417 LD (DE),A     ; }
@rsub=INC HL
 31418 INC L         ; {Insert the corresponding random identifier into
 31419 LD E,(HL)     ; EINSTEIN's answer
 31420 XOR 1         ;
 31422 LD (DE),A     ; }
@rsub=INC HL
 31423 INC L         ;
*31424 LD E,(HL)     ; {Store the address of the answer message in bytes #b107
@ssub=LD D,61440/256
 31425 LD D,240      ; and #b108 of EINSTEIN's buffer
@ssub=LD (43360+11),DE
 31427 LD (43371),DE ; }
@rsub=INC HL
 31431 INC L         ;
 31432 LD E,(HL)     ; #REGde=address of the question message
; This entry point is used by the routine at #R63779.
*31433 POP HL        ; Restore the teacher's character number to #REGh
 31434 LD L,107      ; {Store the address of the question message in bytes
 31436 LD (HL),E     ; #b107 and #b108 of the teacher's buffer
 31437 INC L         ;
 31438 LD (HL),D     ; }
 31439 LD L,106      ; {Place the address of the interruptible subcommand
@ssub=LD (HL),31110/256
 31441 LD (HL),121   ; routine at #R31110 (make character speak) into bytes
 31443 DEC L         ; #b105 and #b106 of the teacher's buffer
@ssub=LD (HL),31110%256
 31444 LD (HL),134   ; }
 31446 RET           ;

@rsub-begin
; Unused
s31447 DEFS 5
@rsub-end

; Determine the next move of a character following another character
;
; Used by the routines at #R31648, #R62938 and #R63374. Returns with one of the
; following values in #REGa depending on the relative locations of the follower
; and his target:
; .
; #TABLE(default)
; { =h A | =h Meaning }
; { 0    | Follower is at the same coordinates as the target }
; { 1    | Follower should go (or continue going) upstairs }
; { 2    | Follower should go (or continue going) downstairs }
; { 3    | Follower should go left }
; { 4    | Follower should go right }
; TABLE#
;
; DE Target character's coordinates
; H Follower's character number (#b152-#b172)
@label=NEXTMOVE
c31452 LD L,97       ; Byte #b97 of the follower's buffer holds his
                     ; y-coordinate
 31454 LD A,(HL)     ; Pick this up in #REGa
 31455 CP 155        ; Is the follower on the top floor?
 31457 JR Z,31480    ; Jump if so
 31459 CP 162        ; Is the follower on the middle floor?
 31461 JR Z,31480    ; Jump if so
 31463 CP 169        ; Is the follower on the bottom floor?
 31465 JR Z,31480    ; Jump if so
; The follower is on a staircase. Find out whether he's going up or down and
; set #REGa accordingly to make him continue.
 31467 LD L,98       ; Byte #b98 of the follower's buffer holds his
                     ; x-coordinate
 31469 LD A,(HL)     ; Pick this up in #REGa
 31470 LD L,96       ; Byte #b96 holds the follower's animatory state
 31472 ADD A,80      ; Set bit 7 of #REGa if the follower is on a staircase at
                     ; the right of the skool
 31474 XOR (HL)      ; {#REGa=1 if the follower is going upstairs, 2 if he's
 31475 AND 128       ; going downstairs
 31477 RLCA          ;
 31478 INC A         ; }
 31479 RET           ;
; The follower is not on a staircase. Which way should he go?
*31480 CP D          ; Is the follower on the same floor as the target?
 31481 JR NZ,31549   ; Jump if not
; The follower is on the same floor as the target. However, there may be a wall
; between them.
 31483 INC L         ; {Pick up the follower's x-coordinate in #REGa
 31484 LD A,(HL)     ; }
 31485 SUB E         ; Is the follower in the same spot as his target?
 31486 RET Z         ; Return if so
 31487 DEC L         ; {Pick up the follower's y-coordinate in #REGa
 31488 LD A,(HL)     ; }
 31489 CP 169        ; Is the follower on the bottom floor?
 31491 JR NZ,31501   ; Jump if not
; The follower and target are both on the bottom floor, so the follower should
; simply move either left or right.
 31493 INC HL        ; #REGl=#b98
*31494 LD A,(HL)     ; #REGa=follower's x-coordinate
 31495 CP E          ; Set the carry flag if the follower should go right
*31496 LD A,3        ; {#REGa=3 if the follower should go left, 4 if he should
 31498 ADC A,0       ; go right}
 31500 RET           ;
; The follower and target are both on the middle floor or both on the top
; floor.
*31501 CP 162        ; Set the zero flag if the follower and target are on the
                     ; middle floor
 31503 INC HL        ; #REGl=#b98
 31504 LD A,57       ; This is the x-coordinate of the wall between the Reading
                     ; and Map Rooms
 31506 JR NZ,31510   ; Jump if the follower and target are on the top floor
 31508 LD A,38       ; This is the x-coordinate of the wall between the White
                     ; and Exam Rooms
*31510 CP (HL)       ; Compare the follower's x-coordinate with that of the
                     ; wall
 31511 JR C,31531    ; Jump if the follower is to the right of the wall
 31513 CP E          ; Is the target character to the left of the wall?
 31514 JR NC,31494   ; Jump if so
; The follower is on the left side of the skool and must go downstairs to get
; to the target on the other side of the skool.
*31516 LD A,(HL)     ; #REGa=follower's x-coordinate
 31517 CP 12         ; This is the x-coordinate of the tops of the staircases
                     ; at the left of the skool
 31519 JR NZ,31496   ; Jump unless the follower is at the top of a staircase
 31521 LD L,96       ; Byte #b96 of the follower's buffer holds his animatory
                     ; state
 31523 LD A,4        ; #REGa=4 will make the follower turn round if facing left
 31525 BIT 7,(HL)    ; Is the follower facing left?
 31527 RET Z         ; Return if so
 31528 LD A,2        ; #REGa=2 will make the follower go down the stairs
 31530 RET           ;
; The follower is on the right side of the skool. Is the target there too?
*31531 CP E          ; Is the target character to the right of the wall?
 31532 JR C,31494    ; Jump if so
*31534 LD A,(HL)     ; #REGa=follower's x-coordinate
 31535 CP 77         ; This is the x-coordinate of the tops of the staircases
                     ; at the right of the skool
 31537 JR NZ,31496   ; Jump unless the follower is at the top of a staircase
 31539 LD L,96       ; Byte #b96 of the follower's buffer holds his animatory
                     ; state
 31541 LD A,3        ; #REGa=3 will make the follower turn round if facing
                     ; right
 31543 BIT 7,(HL)    ; Is the follower facing right?
 31545 RET NZ        ; Return if so
 31546 LD A,2        ; #REGa=2 will make the follower go down the stairs
 31548 RET           ;
; The follower and target are on different floors.
*31549 JR NC,31565   ; Jump if the target is on a floor above the follower
 31551 CP 162        ; Set the zero flag if the follower is on the middle floor
 31553 INC HL        ; #REGl=#b98
 31554 LD A,57       ; This is the x-coordinate of the wall between the Reading
                     ; and Map Rooms
 31556 JR NZ,31560   ; Jump if the follower is on the top floor
 31558 LD A,38       ; This is the x-coordinate of the wall between the White
                     ; and Exam Rooms
*31560 CP (HL)       ; Compare the follower's x-coordinate with that of the
                     ; wall
*31561 JR NC,31516   ; Jump if the follower is to the left of the wall (and so
                     ; needs to go to the top of a staircase on the left)
 31563 JR C,31534    ; Jump if the follower is to the right of the wall (and so
                     ; needs to go to the top of a staircase on the right)
; The target is on a floor above the follower. Which staircase should the
; follower use?
*31565 LD A,D        ; #REGa=target's y-coordinate
 31566 LD D,155      ; This is the y-coordinate of the top floor
 31568 CP 162        ; This is the y-coordinate of the middle floor
 31570 LD A,57       ; This is the x-coordinate of the wall between the Reading
                     ; and Map Rooms
 31572 JR C,31578    ; Jump if the target is above the middle floor
 31574 LD D,162      ; This is the y-coordinate of the middle floor
 31576 LD A,38       ; This is the x-coordinate of the wall between the White
                     ; and Exam Rooms
*31578 CP E          ; Compare the target's x-coordinate with that of the wall
 31579 LD E,97       ; Signal: target is to the right of the wall
 31581 JR C,31585    ; Jump if the target is to the right of the wall
 31583 LD E,1        ; Signal: target is to the left of the wall
*31585 LD A,(HL)     ; #REGa=follower's y-coordinate
 31586 CP 169        ; Set the zero flag if the follower is on the bottom floor
 31588 INC HL        ; #REGl=#b98
 31589 JR NZ,31622   ; Jump if the follower is on the middle floor
*31591 LD A,19       ; This is the x-coordinate of the bottoms of the
                     ; staircases at the left of the skool
 31593 DEC E         ; Is the target to the left of the wall?
 31594 JR Z,31598    ; Jump if so
 31596 LD A,70       ; This is the x-coordinate of the bottoms of the
                     ; staircases at the right of the skool
*31598 CP (HL)       ; Compare this with the follower's x-coordinate
 31599 CCF           ; Set the carry flag if the follower should go right
 31600 JR NZ,31496   ; Jump if the follower is not at the bottom of a staircase
 31602 LD L,96       ; Byte #b96 of the follower's buffer holds his animatory
                     ; state
 31604 CP 19         ; This is the x-coordinate of the bottoms of the
                     ; staircases at the left of the skool
 31606 LD A,1        ; #REGa=1 will make the follower go upstairs
 31608 JR Z,31616    ; Jump if the follower should go up a staircase at the
                     ; left of the skool
 31610 BIT 7,(HL)    ; Is the follower facing right?
 31612 RET NZ        ; Jump if so
 31613 LD A,4        ; #REGa=3 will make the follower turn round and face right
 31615 RET           ;
*31616 BIT 7,(HL)    ; Is the follower facing left?
 31618 RET Z         ; Return (with #REGa=1) if so
 31619 LD A,3        ; #REGa=3 will make the follower turn round and face left
 31621 RET           ;
; The follower is on the middle floor, and the target is on the top floor.
*31622 LD A,38       ; This is the x-coordinate of the wall between the White
                     ; and Exam Rooms
 31624 CP (HL)       ; Compare this with the follower's x-coordinate
 31625 LD A,97       ; Signal: follower is to the right of the wall
 31627 JR C,31631    ; Jump if the follower is to the right of the wall
 31629 LD A,1        ; Signal: follower is to the left of the wall
*31631 CP E          ; Is the target on the same side of the skool?
 31632 JR Z,31591    ; Jump if so (follower must go up the nearest staircase)
 31634 CCF           ; Set the carry flag if the follower must go down a
                     ; staircase at the right of the skool, and reset it if he
                     ; must go down a staircase at the left of the skool
 31635 JR 31561      ;

@rsub-begin
; Unused
s31637 DEFB 0
@rsub-end

; Rewind to a specific point in a command list
;
; Used by the routine at #R31648. Partially rewinds a teacher's command list
; after he has fetched the truant ERIC, thus making him resume normal classroom
; duties.
;
; DE Command list entry address
; H Teacher's character number (#b163-#b166)
; L #b118
@label=REWIND
c31638 LD (HL),D     ; {Place the command list entry address into bytes #b117
 31639 DEC L         ; and #b118 of the teacher's buffer, which will make the
 31640 LD (HL),E     ; teacher restart the command list from that point}
 31641 LD L,106      ; {Remove the interruptible subcommand routine address
 31643 LD (HL),0     ; from bytes #b105 and #b106 of the teacher's buffer}
 31645 JP 25256      ; Move to the next command in the command list

; Make a teacher find the truant ERIC
;
; Used by the routine at #R31854, which also places the address of this
; interruptible subcommand routine into bytes #b105 and #b106 of the teacher's
; buffer when ERIC is absent during dinner or class. It makes the teacher run
; after and stalk ERIC until he goes to wherever he should be (the dinner hall
; or the classroom).
;
; H Teacher's character number (#b163-#b166)
@label=SEEKERIC
c31648 CALL 31229    ; Get ERIC's coordinates in #REGde
 31651 CALL 32234    ; Make this teacher walk fast
 31654 CALL 31452    ; Determine which way the teacher needs to go to find ERIC
 31657 AND A         ; Are ERIC and this teacher in the same location?
 31658 JR Z,31664    ; Jump if so
 31660 CP 3          ; Is this teacher going up or down a staircase?
 31662 JR C,31695    ; Jump if so
*31664 LD L,122      ; {If this teacher's command list has been marked for a
 31666 BIT 0,(HL)    ; restart (by the routine at #R26342), terminate this
 31668 JP NZ,25252   ; interruptible subcommand and restart now}
 31671 LD B,A        ;
 31672 CALL 31188    ; Check whether ERIC is where he should be
 31675 LD A,B        ;
 31676 JR NZ,31695   ; Jump if ERIC is not where he should be
; ERIC is back where he should be, so it's time for the teacher to resume his
; classroom duties.
 31678 LD L,117      ; {Pick up in #REGde the address the teacher has reached
 31680 LD E,(HL)     ; in his command list
 31681 INC L         ;
 31682 LD D,(HL)     ; }
 31683 LD B,2        ; {#b190 is the LSB of the address of the routine at
*31685 DEC DE        ; #R25534; point #REGde at the second-from-last occurrence
 31686 LD A,(DE)     ; of this routine address in the teacher's command list
@ssub=CP 25534%256
 31687 CP 190        ; (which will take him to the side of the blackboard where
 31689 JR NZ,31685   ; he waits for EINSTEIN to grass, or back to the dinner
@rsub+begin
       INC DE
       LD A,(DE)
       CP 25534/256
       DEC DE
       JR NZ,31685
@rsub+end
 31691 DJNZ 31685    ; hall)}
 31693 JR 31638      ; Restart the teacher's command list from this point
; ERIC is not where he should be, or the teacher is on a staircase.
*31695 AND A         ; Are ERIC and the teacher in exactly the same location?
 31696 JR NZ,31711   ; Jump if not
 31698 LD A,(23672)  ; #w23672=LSB of FRAMES system variable
 31701 AND A         ; This LSB will be 0 once every 5.12 seconds
 31702 RET NZ        ; Return if it's not zero now
*31703 CALL 25108    ; Update the SRB for the teacher's current animatory state
 31706 XOR 128       ; Make the teacher turn round
 31708 JP 25008      ; Update the teacher's animatory state and update the SRB
; This entry point is used by the routine at #R63374 with #REGh holding the
; number of a character looking for ERIC (which will be little boy no. 10 or a
; teacher), and #REGa holding 1, 2, 3 or 4 (indicating the character's next
; move).
*31711 CP 3          ; Set the carry flag if the chaser is on a staircase
 31713 LD BC,0       ; {#REGde will hold the appropriate x- and y-coordinate
 31716 LD DE,0       ; increments for the chaser's next move (to the midstride
                     ; position), and #REGbc will hold the appropriate x- and
                     ; y-coordinate increments for the chaser's move after that
                     ; (from the midstride position); initialise these
                     ; increments to 0}
 31719 LD L,96       ; Byte #b96 of the buffer holds the animatory state of
                     ; ERIC's chaser
 31721 JR C,31768    ; Jump if the chaser is currently going up or down stairs
 31723 JR NZ,31732   ; Jump if the chaser must go right (#REGa=4)
 31725 BIT 7,(HL)    ; Is the chaser facing right?
 31727 JR NZ,31703   ; Turn him round if so
 31729 DEC C         ; #REGc=-1
 31730 JR 31781      ;
*31732 BIT 7,(HL)    ; Is the chaser facing left?
 31734 JR Z,31703    ; Turn him round if so
 31736 INC C         ; #REGc=1
 31737 JR 31781      ;

; Move a character looking for ERIC from the midstride position
;
; Used by the routine at #R63374. The address of this interruptible subcommand
; routine is also placed into bytes #b105 and #b106 of a character's buffer by
; the routine at #R31768. It moves ERIC's chaser from the midstride position.
;
; H Number of the character looking for ERIC (#b161, #b163-#b166)
@label=TOERIC
c31739 LD L,105      ; {Replace the address of this routine in bytes #b105 and
@ssub=LD (HL),31648%256
 31741 LD (HL),160   ; #b106 of the character's buffer (if present) with that
                     ; of #R31648
@rsub+begin
       INC L
       LD (HL),31648/256
@rsub+end
                     ; }
 31743 CALL 25108    ; Update the SRB for the character's current location
 31746 LD L,108      ; {#REGd=character's new y-coordinate (adjusted by the
 31748 LD B,A        ; value in byte #b108 of his buffer, placed there by the
 31749 LD A,D        ; routine at #R31768)
 31750 ADD A,(HL)    ;
 31751 LD D,A        ; }
 31752 DEC L         ; {#REGe=character's new x-coordinate (adjusted by the
 31753 LD A,E        ; value in byte #b107 of his buffer, placed there by the
 31754 ADD A,(HL)    ; routine at #R31768)
 31755 LD E,A        ; }
; The character's post-midstride coordinates have been calculated; now we
; consider his post-midstride animatory state.#IF({fix}<2)//
; Usually, a character's animatory state is incremented as he moves to or from
; the midstride position, which makes his walking animation cycle through
; phases 1, 2, 3 and 4. However, the next section of code - unlike its
; counterpart in the routine at #R31768, which moves ERIC's chaser to the
; midstride position - decrements the animatory state if the character is
; moving leftwards, and increments it if the character is moving rightwards. So
; when a character is moving leftwards while chasing ERIC, his walking
; animation will cycle through phases 1 and 2 only, or 3 and 4 only. This is a
; #BUG#oneTwoOneTwo(bug).//
@bfix=LD A,B         ; #REGa=character's current animatory state
 31756 LD A,(HL)     ; #REGa=x-coordinate increment (-1 or +1)
@bfix=INC A          ; Increment it (to move the character to the next walking
@bfix=               ; phase)
 31757 ADD A,B       ; Add this to the character's current animatory state
 31758 AND 3         ; {Now #REGc holds the new walking phase bits
 31760 LD C,A        ; }
 31761 LD A,B        ; #REGa=character's current animatory state
 31762 AND 252       ; Clear the walking phase bits (bits 0 and 1)
 31764 ADD A,C       ; Set the walking phase to 1 (#REGc=0) or 3 (#REGc=2)
 31765 JP 25008      ; Update the character's animatory state and location and
                     ; update the SRB

; Move a character looking for ERIC to the midstride position
;
; Continues from #R31648. Moves the character looking for ERIC to the midstride
; position in the appropriate direction.
;
; A 1 if the character's going upstairs, 2 if going down
; BC #w0
; DE #w0
; H Number of the character looking for ERIC (#b161, #b163-#b166)
; L #b96
;
; The main entry point is used when the character is on a staircase.
@label=FINDERIC2
c31768 INC B         ; #REGb=1
 31769 DEC A         ; Is the chaser going downstairs?
 31770 JR NZ,31774   ; Jump if so
 31772 DEC B         ; #REGb=0
 31773 DEC D         ; #REGd=-1
*31774 INC C         ; #REGc=1
 31775 BIT 7,(HL)    ; Is the chaser facing right?
 31777 JR NZ,31781   ; Jump if so
 31779 DEC C         ; {#REGc=-1
 31780 DEC C         ; }
; This entry point is used by the routine at #R31648 when the character looking
; for ERIC is not on a staircase; in this case #REGb=#REGd=#REGe=0, and
; #REGc=-1 if the chaser is to ERIC's left, or 1 if he is to ERIC's right.
*31781 LD L,107      ; {#REGc=-1 if the chaser is to ERIC's left, or 1 if to
 31783 LD (HL),C     ; his right; #REGb=1 if the chaser is going downstairs, 0
 31784 INC L         ; otherwise; place these values into bytes #b107 and #b108
 31785 LD (HL),B     ; of the chaser's buffer}
 31786 LD L,105      ; {Change the interruptible subcommand routine address in
@ssub=LD (HL),31739%256
 31788 LD (HL),251   ; bytes #b105 and #b106 of the chaser's buffer from
                     ; #R31648 to #R31739
@rsub+begin
       INC L
       LD (HL),31739/256
@rsub+end
                     ; }
 31790 PUSH DE       ; Save the x- and y-coordinate increments for the chaser's
                     ; next move
 31791 CALL 25108    ; Update the SRB for the chaser's current location
 31794 INC A         ; #REGa=chaser's next animatory state (midstride)
 31795 LD L,A        ; Store this in #REGl briefly
 31796 POP BC        ; Get the appropriate y- and x-coordinate increments for
                     ; the chaser's move to the midstride position in #REGbc
 31797 LD A,B        ; {Get the chaser's new y-coordinate in #REGd (which is
 31798 ADD A,D       ; the same as his current y-coordinate unless he's going
 31799 LD D,A        ; up a staircase)}
 31800 LD A,C        ; {Get the chaser's new x-coordinate in #REGe (which is
 31801 ADD A,E       ; the same as his current x-coordinate, because #REGc is
 31802 LD E,A        ; always 0)}
 31803 LD A,L        ; Restore the chaser's new animatory state to #REGa
 31804 JP 25008      ; Update the chaser's animatory state and location and
                     ; update the SRB

; Restart the command list unless it's time to start the lesson
;
; Used by the teachers' command lists #R64384(#b128), #R64410(#b130),
; #R64436(#b132), #R64458(#b134) and #R64857(#b184). Restarts the teacher's
; command list if it's not time to start the class (or the dinner period) yet;
; otherwise moves to the next command in the command list.
;
; H Teacher's character number (#b163-#b166)
@label=CHKTIME
@ssub=LD A,(32759+1)
c31807 LD A,(32760)  ; Pick up the MSB of the lesson clock (#b0-#b21)
 31810 CP 15         ; Is it time to start dinner or the lesson?
 31812 JP C,25256    ; Move to the next command in the command list if so;
                     ; otherwise continue into #R31815 (restart command list)

; Restart the command list
;
; Used by command lists #R64841(#b182), #R64883(#b190), #R64892(#b192),
; #R64988(#b194), #R64914(#b196), #R64947(#b204) and #R64975(#b206).
;
; H Character number (#b152-#b169)
@label=RESTART
@rfix-begin
c31815 LD A,(32761)  ; Pick up the current lesson number (#b0-#b63) from
                     ; #R32761
 31818 LD E,A        ; Copy this to #REGe
 31819 LD B,1        ; We want to restart the command list for this character
                     ; only
@ssub=LD D,65024/256
 31821 LD D,254      ; {Set #REGe to the lesson identifier (#b224-#b255) from
 31823 LD A,(DE)     ; the #R65024(main timetable); note that this will not be
 31824 LD E,A        ; the identifier of the current lesson if the current
                     ; lesson is a 'special' playtime - #LESSON243, #LESSON244
                     ; or #LESSON245 - which is a #BUG#wrongCommandList(bug)}
@bfix=NOP            ;
@bfix=SET 0,(HL)     ; Set this character's command list up for a restart
@bfix=               ; (without replacing the command list start address in the
@bfix=               ; character's buffer, thus circumventing the bug mentioned
@bfix=               ; above)
 31825 CALL 26395    ; Set this character's command list up for a restart
@rfix+else
; L #b122
c31815 SET 0,(HL)    ; Set this character's command list up for a restart
@rfix+end
 31828 JP 25252      ; Move to the first command in the command list

@rsub-begin
; Unused
s31831 DEFS 3
@rsub-end

; Place a continual subcommand routine address into a character's buffer
;
; Used by command lists #R64496(#b140), #R64516(#b142), #R64560(#b148),
; #R64587(#b150), #R64631(#b156), #R64658(#b158), #R64702(#b164),
; #R64729(#b166), #R64769(#b172), #R64785(#b174), #R64809(#b178),
; #R64825(#b180), #R64841(#b182), #R64892(#b192), #R64988(#b194),
; #R64288(#b214), #R64314(#b216), #R64341(#b218) and #R64255(#b220). Collects a
; continual subcommand routine address from a command list and places it into
; bytes #b124 and #b125 of the character's buffer. The routine address will be
; one of the following:
; .
; #TABLE(default,centre)
; { =h Address | =h Description }
; { #R28446    | #D28446 }
; { #R28672    | #D28672 }
; { #R32234    | #D32234 }
; { #R64042    | #D64042 }
; TABLE#
;
; H Character number (#b152-#b169)
@rsub-begin
@label=ADDR2BUF
c31834 NOP           ;
 31835 NOP           ;
 31836 NOP           ;
 31837 NOP           ;
@rsub-end
@label=ADDR2CBUF
@rsub-begin
 31838 LD L,124      ; {Collect the address of the continual subcommand routine
@rsub+else
c31838 LD L,124      ; {Collect the address of the continual subcommand routine
@rsub+end
 31840 CALL 24972    ; from the command list and place it into bytes #b124 and
 31843 LD (HL),A     ; #b125 of the character's buffer
 31844 INC L         ;
 31845 CALL 24972    ;
 31848 LD (HL),A     ; }
 31849 JP 25226      ; Move to the next command in the command list

@rsub-begin
; Unused
s31852 DEFS 2
@rsub-end

; Make a teacher perform dinner duty (1)
;
; Used by command list #R64857(#b184). Makes the teacher on dinner duty pace up
; and down the dinner hall, checking whether ERIC is present. If ERIC is
; absent, the teacher is sent to find him, after which the command list is
; restarted.
;
; H #b163 (MR WACKER) or #b165 (MR WITHIT)
@label=DINDUTY
c31854 LD DE,32712   ; {Set bit 7 at #R32712, indicating that dinner has
 31857 EX DE,HL      ; started (and so ERIC should be in the dinner hall)
 31858 SET 7,(HL)    ;
 31860 EX DE,HL      ; }
; This entry point is used on subsequent calls when the teacher on dinner duty
; has reached the right end of the dinner hall.
@label=ONDUTY
 31861 CALL 31188    ; Set the zero flag if ERIC is where he should be
@rem=31895 first so skool2asm spots it; no brackets so pasmo is OK with it
@ssub=LD DE,31895%256*256+33
 31864 LD DE,38689   ; #REGd=#b151 (LSB of #R31895), #REGe=33 (x-coordinate of
                     ; the left end of the teacher's dinner duty orbit)
; This entry point is used by the routine at #R31895 with #REGd=#b117 (LSB of
; the entry point at #R31861, above) and #REGe=62 (x-coordinate of the right
; end of the teacher's dinner duty orbit), and also by the routine at #R62208
; with the zero flag reset.
*31867 LD L,105      ;
 31869 JR Z,31879    ; Jump if ERIC is where he should be
@ssub=LD (HL),31648%256
 31871 LD (HL),160   ; {Place the address of the interruptible subcommand
 31873 INC L         ; routine at #R31648 into bytes #b105 and #b106 of the
@ssub=LD (HL),31648/256
 31874 LD (HL),123   ; character's buffer}
 31876 JP 31648      ; And jump to that routine now
; ERIC is where he should be, so there's no need to chase him.
@ssub=LD (HL),25404%256
*31879 LD (HL),60    ; {Place the address of the interruptible subcommand
 31881 INC L         ; routine at #R25404 into bytes #b105 and #b106 of the
@ssub=LD (HL),25404/256
 31882 LD (HL),99    ; teacher's buffer}
 31884 INC L         ; {Place 33 or 62 into byte #b107 of the teacher's buffer
 31885 LD (HL),E     ; (to make him go to that x-coordinate next)}
 31886 INC L         ; {Place 0 into byte #b108 of the teacher's buffer, giving
 31887 LD (HL),0     ; him more than enough time to reach the other end of the
                     ; dinner hall without interruption}
 31889 LD L,99       ; {Replace the address of this primary command routine in
 31891 LD (HL),D     ; bytes #b99 and #b100 of the teacher's buffer with that
                     ; of #R31895 or #R31861
@rsub+begin
       INC L
       LD (HL),31861/256
       LD A,E
       CP 62
       JR Z,31892
       LD (HL),31895/256
@rsub+end
                     ; }
@rsub+begin
@label=DINSTEP
@rsub+end
 31892 JP 25404      ; Proceed to the other end of the dinner hall

; Make a teacher perform dinner duty (2)
;
; The address of this primary command routine is placed into bytes #b99 and
; #b100 of the teacher's buffer by the routine at #R31854. The teacher has
; walked to the left end of the dinner hall, so it's time to check whether
; ERIC is present.
@label=DDUTY2
c31895 CALL 31188    ; Set the zero flag if ERIC is in the dinner hall
@rem=31861 first so skool2asm spots it; no brackets so pasmo is OK with it
@ssub=LD DE,31861%256*256+62
@keep=30014
 31898 LD DE,30014   ; #REGd=#b117 (LSB of #R31861), #REGe=62 (x-coordinate of
                     ; the right end of the teacher's dinner duty orbit)
 31901 JR 31867      ; Go and look for ERIC, or go to the right end of the
                     ; dinner hall

@rsub-begin
; Unused
s31903 DEFB 0
@rsub-end

; Make a teacher give lines to EINSTEIN for telling tales
;
; Continues from the routine at #R31968.
;
; H Teacher's character number (#b163-#b166)
@label=CLSLINES
c31904 LD A,169      ; #b169=EINSTEIN
 31906 LD B,9        ; Lines reprimand #R56736(#b9): DON'T TELL TALES
; This entry point is used by the routine at #R62208 with #REGa=#b172 (ERIC)
; and #REGb=#R56704(#b8) (NOW DON'T DO IT AGAIN), #R56768(#b10) (NEVER BE LATE
; AGAIN), #R56800(#b11) (AND STAY THIS TIME) or #R56960(#b12) (DON'T TOUCH
; BLACKBOARDS).
*31908 LD L,97       ; Bytes #b97 and #b98 of the teacher's buffer hold his
                     ; coordinates
 31910 PUSH HL       ; Save the teacher's character number briefly
 31911 LD D,(HL)     ; {Collect the teacher's coordinates in #REGde
 31912 INC L         ;
 31913 LD E,(HL)     ; }
 31914 CALL 30464    ; Make the teacher give lines
 31917 POP HL        ; Restore the teacher's character number to #REGh
 31918 RET           ;

; Make EINSTEIN speak
;
; Used by the routine at #R62208. Copies the message address into bytes #b107
; and #b108 of EINSTEIN's buffer, and then signals that it's his turn to speak.
;
; BC Message address
; H Teacher's character number (#b163-#b166)
@label=SWOTSPK
@ssub=LD DE,43360+11
c31919 LD DE,43371   ; {Point #REGhl at byte #b107 of EINSTEIN's buffer
 31922 EX DE,HL      ; }
 31923 LD (HL),C     ; {Copy the message address in #REGbc into bytes #b107 and
 31924 INC L         ; #b108 of EINSTEIN's buffer
 31925 LD (HL),B     ; }
; This entry point is used by the routine at #R62464.
*31926 LD HL,32713   ; #R32713 holds the lesson signal flags
 31929 SET 7,(HL)    ; Signal (to the routine at #R31162) that it's EINSTEIN's
                     ; turn to speak
 31931 EX DE,HL      ;
 31932 LD L,106      ; {Place the address of the interruptible subcommand
@ssub=LD (HL),31944/256
 31934 LD (HL),124   ; routine at #R31944 into bytes #b105 and #b106 of the
 31936 DEC L         ; teacher's buffer
@ssub=LD (HL),31944%256
 31937 LD (HL),200   ; }
 31939 POP DE        ; {Collect the return address in #REGde and copy it to
 31940 LD L,99       ; bytes #b99 and #b100 of the teacher's buffer (so that
 31942 LD (HL),E     ; control will resume there when #R31944 relinquishes it)
@rsub+begin
       INC L
       LD (HL),D
@rsub+end
                     ; }
 31943 RET           ; Return to the main loop

; Make a teacher wait for EINSTEIN to finish speaking
;
; The address of this interruptible subcommand routine is placed into bytes
; #b105 and #b106 of a teacher's buffer by the routine at #R31919.
;
; H Teacher's character number (#b163-#b166)
@label=SWOTSPK2
c31944 LD A,(32713)  ; #R32713 holds the lesson signal flags
 31947 RLCA          ; Is EINSTEIN still speaking?
 31948 RET C         ; Return if so
 31949 JP 25252      ; Terminate this interruptible subcommand

; Check whether ERIC and EINSTEIN are in class
;
; Used by the routines at #R62208 and #R62464. If EINSTEIN is in class, this
; routine returns to the caller with the zero flag set if and only if ERIC is
; present too. If EINSTEIN is not yet sitting down in class, it makes the
; teacher wait until he shows up.
;
; H Teacher's character number (#b163-#b166)
@label=SWOTWAIT
c31952 LD A,(43360)  ; #REGa=EINSTEIN's animatory state
 31955 CP 21         ; #AS21=EINSTEIN sitting in a chair
 31957 JP Z,31188    ; Jump if EINSTEIN is sitting in a chair
 31960 POP DE        ; {Place the address of the instruction that called this
 31961 LD L,99       ; routine into bytes #b99 and #b100 of the teacher's
 31963 LD A,E        ; buffer, so that control of the teacher remains in this
 31964 SUB 3         ; routine until EINSTEIN is seated
 31966 LD (HL),A     ;
@rsub+begin
       RET NC
       DEC D
       INC L
       LD (HL),D
@rsub+end
                     ; }
 31967 RET           ;

; Make a teacher decide whether to give EINSTEIN lines for telling tales
;
; Used by the routine at #R62208.
;
; H Teacher's character number (#b163-#b166)
@label=SWOTLINES
c31968 LD A,H        ; {#REGl=#b0 (MR WACKER), #b16 (MR ROCKITT), #b32 (MR
 31969 SUB 163       ; WITHIT), or #b48 (MR CREAK)
 31971 ADD A,A       ;
 31972 ADD A,A       ;
 31973 ADD A,A       ;
 31974 ADD A,A       ;
 31975 LD L,A        ; }
; The number in #REGl determines how often the teacher will give lines to
; EINSTEIN for telling tales:
; .
; #TABLE(default)
; { =h Teacher | =h Frequency }
; { MR WACKER  | Never }
; { MR ROCKITT | 1 in 16 }
; { MR WITHIT  | 1 in 8 }
; { MR CREAK   | 3 in 16 }
; TABLE#
 31976 CALL 24993    ; #REGa=random number
 31979 CP L          ; Set the carry flag if the teacher is going to give lines
                     ; to EINSTEIN
 31980 LD L,255      ; {Return with #REGl=#b255 if the teacher's not in the
 31982 RET NC        ; mood to give lines to EINSTEIN}
 31983 JR 31904      ; Make the teacher give EINSTEIN lines for telling tales

; Call an interruptible subcommand
;
; Used by the routines at #R31996, #R32048, #R32158, #R62208 and #R62464. Drops
; the return address from the stack and copies its LSB into byte #b99 of the
; character's buffer (where the LSB of the address of the primary command
; routine is held), copies the address of the interruptible subcommand routine
; from #REGbc into bytes #b106 and #b107 of the character's buffer, and then
; jumps to that routine.
;
; BC Interruptible subcommand routine address
; H Character number (#b152-#b169)
@label=CALLSUBCMD
c31985 LD L,106      ; {Copy the routine address from #REGbc into bytes #b105
 31987 LD (HL),B     ; and #b106 of the character's buffer
 31988 DEC L         ;
 31989 LD (HL),C     ; }
 31990 POP DE        ; {Drop the return address off the stack and place its LSB
 31991 LD L,99       ; into byte #b99 of the character's buffer; this ensures
 31993 LD (HL),E     ; that when the interruptible subcommand has finished,
                     ; control resumes in the caller of this routine
@rsub+begin
       INC L
       LD (HL),D
@rsub+end
                     ; }
 31994 PUSH BC       ; {Make an indirect jump to the routine address in #REGbc
 31995 RET           ; }

; Make a teacher tell the kids to go to a certain page in their books
;
; Used by the routines at #R32048 and #R62208. Makes the teacher tell the kids
; to turn to or answer the questions on a randomly chosen page of their books.
;
; H Teacher's character number (#b163-#b166)
@label=GOTOPAGE
c31996 LD DE,62063   ; {#REGbc=#R62050 (TURN TO PAGE 123 OF YOUR BOOKS...);
                     ; #REGde=#R62063 (the '123' in this message)
@rsub-begin
@ssub=LD C,62050%256
 31999 LD C,98
 32001 LD B,D
@rsub+else
       LD BC,62050
@rsub+end
                     ; }
 32002 CALL 24993    ; #REGa=random number
 32005 RLCA          ; {This jump (which decides between the message at #R62050
 32006 JR C,32012    ; and the message at #R62109) is performed half the time}
@ssub=LD E,62138%256
@rsub=LD DE,62138
 32008 LD E,186      ; {#REGbc=#R62109 (ANSWER THE QUESTIONS ON PAGE 123 OF
@ssub=LD C,62109%256
@rsub=LD BC,62109
 32010 LD C,157      ; YOUR LOVELY TEXTBOOK); #REGde=#R62138 (the '123' in this
                     ; message)}
*32012 SCF           ; {#REGa=128-255 (random page number to insert into the
 32013 RRA           ; message)}
@rsub-begin
 32014 NOP           ;
@rsub-end
 32015 EX DE,HL      ; Point #REGhl at the slot for the 100s digit of the page
                     ; number in the message
 32016 LD (HL),47    ; {Compute and insert the ASCII code for the 100s digit of
*32018 INC (HL)      ; the page number
 32019 SUB 100       ;
 32021 JR NC,32018   ; }
 32023 INC L         ; Point #REGhl at the slot for the 10s digit of the page
                     ; number
 32024 ADD A,100     ; Compensate for the trial subtraction of 100 above
 32026 LD (HL),47    ; {Compute and insert the ASCII code for the 10s digit of
*32028 INC (HL)      ; the page number
 32029 SUB 10        ;
 32031 JR NC,32028   ; }
 32033 INC L         ; Point #REGhl at the slot for the units digit of the page
                     ; number
 32034 ADD A,58      ; Compensate for the trial subtraction of ten above, and
                     ; add an extra #b48 (the ASCII code for '0')
 32036 LD (HL),A     ; Insert the ASCII code for the units digit of the page
                     ; number
 32037 EX DE,HL      ; Restore the teacher's character number to #REGh
; This entry point is used by the routines at #R32048, #R32132, #R62208,
; #R63456, #R63488 and #R63990.
*32038 LD L,108      ; {Place the address of the message into bytes #b107 and
 32040 LD (HL),B     ; #b108 of the character's buffer
 32041 DEC L         ;
 32042 LD (HL),C     ; }
@nowarn
 32043 LD BC,31110   ; {Place the address of the interruptible subcommand
 32046 JR 31985      ; routine at #R31110 (make character speak) into bytes
                     ; #b105 and #b106 of the character's buffer and jump to
                     ; it}

; Make a teacher conduct a class without ERIC
;
; Used by the routine at #R32178. Makes the teacher wipe the board (if there is
; one), tell the kids what to do, and then walk up and down until the end of
; the lesson.
;
; H Teacher's character number (#b163-#b166)
@label=CLSNOERIC
c32048 CALL 28968    ; #REGa=identifier of the blackboard the teacher is next
                     ; to
 32051 LD C,A        ; Copy this to #REGc
 32052 CP 236        ; Is the teacher on the top floor?
 32054 JR NZ,32062   ; Jump if not
 32056 INC L         ; #REGl=#b98
 32057 LD A,(HL)     ; #REGa=teacher's x-coordinate
 32058 CP 58         ; Is the teacher in the Map Room?
 32060 JR NC,32112   ; Jump if so (there's no blackboard in the Map Room)
@nowarn
*32062 LD BC,29148   ; {Hand over control to the routine at #R29148, making the
 32065 CALL 31985    ; teacher wipe the blackboard}
; Control returns here when the teacher has finished wiping the blackboard.
 32068 LD L,98       ; {#REGa=teacher's x-coordinate (equal to that of the left
 32070 LD A,(HL)     ; edge of the blackboard)}
 32071 ADD A,3       ; {Place the x-coordinate of the middle of the blackboard
 32073 LD L,107      ; into byte #b107 of the teacher's buffer, and the same
 32075 LD (HL),A     ; value into byte #b108 (which ensures that the routine at
 32076 INC L         ; #R25404 will not relinquish control before the teacher
 32077 LD (HL),A     ; has reached the middle of the blackboard)}
@nowarn
 32078 LD BC,25404   ; {Hand over control to the routine at #R25404, making the
 32081 CALL 31985    ; teacher walk to the middle of the blackboard}
; Control returns here when the teacher has reached the middle of the
; blackboard.
 32084 CALL 24993    ; #REGa=random number
 32087 CP 160        ; Should the teacher write on the blackboard?
 32089 JR C,32112    ; Jump if not
@nowarn
 32091 LD BC,29284   ; {Hand over control to the routine at #R29284, making the
 32094 CALL 31985    ; teacher write on the blackboard}
; Control returns here when the teacher has finished writing on the blackboard.
 32097 CALL 24993    ; #REGa=random number
 32100 CP 160        ; Should the teacher tell the kids to write an essay?
 32102 JR C,32112    ; Jump if not
 32104 LD BC,62166   ; #R62166: 'WRITE AN ESSAY WITH THIS TITLE'
 32107 CALL 32038    ; Make the teacher tell the kids to write an essay
 32110 JR 32115      ;
*32112 CALL 31996    ; Make the teacher tell the kids to go to a page in their
                     ; books
; Now we enter a loop that makes the teacher walk up and down next to the
; blackboard (or the map).
*32115 LD L,98       ; {#REGa=teacher's x-coordinate
 32117 LD A,(HL)     ; }
 32118 XOR 3         ; {Store the x-coordinate of the location 1 or 3 spaces
 32120 LD L,107      ; behind the teacher in byte #b107 of his buffer
 32122 LD (HL),A     ; }
@nowarn
 32123 LD BC,25404   ; {Hand over control to the routine at #R25404, making the
 32126 CALL 31985    ; teacher turn round and walk 1 or 3 paces}
 32129 JR 32115      ; Make the teacher turn round and walk 1 or 3 paces again

@rsub-begin
; Unused
s32131 DEFB 0
@rsub-end

; Make a teacher tell the kids to sit down
;
; Used by the teachers' command lists #R64384(#b128), #R64410(#b130),
; #R64436(#b132) and #R64458(#b134). Makes the teacher tell the kids to sit
; down; also makes MR CREAK reveal his safe combination letter if he can see
; his year of birth written on the board.
;
; H Teacher's character number (#b163-#b166)
@label=TELLSIT
c32132 CALL 63191    ; Make MR CREAK reveal his safe combination letter if
                     ; appropriate; also set #REGbc=#R61889 (SILENCE! OR I'LL
                     ; CANE THE LOT OF YOU)
 32135 LD A,H        ; #REGa=teacher's character number (#b163-#b166)
 32136 SUB 163       ; Is it MR WACKER?
 32138 JR Z,32152    ; Jump if so
@ssub=LD C,61785%256
@rsub=LD BC,61785
 32140 LD C,89       ; #REGbc=#R61785 (RIGHT! SIT DOWN MY LITTLE CHERUBS)
 32142 DEC A         ; Is it MR ROCKITT?
 32143 JR Z,32152    ; Jump if so
@ssub=LD C,61819%256
@rsub=LD BC,61819
 32145 LD C,123      ; #REGbc=#R61819 (COME ON CHAPS - SETTLE DOWN)
 32147 DEC A         ; Is it MR WITHIT?
 32148 JR Z,32152    ; Jump if so
@ssub=LD C,61847%256
@rsub=LD BC,61847
 32150 LD C,151      ; It must be MR CREAK; set #REGbc=#R61847 (BE QUIET AND
                     ; SEATED YOU NASTY LITTLE BOYS)
*32152 CALL 32038    ; Make the teacher speak
 32155 JP 25256      ; Move to the next command in the command list

; Make BOY WANDER write on a blackboard
;
; Used by command list #R64892(#b192), and also by the routine at #R32167.
;
; H #b167 (BOY WANDER)
@label=BWWRITECLN
@nowarn
c32158 LD BC,29284   ; {Hand over control to the routine at #R29284, making BOY
 32161 CALL 31985    ; WANDER write on the board (if it's clean)}
 32164 JP 25256      ; When he's finished, move to the next command in the
                     ; command list

; Make BOY WANDER write on a blackboard if the teacher hasn't arrived yet
;
; Used by BOY WANDER's command lists #R64560(#b148), #R64631(#b156) and
; #R64702(#b164).
;
; H #b167 (BOY WANDER)
@label=BWWRITE
c32167 CALL 24972    ; Get the event ID (#b9, #b10 or #b11) from the command
                     ; list
 32170 CALL 25374    ; Has the teacher arrived yet?
 32173 JR Z,32158    ; Jump if not
 32175 JP 25256      ; Otherwise move to the next command in the command list

; Make a teacher conduct a class
;
; Used by the teachers' command lists #R64384(#b128), #R64410(#b130),
; #R64436(#b132) and #R64458(#b134). Determines whether the teacher is
; conducting ERIC's class, and hands over to #R62208 if so or #R32048 if not.
;
; H Teacher's character number (#b163-#b166)
@label=DOCLASS
c32178 LD A,(32756)  ; Pick up the lesson descriptor from #R32756
 32181 AND 240       ; Keep only the 'teacher' bits (4-7)
 32183 RLCA          ; {#REGa=character number of the teacher (#b163-#b166)
 32184 RLCA          ; who is teaching ERIC and EINSTEIN this period
 32185 RLCA          ;
 32186 RLCA          ;
 32187 ADD A,163     ; }
 32189 CP H          ; Set the zero flag if this teacher is teaching ERIC
 32190 LD L,99       ;
 32192 JR Z,32199    ; Jump if we're dealing with ERIC's teacher
@ssub=LD (HL),32048%256
 32194 LD (HL),48    ; {Replace the address of this routine in bytes #b99 and
@rsub+begin
       INC L
       LD (HL),32048/256
@rsub+end
 32196 JP 32048      ; #b100 of the teacher's buffer with #R32048, and jump
                     ; there now to start the lesson}
; This teacher has the pleasure of conducting ERIC's class this period.
@ssub=LD (HL),62208%256
*32199 LD (HL),0     ; {Replace the address of this routine in bytes #b99 and
 32201 INC L         ; #b100 of the teacher's buffer with that of #R62208
@ssub=LD (HL),62208/256
 32202 LD (HL),243   ; }
 32204 LD A,0        ; {Clear all the lesson status flags at #R32712
 32206 LD (32712),A  ; }
 32209 JP 62208      ; Start the lesson

@rsub-begin
; Unused
u32212 DEFB 120,120,120,120
@rsub-end

; Insert a pixel column into the top or bottom half of the speech bubble text
; window
;
; Used by the routine at #R29442. Slides the current contents of the top or
; bottom half of the speech bubble text window one pixel to the left, and
; places the new pixel column (4 pixels high) into the slot freed up on the
; right.
;
; A Pixel column byte
; HL Display file address
@label=SLIDETXT
c32216 LD B,4        ; There are four pixel rows to slide left
*32218 PUSH BC       ; Save the pixel row counter
 32219 LD C,L        ; Save #REGl in #REGc briefly
 32220 LD B,6        ; The text window is six bytes wide
 32222 RLCA          ; Push a pixel into the carry flag
*32223 RL (HL)       ; {Slide this pixel into a row of the text window
 32225 DEC HL        ;
 32226 DJNZ 32223    ; }
 32228 LD L,C        ; Restore #REGl
 32229 POP BC        ; Restore the pixel row counter to #REGb
 32230 INC H         ; Move to the next row of pixels
 32231 DJNZ 32218    ; Jump back until all four rows of pixels have been done
 32233 RET           ;

; Make a character walk fast
;
; The address of this continual subcommand routine is placed into bytes #b124
; and #b125 of a character's buffer by command lists #R64288(#b214) and
; #R64341(#b218). This routine is also used directly by the routines at
; #R31648, #R63374 and #R64042.
;
; H Character number (#b152-#b169)
@label=RUN
c32234 LD L,123      ; {Set the speed change delay counter in byte #b123 of the
 32236 LD (HL),4     ; character's buffer to 4, preventing any speed change by
                     ; the routine at #R25266}
 32238 DEC L         ; {Reset bit 7 of byte #b122 of the character's buffer,
 32239 RES 7,(HL)    ; indicating that he is walking fast}
 32241 RET           ;

; Make a character speak at the correct speed
;
; Used by the routine at #R31130. Prevents a character from speaking too fast.
;
; H Character number (#b152-#b169)
@label=SLOW
c32242 LD L,123      ; {Set the speed change delay counter in byte #b123 of the
 32244 LD (HL),4     ; character's buffer to 4, preventing any speed change by
                     ; the routine at #R25266}
 32246 DEC L         ; {Set bit 7 of byte #b122 of the character's buffer,
 32247 SET 7,(HL)    ; indicating that he is moving slowly}
 32249 RET           ;

; Exit demo mode
;
; Used by the routine at #R62938. Removes the speech bubble and exits demo
; mode.
@label=EXITDEMO
c32250 CALL 32470    ; Remove the speech bubble (if present)
 32253 JP 26906      ; Exit demo mode and offer to change the characters' names

@rsub-begin
; Unused
;
; Probably remnants of a routine similar to #R32470.
u32256 AND A         ; Is anyone speaking at the moment?
 32257 CALL NZ,29746 ; Remove the speech bubble if so
 32260 JP 26906      ; Exit demo mode
@rsub-end

; Note duration and pitch data for tunes
;
; Used by the routine at #R32279.
@label=PITCHDATA
b32263 DEFB 47,196 ; #b47*#b196=#w9212
 32265 DEFB 53,174 ; #b53*#b174=#w9222
 32267 DEFB 60,154 ; #b60*#b154=#w9240
 32269 DEFB 63,145 ; #b63*#b145=#w9135
 32271 DEFB 71,129 ; #b71*#b129=#w9159
 32273 DEFB 80,114 ; #b80*#b114=#w9120
 32275 DEFB 90,101 ; #b90*#b101=#w9090 (unused)
 32277 DEFB 95,96  ; #b95*#b96=#w9120 (unused)

; Play a tune
;
; Used by the routines at #R32390, #R32400, #R32406 and #R32418.
;
; HL Base address of the tune data table
@label=PLAYTUNE
c32279 DI            ; Disable interrupts
*32280 LD A,(HL)     ; Pick up a tune datum in #REGa
 32281 INC HL        ; Point #REGhl at the next tune datum
 32282 AND A         ; Is the tune finished?
 32283 JR NZ,32290   ; Jump if not
 32285 INC A         ; {Make the border blue
 32286 OUT (254),A   ; }
 32288 EI            ; Re-enable interrupts
 32289 RET           ;
; A non-zero tune datum has been found, meaning the tune is not finished yet.
*32290 PUSH HL       ;
 32291 LD B,A        ; Copy the tune datum to #REGb
 32292 RRCA          ; Should we pause briefly (bit 0 set) here?
 32293 JR NC,32304   ; Jump if not
 32295 LD DE,3840    ; {Pause briefly (this happens for all but one note in the
*32298 DEC E         ; theme tune, and for all notes in the 'all shields/safe'
 32299 JR NZ,32298   ; tune)
 32301 DEC D         ;
 32302 JR NZ,32298   ; }
*32304 AND 7         ; 0<=#REGa<=7
 32306 LD C,A        ; #REGc=border colour for this note
 32307 ADD A,A       ; {Point #REGhl at the appropriate entry in the note
@ssub=ADD A,32263%256
 32308 ADD A,7       ; pitch/duration data table at #R32263
 32310 LD L,A        ;
@ssub=LD H,32263/256
 32311 LD H,126      ;
@rsub+begin
       JR NC,32313
       INC H
@rsub+end
                     ; }
@rsub+begin
@label=NOINC
@rsub+end
 32313 LD A,B        ; #REGa=original tune datum
 32314 RLCA          ; {Obtain the note frequency parameter in #REGe and the
 32315 RLCA          ; note duration parameter in #REGhl
 32316 RLCA          ;
 32317 RLCA          ;
 32318 AND 15        ;
 32320 LD B,A        ;
 32321 LD E,(HL)     ;
@rsub=INC HL
 32322 INC L         ;
 32323 LD A,(HL)     ;
 32324 LD HL,0       ;
*32327 ADD HL,DE     ;
 32328 DJNZ 32327    ;
 32330 RR H          ;
 32332 RR L          ;
 32334 LD E,A        ; }
*32335 LD A,C        ; {Produce a note
 32336 OUT (254),A   ;
 32338 XOR 16        ;
 32340 LD C,A        ;
 32341 LD B,E        ;
*32342 DJNZ 32342    ;
 32344 DEC HL        ;
 32345 LD A,H        ;
 32346 OR L          ;
 32347 JR NZ,32335   ; }
 32349 POP HL        ; Restore the pointer to the tune data table
 32350 JP 32280      ; Pick up the next tune datum

; Theme tune data
;
; Used by the routines at #R32390 and #R32400.
@label=THEMETUNE
b32353 DEFB 121,53,119,51,121,53,113
 32360 DEFB 49,115,53,70,53,51,121,53,177
 32369 DEFB 121,53,55,55,51,121,53,177
 32377 DEFB 51,51,53,55,53,51,121,53,177
 32386 DEFB 0                             ; End marker

@rsub-begin
; Unused
s32387 DEFS 3
@rsub-end

; Play the theme tune for the first time
;
; Used by the routine at #R26880 just after the game has loaded.
@label=PLAYTHEME0
c32390 LD HL,32353   ; The theme tune data is at #R32353
 32393 CALL 32279    ; Play the theme tune
 32396 LD HL,0       ; The high score is 0 when the game has just loaded
 32399 RET           ;

; Play the theme tune
;
; Used by the routine at #R63668.
@label=PLAYTHEME
c32400 LD HL,32353   ; The theme tune data is at #R32353
 32403 JP 32279      ; Play the theme tune

; Play the 'Got all shields/opened safe' tune
;
; Used by the routine at #R63668.
@label=WINTUNE
c32406 CALL 32418    ; Play the first part of the tune
 32409 CALL 32418    ; Play the first part of the tune again
 32412 LD HL,32446   ; The data for the second part of the tune is at #R32446
 32415 JP 32279      ; Play the second part of the tune

; Play the first part of the 'Got all shields/opened safe' tune
;
; Used by the routine at #R32406.
@label=WINTUNE0
c32418 LD HL,32434   ; The data for the first part of the tune is at #R32434
 32421 CALL 32279    ; Play the first part of the tune
 32424 LD DE,15360   ; {Pause briefly before returning
*32427 DEC E         ;
 32428 JR NZ,32427   ;
 32430 DEC D         ;
 32431 JR NZ,32427   ; }
 32433 RET           ;

; Data for the first part of the 'Got all shields/opened safe' tune
;
; Used by the routine at #R32418. The data for the second part of the tune can
; be found at #R32446.
@label=WINTUNEDATA1
b32434 DEFB 55,55,55,57,123,121
 32440 DEFB 55,59,57,57,183
 32445 DEFB 0 ; End marker

; Data for the second part of the 'Got all shields/opened safe' tune
;
; Used by the routine at #R32406. The data for the first part of the tune can
; be found at #R32434.
@label=WINTUNEDATA2
b32446 DEFB 57,57,57,57,115,115
 32452 DEFB 57,55,53,51,241
 32457 DEFB 55,55,55,57,123,121
 32463 DEFB 55,59,57,57,247
 32468 DEFB 0 ; End marker

@rsub-begin
; Unused
s32469 DEFB 0
@rsub-end

; Remove the speech bubble if present
;
; Used by the routines at #R26880 and #R32250. Returns with the high score in
; #REGhl.
@label=RMSPEECH
@ssub=LD A,(32612+1)
c32470 LD A,(32613)  ; #REGa=x-coordinate of the speech bubble lip (if present)
 32473 AND A         ; Is anyone speaking at the moment?
 32474 CALL NZ,29746 ; Remove the speech bubble if so
 32477 CALL 27026    ; Update the display
 32480 LD HL,(32706) ; Collect the high score from #R32706
 32483 RET           ;

@rsub-begin
; Save Skool Daze to tape
;
; This routine was used to save the high-speed block to tape.
@label=SD2TAPE
@keep
c32484 LD HL,24288   ; #R24288@start is where the game starts after loading
@keep
 32487 LD (23833),HL ; Store this address where it will be popped off the stack
                     ; by the #R32815@load(load routine)
 32490 LD BC,23      ; This parameter is used by the save routine
 32493 EXX           ;
@nowarn
 32494 JP 33024      ; Jump into the #R33024@save(save routine)

; Unused
u32497 DEFB 120,120,120,120,120,120,120,120,120,120,120,120,120,120,120
@rsub-end

@rfix+begin
; Wipe the blackboards
;
; Used by the routine at #R26880 to wipe the blackboards before entering demo
; mode or starting a new game.
@label=WIPEBRDS
@keep
c32497 LD DE,39722    ; The Reading Room blackboard is at
                      ; (#REGe,#REGd)=(42,155)
       CALL 32498     ; Wipe the Reading Room blackboard
@keep
       LD DE,41242    ; The White Room blackboard is at (#REGe,#REGd)=(26,161)
       CALL 32498     ; Wipe the White Room blackboard
       LD E,41        ; The Exam Room blackboard is at (#REGe,#REGd)=(41,161)
@label=WIPEBRD
 32498 LD B,8         ; Blackboards are 8 tiles wide
@label=WIPELOOP
 32499 LD H,136       ; {Set #REGh to the base page of the graphic data for
       BIT 5,E        ; this blackboard tile: #b128 if its x-coordinate is <
       JR NZ,32500    ; 32, or #b136 if its x-coordinate is >= 32
       LD H,128       ; }
@label=TILEX32
 32500 CALL 32501     ; Wipe a tile on the top row of the blackboard
       INC D          ; Point #REGde at the lower tile
       CALL 32501     ; Wipe a tile on the bottom row of the blackboard
       DEC D          ; Point #REGde at the upper tile again
       INC E          ; Next tile along
       DJNZ 32499     ; Jump back until all 8 columns of the blackboard have
                      ; been wiped
       RET            ;
@label=WIPETILE
 32501 PUSH HL        ;
       LD A,(DE)      ; Collect the UDG reference for this blackboard tile
       LD L,A         ; Set #REGhl to the base address of the tile's graphic
                      ; data
       LD C,8         ; There are 8 graphic bytes in a tile
@label=TILELOOP
 32502 LD (HL),255    ; {Set the graphic bytes for the blackboard tile to #b255
       INC H          ; (clean)
       DEC C          ;
       JR NZ,32502    ; }
       POP HL         ;
       RET            ;
@rfix+end

@org
; x-coordinate of the leftmost column of the skool on screen
;
; Modified by the routines at #R24576 and #R24731.
@label=LEFTCOL
g32512 DEFB 0

; UDG back buffer
;
; Used by the routine at #R24843.
@label=BACKBUF
g32513 DEFS 8

; Number of on-screen character squares that need refreshing (unused)
@rsub-begin
;
; Used by the (unused) routine at #R25830.
@rsub-end
@label=XTILES
g32521 DEFB 0

; Unused
@label=XTILELOCS
g32522 DEFS 2

; Screen refresh buffer (SRB)
;
; Used by the routines at #R27008, #R27026, #R28807, #R29394 and #R29735. Each
; byte of the SRB corresponds to a segment of 8 character squares on the
; screen, the leftmost of which will be at x=0, x=8, x=16 or x=24. Each bit set
; in an SRB byte corresponds to a character square in the segment that needs
; refreshing. Bit 0 corresponds to the leftmost character square in the
; segment, bit 7 to the rightmost character square.
@label=SRB
g32524 DEFS 84

; Unused
@label=UGSB1
g32608 DEFS 4

; Speech bubble lip coordinates
;
; Used by the routines at #R29518 and #R29746.
@label=LIPCOORDS
g32612 DEFS 2

; UDG references and attribute bytes of the part of the skool overwritten by
; the speech bubble and lip
;
; Used by the routines at #R29518 and #R29746.
@label=ULIPUDG
g32614 DEFB 0 ; The UDG reference of the skool tile under the speech bubble lip
              ; is stored here
@label=ULIPATTR
 32615 DEFB 0 ; The attribute byte of the skool tile under the speech bubble
              ; lip is stored here
@label=UTOPUDGS
 32616 DEFS 8 ; The UDG references of the skool tiles under the top row of the
              ; speech bubble are stored here
@label=UBOTUDGS
 32624 DEFS 8 ; The UDG references of the skool tiles under the bottom row of
              ; the speech bubble are stored here
@label=UTOPATTR
 32632 DEFS 8 ; The attribute bytes of the skool tiles under the top row of the
              ; speech bubble are stored here
@label=UBOTATTR
 32640 DEFS 8 ; The attribute bytes of the skool tiles under the bottom row of
              ; the speech bubble are stored here

; Unused
@label=UGSB2
g32648 DEFS 4

; Workspace used to find the main kid closest to a teacher
;
; Used by the routine at #R30890.
@label=KIDDIST
g32652 DEFS 2 ; ERIC's normalised coordinates are calculated and stored here
@label=KIDDISTBW
 32654 DEFS 2 ; BOY WANDER's coordinates are stored here
@label=KIDDISTA
 32656 DEFS 2 ; ANGELFACE's coordinates are stored here
@label=KIDDISTE
 32658 DEFS 2 ; EINSTEIN's coordinates are stored here

; Unused
@label=UGSB3
g32660 DEFS 2

; Safe combination letter message
;
; Used by the routine at #R63829.
@label=LTRREVEAL
g32662 DEFB 0 ; The ASCII code of the safe combination letter to be revealed is
              ; placed here
 32663 DEFB 0 ; End marker

; Unused
@label=UGSB4
g32664 DEFS 2

; Identifier for CREAK's birth year battle
;
; Used by the routines at #R63573 and #R63779.
@label=BATTLEID
g32666 DEFB 0

; CREAK's year of birth
;
; Used by the routines at #R63191 and #R63573. Holds a copy of the battle-year
; message corresponding to CREAK's birth.
@label=CREAKYEAR
g32667 DEFS 4

; Safe combination code
;
; Used by the routines at #R63270 and #R63573. Holds the ASCII codes of the
; letters in the safe combination (in the right order). The teachers' safe
; combination letters are stored at #R32675.
@label=SAFECOMBO
g32671 DEFS 4

; Teachers' safe combination letters
;
; Used by the routines at #R63573 and #R63829. Holds the ASCII codes of the
; teachers' safe combination letters. The safe combination itself is stored at
; #R32671.
@label=TEACHLTRS
g32675 DEFB 0 ; MR WACKER's safe combination letter is stored here
 32676 DEFB 0 ; MR ROCKITT's safe combination letter is stored here
 32677 DEFB 0 ; MR WITHIT's safe combination letter is stored here
 32678 DEFB 0 ; MR CREAK's safe combination letter is stored here

; Unused
@label=UGSB5
g32679 DEFB 0

; Reading Room blackboard contents buffer
;
; Used by the routine at #R63270.
@label=RRBRDBUF
g32680 DEFS 4 ; Characters written by ERIC (see #R63146)
@label=RRBRDPOS
 32684 DEFB 0 ; Pixel coordinates for ERIC to write at (set to 1 by #R63056)

; Unused
@label=UGSB6
g32685 DEFB 0

; White Room blackboard contents buffer
;
; Used by the routine at #R63270.
@label=WRBRDBUF
g32686 DEFS 4 ; Characters written by ERIC (see #R63146)
@label=WRBRDPOS
 32690 DEFB 0 ; Pixel coordinates for ERIC to write at (set to 1 by #R63056)

; Unused
@label=UGSB7
g32691 DEFB 0

; Exam Room blackboard contents buffer
;
; Used by the routine at #R63270.
@label=ERBRDBUF
g32692 DEFS 4 ; Characters written by ERIC (see #R63146)
@label=ERBRDPOS
 32696 DEFB 0 ; Pixel coordinates for ERIC to write at (set to 1 by #R63056)

; Unused
@label=UGSB8
g32697 DEFS 8

; ERIC's stand-up delay counter
;
; Used by the routine at #R62938 while in demo mode.
@label=UPDELAY
g32705 DEFB 0

; Hi-score
;
; Used by the routines at #R27406 and #R32470.
@label=HISCORE
g32706 DEFW 0

; Score
;
; Used by the routine at #R27387.
@label=SCORE
g32708 DEFW 0

; Lines total
;
; Used by the routines at #R30464 and #R63931.
@label=LINES
g32710 DEFW 0

; Lesson status flags
;
; Various status flags for the current lesson.
; .
; #TABLE(default,centre,:w)
; { =h Bit(s) | =h Meaning }
; { 0         | End of lesson/playtime (always reset) }
; { 1-3       | Unused }
; { 4         | Next lines reprimand for the teacher fetching the truant ERIC
;               (toggled by #R30636) }
; { 5         | Set after a teacher has found the truant ERIC (see #R30636) }
; { 6         | Set after a classroom lesson has started with ERIC present (see
;               #R62208) (checked by #R30636; reset by #R26342) }
; { 7         | Set after EINSTEIN has had a chance to grass on the absent ERIC
;               (see #R62208), or after dinner has started (see #R31854)
;               (checked by #R30636; reset by #R26342) }
; TABLE#
@label=LFLAGS
g32712 DEFB 0

; Lesson signal flags
;
; Bits 0-3 are used by the classroom-based #R65152(command lists) to indicate
; that or check whether a teacher has arrived at the classroom door to start
; the lesson.
; .
; #TABLE(default,centre,:w)
; { =h Bit(s) | =h Meaning if set }
; { 0         | Teacher has arrived at the Map Room }
; { 1         | Teacher has arrived at the Reading Room }
; { 2         | Teacher has arrived at the Exam Room }
; { 3         | Teacher has arrived at the White Room }
; { 4-6       | Unused }
; { 7         | EINSTEIN is speaking (set by #R31919; checked by #R31162 and
;               #R31944; reset by #R31178) }
; TABLE#
@label=LSIGS
g32713 DEFB 0

; Stampede signal flags
;
; These flags are set and reset by command list #R64947(#b204), and checked by
; command list #R64975(#b206).
; .
; #TABLE(default,centre)
; { =h Bit(s) | =h Meaning if set }
; { 0         | Little boy no. 1 is ready to stampede }
; { 1         | Little boy no. 1 is ready to stampede again }
; { 2-7       | Unused }
; TABLE#
@label=STAMPEDESIGS
g32714 DEFB 0

; Special playtime signal flags
;
; These flags are used during the special playtimes (when EINSTEIN is going to
; tell MR WACKER what ERIC's up to, BOY WANDER has hidden a pea-shooter on the
; fire escape, or ANGELFACE has mumps).
; .
; #TABLE(default,centre,:w)
; { =h Bit(s) | =h Meaning if set }
; { 0         | Little boy no. 10 is waiting for ERIC to respond to the message
;               just delivered (set and reset by #R63488; checked by #R63352) }
; { 1         | Unused }
; { =r2 2     | EINSTEIN is ready (set by command list #R64265(#b212); checked
;               by command list #R64230(#b208)) }
; {             BOY WANDER is ready (set and reset by command list
;               #R64314(#b216); checked by command lists #R64230(#b208) and
;               #R64341(#b218)) }
; { 3         | MR WACKER is ready (set by command lists #R64288(#b214) and
;               #R64341(#b218); checked by command list #R64230(#b208)) }
; { =r3 4     | Little boy no. 10 has told ERIC about EINSTEIN (set by command
;               list #R64230(#b208); checked by command list #R64265(#b212)) }
; {             Little boy no. 10 has told ERIC about BOY WANDER (set by
;               command list #R64230(#b208); checked by command list
;               #R64314(#b216)) }
; {             Little boy no. 10 has told ERIC about ANGELFACE (set by command
;               list #R64240(#b210); checked by command list #R64255(#b220)) }
; { =r2 5     | EINSTEIN has grassed on ERIC (set by command list
;               #R64265(#b212); checked by command list #R64288(#b214)) }
; {             ERIC has mumps (set by #R64042; checked by command list
;               #R64219(#b222)) }
; { 6-7       | Unused }
; TABLE#
@label=SPECIALSIGS
g32715 DEFB 0

; Unused
@label=UGSB9
g32716 DEFS 14

; Birth year question indicator
;
; Used by the routine at #R63779, and reset at the start of each lesson by the
; routine at #R26342. Holds 0 if MR CREAK has not yet asked the birth year
; question during the current lesson, or 1 otherwise.
@label=ASKED
g32730 DEFB 0

; Unused
@label=UGSB10
g32731 DEFS 13

; ERIC's main action timer
;
; Decremented by the main loop at #R26471; when it becomes zero, the keyboard
; is checked and ERIC is moved accordingly (see also #R25856, #R25916, #R25962
; and #R26880).
@label=ERICTIMER
g32744 DEFB 0

; ERIC's midstride/mid-action timer
;
; Zero unless ERIC is midstride or has his arm raised while writing on a board
; (see #R25916); if non-zero, the value is copied to the main action timer at
; #R32744 after ERIC has lowered his arm or moved from the midstride position
; (see #R25856).
@label=ERICTIMER2
g32745 DEFB 0

; Game mode indicator
;
; Used by the routine at #R28143.
; .
; #TABLE(default,centre)
; { =h Value | =h Meaning }
; { 0        | Demo mode }
; { 1        | Shields need to be flashed }
; { 2        | All shields flashing; ERIC needs to find the safe combination }
; { 3        | Shields need to be unflashed }
; TABLE#
@label=GAMEMODE
g32746 DEFB 0

; Shield counter
;
; Used by the routine at #R28143.
@label=SHIELDCNT
g32747 DEFB 0

; Next clean pixel column on the Reading Room blackboard
;
; Used by the routines at #R28994, #R29160 and #R63270.
@label=RRBRDPXL
g32748 DEFB 0

; Number of the character who last wrote on the Reading Room blackboard
;
; Used by the routines at #R29160, #R29284, #R63056 and #R64016. Holds 0 if the
; board is clean.
@label=RRBRDAUTH
g32749 DEFB 0

; Next clean pixel column on the White Room blackboard
;
; Used by the routines at #R28994, #R29160 and #R63270.
@label=WRBRDPXL
g32750 DEFB 0

; Number of the character who last wrote on the White Room blackboard
;
; Used by the routines at #R29160, #R29284, #R63056 and #R64016. Holds 0 if the
; board is clean.
@label=WRBRDAUTH
g32751 DEFB 0

; Next clean pixel column on the Exam Room blackboard
;
; Used by the routines at #R28994, #R29160 and #R63270.
@label=ERBRDPXL
g32752 DEFB 0

; Number of the character who last wrote on the Exam Room blackboard
;
; Used by the routines at #R29160, #R29284 and #R63056. Holds 0 if the board is
; clean.
@label=ERBRDAUTH
g32753 DEFB 0

; Lines-giving delay counter
;
; Used by the routine at #R30636.
@label=LINESDELAY
g32754 DEFB 0

; Character number of the teacher who last gave ERIC lines
;
; Used by the routine at #R30636.
@label=LASTLINES
g32755 DEFB 0

; Lesson descriptor
;
; Used by the routines at #R26342, #R30636, #R31040, #R31188 and #R32178. The
; room ID is stored in bits 0-3, and the teacher ID in bits 4-7. See the list
; of lesson descriptors at #R44256.
@label=LESSONDESC
g32756 DEFB 0

; ERIC's knockout delay counter
;
; Used by the routine at #R27303.
@label=KODELAY
g32757 DEFB 0

; Action timer for ERIC
;
; Used by the routines at #R62495, #R62628 and #R62771 to coordinate ERIC's
; movements while firing his catapult, hitting, or jumping.
@label=ACTIONCNT
g32758 DEFB 0

; Lesson clock
;
; Decremented in the main loop at #R26471. When it reaches 0, it is reset to
; #w5376 by the routine at #R26342. It is also checked by the routines at
; #R30636 and #R31807, and modified by the routines at #R26880, #R63456,
; #R63488, #R63668, #R63931 and #R64004.
@label=CLOCK
g32759 DEFW 0

; Current lesson number
;
; Used by the routines at #R26342 and #R31815. Holds the index (#b0-#b63) into
; the #R65024(main timetable). It is adjusted by the routine at #R26880 before
; starting a new game.
@label=LESSONNO
g32761 DEFB 0

; Last value seen in the system variable FRAMES
;
; Stores the value of the LSB of the system variable FRAMES as it stood at the
; end of the last pass through the main loop (see #R26471).
@label=LFRAMES
g32762 DEFB 0

; ERIC's status flags
;
; If ERIC is doing anything other than walking or standing still, one of the
; bits here will be set.
; .
; #TABLE(default,centre,:w,centre,:w)
; { =h Bit | =h Meaning if set                                         | =h Handler | =h Checked by }
; { 0      | ERIC is firing the catapult                               | #R62495    | #R27353 }
; { 1      | ERIC is hitting                                           | #R62628    | #R27353 }
; { 2      | ERIC is jumping                                           | #R62771    | #R27353, #R30636, #R30890, #R31229 }
; { 3      | ERIC is being spoken to by little boy no. 10              | #R63352    | #R27353 }
; { 4      | ERIC has just been knocked down or unseated               | #R27303    | #R27353 }
; { 5      | ERIC is writing on a blackboard                           | #R63146    | #R26471 }
; { 6      | Unused (always reset)                                     |            | #R25983, #R26084, #R26194 }
; { 7      | ERIC is sitting or lying down (set by #R27303 or #R27823) |            | #R25956, #R62574, #R62938, #R63056 }
; TABLE#
@label=STATUS
g32763 DEFB 0

; Last key pressed
;
; Holds the ASCII code of the last key pressed. Set by the routines at #R26471
; and #R63056; checked by the routines at #R25916 and #R26194.
@label=KEYCODE
g32764 DEFB 0

; Number of the character just moved (#b152-#b171)
;
; Used by the routine at #R25126.
@label=LASTCHAR
g32765 DEFB 0

; Random number seed
;
; Used by the routine at #R24993.
@label=RANDSEED
@keep
g32766 DEFW 512 ; This is the initial value of the seed

@org
; Skool graphic data for columns 0-31 (tiles #b0-#b255)
;
; Used by the routine at #R24843. Tiles #b220-#b224, #b231 and #b232 are unused
; and blank (all #b255s), tiles #b225-#b230 and #b233-#b238 are used by the
; White Room blackboard, and tiles #b239-#b255 are used for the speech bubble.
b32768 DEFB 0,255,170,255,170,171,171,170,170,128,129,128,128,255,170,170
 32784 DEFB 176,176,255,170,0,255,255,170,160,1,255,1,1,255,170,67
 32800 DEFB 67,170,194,255,1,255,170,0,128,128,135,255,255,170,15,0
 32816 DEFB 175,170,255,170,255,255,170,178,102,0,15,0,170,234,234,170
 32832 DEFB 255,255,255,170,188,218,192,192,192,192,255,255,128,255,170,170
 32848 DEFB 167,3,3,3,7,0,255,0,26,0,235,0,168,31,64,0
 32864 DEFB 255,170,0,255,0,255,0,255,170,234,255,175,224,20,187,255
 32880 DEFB 170,0,1,255,255,170,234,129,129,255,171,171,170,1,255,255
 32896 DEFB 171,170,85,255,96,255,161,160,255,84,213,255,170,255,192,224
 32912 DEFB 86,85,170,255,170,255,252,1,0,84,170,255,255,0,216,1
 32928 DEFB 0,176,170,255,191,191,191,255,0,191,0,160,170,170,255,255
 32944 DEFB 255,0,192,175,255,255,255,255,255,255,170,170,240,255,255,234
 32960 DEFB 234,239,255,255,175,171,255,255,255,255,255,255,255,255,255,255
 32976 DEFB 255,255,0,95,255,255,255,96,192,255,255,127,255,255,255,255
 32992 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,129
 33008 DEFB 14,126,126,126,126,126,126,112,64,0,0,0,0,0,0,2
 33024 DEFB 0,223,213,255,213,213,213,219,214,128,254,128,128,255,85,85
 33040 DEFB 80,80,255,85,0,0,85,85,127,1,1,1,1,255,85,67
 33056 DEFB 67,85,103,255,1,113,101,192,128,129,191,255,95,85,1,0
 33072 DEFB 85,255,255,85,128,128,213,255,85,0,240,0,245,245,85,255
 33088 DEFB 255,3,3,87,254,95,192,192,192,192,0,0,127,255,245,95
 33104 DEFB 87,3,3,3,63,126,0,255,21,227,255,255,88,32,255,126
 33120 DEFB 255,213,126,0,255,16,255,255,85,213,1,85,24,250,248,255
 33136 DEFB 213,0,1,0,255,85,213,129,128,255,85,85,85,0,255,255
 33152 DEFB 85,95,170,255,224,225,96,96,255,170,170,255,213,255,188,128
 33168 DEFB 170,170,85,255,85,255,84,1,0,191,85,127,255,0,168,255
 33184 DEFB 240,80,85,128,128,128,128,255,0,255,0,96,85,85,0,0
 33200 DEFB 0,0,64,95,0,0,0,0,0,0,85,85,0,0,0,213
 33216 DEFB 213,255,0,0,127,87,0,0,0,0,0,0,0,0,0,0
 33232 DEFB 0,0,255,95,0,0,0,160,254,0,0,65,255,255,255,255
 33248 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,129
 33264 DEFB 49,129,129,129,129,129,129,140,64,0,0,0,0,0,0,2
 33280 DEFB 0,171,170,171,170,171,170,170,170,128,128,128,128,255,170,170
 33296 DEFB 176,176,255,170,0,0,170,174,0,1,1,1,3,255,170,67
 33312 DEFB 67,191,168,255,1,162,160,192,128,190,255,255,171,170,0,0
 33328 DEFB 6,14,255,170,128,128,170,0,103,0,0,0,234,234,170,3
 33344 DEFB 255,3,3,174,15,222,192,192,192,193,255,255,170,255,26,248
 33360 DEFB 255,3,3,3,255,30,255,0,26,20,255,0,168,64,0,114
 33376 DEFB 175,170,94,255,0,16,0,255,170,234,1,170,20,116,251,255
 33392 DEFB 170,0,1,127,255,170,234,129,128,255,171,170,171,0,255,191
 33408 DEFB 171,255,85,255,112,225,160,160,213,85,85,175,250,255,84,128
 33424 DEFB 86,87,170,255,170,255,172,0,0,193,170,175,255,0,88,255
 33440 DEFB 240,255,170,191,191,191,128,255,0,255,224,255,170,170,255,255
 33456 DEFB 255,192,254,255,255,255,255,255,255,255,170,170,0,255,255,235
 33472 DEFB 234,255,255,255,255,175,255,255,255,255,255,255,255,255,255,255
 33488 DEFB 255,255,255,95,255,255,255,160,254,255,255,73,255,255,255,255
 33504 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,129
 33520 DEFB 64,0,0,0,0,0,0,2,64,0,0,0,0,0,0,2
 33536 DEFB 0,213,213,213,213,213,213,217,213,128,128,128,128,127,85,93
 33552 DEFB 94,80,87,85,0,0,5,85,0,1,1,15,15,255,85,67
 33568 DEFB 67,71,104,255,1,101,96,215,128,192,255,255,85,85,0,0
 33584 DEFB 253,21,255,85,128,128,223,255,119,0,0,0,245,245,85,85
 33600 DEFB 255,3,3,244,220,223,192,192,192,207,255,191,85,255,93,15
 33616 DEFB 255,3,3,3,255,78,174,0,21,116,255,0,88,64,0,114
 33632 DEFB 213,245,78,254,0,16,0,255,85,213,1,85,26,122,246,95
 33648 DEFB 213,0,2,255,255,85,213,129,128,255,85,85,127,0,255,127
 33664 DEFB 85,254,170,255,174,97,96,96,170,170,170,215,255,255,172,128
 33680 DEFB 191,188,85,255,85,255,84,15,252,15,87,87,255,0,168,255
 33696 DEFB 80,129,85,191,191,191,128,255,0,255,224,3,87,85,255,85
 33712 DEFB 255,192,30,255,255,87,255,255,255,127,85,85,0,255,175,223
 33728 DEFB 213,255,237,255,255,95,254,255,170,117,191,250,238,59,251,189
 33744 DEFB 255,255,255,96,95,255,238,160,0,117,255,85,255,255,255,255
 33760 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,66
 33776 DEFB 64,0,0,0,0,0,0,2,128,0,0,0,0,0,0,1
 33792 DEFB 0,170,170,170,170,171,160,169,171,128,128,131,128,175,170,179
 33808 DEFB 177,176,170,170,0,0,242,170,11,1,1,241,127,255,234,227
 33824 DEFB 67,194,167,175,1,170,160,191,128,128,255,255,170,170,0,0
 33840 DEFB 174,255,255,170,128,128,178,7,119,0,0,0,234,234,170,255
 33856 DEFB 255,3,3,236,210,255,192,193,192,255,190,170,255,255,170,11
 33872 DEFB 255,3,255,3,255,102,174,252,26,247,255,0,168,64,255,78
 33888 DEFB 170,254,70,202,0,16,255,255,170,234,1,170,20,244,246,171
 33904 DEFB 170,0,2,255,255,170,239,129,128,192,171,170,255,0,0,175
 33920 DEFB 170,245,85,0,86,161,160,160,85,95,85,170,255,0,84,143
 33936 DEFB 192,224,170,255,234,3,172,255,252,122,188,170,255,0,88,255
 33952 DEFB 176,14,170,191,165,186,128,255,0,255,160,30,188,171,255,85
 33968 DEFB 171,192,106,255,255,85,213,255,39,84,170,170,0,255,170,255
 33984 DEFB 234,255,197,170,255,255,170,157,170,85,165,74,170,49,170,165
 34000 DEFB 255,64,255,127,85,255,85,192,254,84,187,73,255,255,255,255
 34016 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,36
 34032 DEFB 128,0,0,0,0,0,0,1,128,0,0,0,0,0,0,1
 34048 DEFB 0,213,213,213,213,213,215,213,213,128,128,252,131,85,85,80
 34064 DEFB 80,95,85,85,0,0,93,87,127,1,1,1,255,255,93,95
 34080 DEFB 67,65,96,85,1,101,96,191,128,128,255,255,85,85,0,0
 34096 DEFB 93,5,95,85,128,128,209,5,191,0,0,3,245,245,85,221
 34112 DEFB 255,3,3,116,83,255,192,254,192,255,210,170,128,255,93,95
 34128 DEFB 255,3,3,31,255,114,174,23,21,244,255,248,88,64,106,78
 34144 DEFB 213,255,66,202,0,16,170,95,213,213,1,85,26,250,247,85
 34160 DEFB 213,0,2,255,127,85,255,129,128,126,85,85,255,0,0,95
 34176 DEFB 85,255,171,0,170,97,96,96,255,240,175,213,255,0,172,255
 34192 DEFB 63,3,85,127,213,0,84,255,172,213,224,85,7,0,175,255
 34208 DEFB 80,245,85,167,165,186,128,255,248,255,96,245,97,95,128,85
 34224 DEFB 171,64,214,255,11,85,181,85,147,84,85,85,0,122,170,255
 34240 DEFB 213,255,141,170,255,255,170,205,170,85,165,74,170,56,171,165
 34256 DEFB 128,32,252,128,85,0,171,15,1,86,171,65,255,255,255,255
 34272 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,36
 34288 DEFB 128,0,0,0,0,0,0,1,128,0,0,0,0,0,0,1
 34304 DEFB 0,170,170,170,171,171,174,173,191,128,128,128,159,170,170,176
 34320 DEFB 176,170,170,255,0,0,170,171,127,1,1,1,255,191,67,67
 34336 DEFB 255,194,160,170,1,170,255,223,128,128,255,255,170,170,0,0
 34352 DEFB 174,6,170,170,128,255,178,246,255,127,0,31,234,234,170,171
 34368 DEFB 191,3,255,172,210,255,192,192,195,255,234,170,128,255,170,171
 34384 DEFB 255,3,3,227,255,60,170,26,26,148,255,168,168,64,85,44
 34400 DEFB 170,255,36,202,0,16,85,171,234,234,1,170,20,87,255,170
 34416 DEFB 250,1,254,255,191,170,255,129,128,171,171,170,255,0,240,171
 34432 DEFB 170,255,126,0,86,161,160,160,255,3,112,170,255,0,84,255
 34448 DEFB 213,30,175,175,234,0,175,255,84,170,15,170,0,248,112,255
 34464 DEFB 176,170,175,184,165,186,128,63,24,255,160,170,142,191,255,85
 34480 DEFB 171,192,170,255,215,85,245,85,201,84,170,175,0,117,170,255
 34496 DEFB 235,255,29,170,255,255,170,229,170,85,165,74,170,60,171,165
 34512 DEFB 64,145,240,255,85,0,87,16,255,86,171,65,255,255,255,255
 34528 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,20
 34544 DEFB 128,0,0,0,0,0,0,1,129,129,129,129,129,129,129,129
 34560 DEFB 0,213,213,213,213,213,219,213,255,128,128,128,255,85,85,80
 34576 DEFB 80,85,85,255,255,0,89,212,255,1,1,1,255,87,67,67
 34592 DEFB 87,67,80,85,255,101,0,255,255,128,255,255,85,117,0,240
 34608 DEFB 87,5,85,255,255,255,209,245,255,128,0,255,245,245,85,221
 34624 DEFB 85,255,255,116,83,255,192,192,252,255,246,170,128,127,93,95
 34640 DEFB 255,3,3,3,255,24,170,21,21,20,255,88,88,64,106,24
 34656 DEFB 213,255,24,202,0,255,170,85,213,213,255,85,26,252,255,85
 34672 DEFB 255,1,0,255,87,213,255,129,128,85,85,85,255,0,95,87
 34688 DEFB 85,255,192,224,170,97,96,96,255,126,128,213,255,0,172,255
 34704 DEFB 170,117,240,87,213,0,224,255,172,85,117,85,0,56,128,255
 34720 DEFB 80,85,120,167,165,186,128,1,248,255,96,85,117,255,192,85
 34736 DEFB 171,64,86,255,111,85,117,85,236,84,253,127,0,107,170,255
 34752 DEFB 215,255,189,170,255,255,170,245,170,85,165,74,170,62,171,165
 34768 DEFB 128,202,160,255,85,0,175,63,255,87,171,127,255,255,255,255
 34784 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,8
 34800 DEFB 64,0,0,0,0,0,0,2,126,126,126,126,126,126,126,126

; Skool graphic data for columns 32-63 (tiles #b0-#b255)
;
; Used by the routine at #R24843. Tiles #b121-#b190, #b225-#b230 and
; #b233-#b238 are unused and blank (all #b255s); tiles #b191-#b206 are used by
; the Reading Room blackboard; tiles #b207-#b222 are used by the Exam Room
; blackboard; tiles #b223, #b224, #b231 and #b232 are used by the White Room
; blackboard; and tiles #b239-#b255 are used for the speech bubble.
b34816 DEFB 0,255,128,176,96,192,213,213,255,64,95,85,85,255,0,255
 34832 DEFB 191,191,191,0,128,255,255,255,128,128,0,252,255,1,129,1
 34848 DEFB 0,0,160,255,255,0,0,255,234,234,255,253,255,255,255,160
 34864 DEFB 191,0,127,84,212,0,0,255,2,65,127,0,5,0,128,6
 34880 DEFB 224,0,255,255,0,1,0,0,3,255,8,2,254,255,0,239
 34896 DEFB 239,255,3,255,0,255,255,128,8,239,11,3,7,0,3,253
 34912 DEFB 255,66,2,0,191,25,240,224,0,0,1,0,8,15,247,248
 34928 DEFB 0,0,0,63,3,31,221,254,1,255,255,255,255,255,255,255
 34944 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 34960 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 34976 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 34992 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35008 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35024 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35040 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,129
 35056 DEFB 14,126,126,126,126,126,126,112,64,0,0,0,0,0,0,2
 35072 DEFB 0,255,192,208,160,254,170,170,128,255,95,170,170,1,0,128
 35088 DEFB 128,128,128,0,128,0,0,0,129,0,0,252,0,1,1,0
 35104 DEFB 0,0,175,0,0,0,255,223,213,213,251,250,3,0,255,96
 35120 DEFB 127,0,191,172,236,0,126,255,2,255,127,0,245,255,128,133
 35136 DEFB 250,0,135,23,0,255,126,0,135,0,12,1,252,0,0,239
 35152 DEFB 239,251,3,0,0,255,0,255,8,239,7,3,7,0,2,253
 35168 DEFB 0,225,1,255,191,243,192,224,126,0,1,0,4,255,247,248
 35184 DEFB 1,128,0,63,1,255,157,254,129,255,255,255,255,255,255,255
 35200 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35216 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35232 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35248 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35264 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35280 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35296 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,129
 35312 DEFB 49,129,129,129,129,129,129,140,64,0,0,0,0,0,0,2
 35328 DEFB 0,255,160,176,160,254,213,212,128,255,95,85,84,1,0,191
 35344 DEFB 191,191,128,0,128,0,255,255,130,0,1,255,255,3,1,0
 35360 DEFB 255,191,175,255,255,255,255,239,234,234,253,253,1,255,255,160
 35376 DEFB 255,251,127,212,212,239,30,254,2,255,127,253,245,255,128,133
 35392 DEFB 250,0,139,23,0,255,94,0,139,31,4,1,248,255,0,239
 35408 DEFB 239,243,3,248,0,255,0,64,4,239,15,3,7,0,2,253
 35424 DEFB 64,33,0,191,191,248,128,192,114,0,1,0,132,247,247,240
 35440 DEFB 3,64,13,63,1,255,138,254,65,255,255,255,255,255,255,255
 35456 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35472 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35488 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35504 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35520 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35536 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35552 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,129
 35568 DEFB 64,0,0,0,0,0,0,2,64,0,0,0,0,0,0,2
 35584 DEFB 0,255,208,208,160,0,170,168,128,255,96,170,168,1,0,175
 35600 DEFB 181,170,128,0,128,0,255,174,132,0,2,255,238,5,1,0
 35616 DEFB 0,191,239,191,255,255,255,215,213,213,251,250,0,254,255,96
 35632 DEFB 255,251,191,236,236,239,78,254,2,255,0,253,247,255,128,133
 35648 DEFB 6,128,139,23,0,255,78,0,139,16,4,1,240,0,0,224
 35664 DEFB 255,227,3,4,0,0,0,64,4,15,15,9,3,0,2,254
 35680 DEFB 96,16,0,191,255,240,136,192,114,0,1,128,132,247,255,240
 35696 DEFB 1,32,25,158,0,255,201,252,33,255,255,255,255,255,255,255
 35712 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35728 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35744 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35760 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35776 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35792 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35808 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,66
 35824 DEFB 64,0,0,0,0,0,0,2,128,0,0,0,0,0,0,1
 35840 DEFB 0,255,176,176,192,254,213,208,128,255,127,85,80,1,0,170
 35856 DEFB 181,170,128,0,128,0,64,174,136,0,2,255,85,9,1,0
 35872 DEFB 0,192,239,170,157,0,255,235,234,235,253,253,0,202,255,160
 35888 DEFB 255,0,95,212,212,0,102,254,2,255,127,1,247,254,128,133
 35904 DEFB 254,128,11,23,0,255,70,0,11,16,4,1,240,0,0,239
 35920 DEFB 255,195,3,4,0,255,0,32,2,239,63,0,3,0,2,255
 35936 DEFB 80,8,0,191,255,240,128,128,78,0,1,64,68,247,255,224
 35952 DEFB 2,16,51,24,0,255,101,124,17,255,255,255,255,255,255,255
 35968 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 35984 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36000 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36016 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36032 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36048 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36064 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,36
 36080 DEFB 128,0,0,0,0,0,0,1,128,0,0,0,0,0,0,1
 36096 DEFB 0,255,208,208,15,1,170,160,128,252,128,170,160,1,0,170
 36112 DEFB 181,170,128,0,128,0,32,174,144,0,2,255,171,17,1,0
 36128 DEFB 0,192,239,170,205,0,255,213,213,215,250,250,0,202,255,96
 36144 DEFB 255,0,191,236,236,0,114,254,2,252,128,1,247,240,128,125
 36160 DEFB 1,128,11,23,0,252,66,0,11,8,2,1,224,0,0,239
 36176 DEFB 255,131,3,2,0,255,0,32,2,239,63,0,3,0,2,255
 36192 DEFB 72,8,0,128,255,252,68,64,78,0,1,32,36,7,255,68
 36208 DEFB 0,8,127,16,0,255,2,120,9,255,255,255,255,255,255,255
 36224 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36240 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36256 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36272 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36288 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36304 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36320 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,36
 36336 DEFB 128,0,0,0,0,0,0,1,128,0,0,0,0,0,0,1
 36352 DEFB 0,255,176,176,16,255,213,192,128,240,255,85,64,1,0,170
 36368 DEFB 181,170,128,0,128,0,145,170,160,0,4,255,87,33,1,0
 36384 DEFB 0,128,255,170,229,0,255,234,234,239,253,253,0,202,255,160
 36400 DEFB 255,0,95,212,212,0,60,254,2,240,255,1,255,128,128,33
 36416 DEFB 255,128,11,23,0,240,36,0,11,8,2,1,192,0,0,239
 36432 DEFB 255,3,3,2,0,255,0,16,1,239,63,0,6,0,2,255
 36448 DEFB 72,4,0,191,255,248,200,0,44,0,1,32,36,247,255,12
 36464 DEFB 0,4,127,8,0,255,0,56,5,255,255,255,255,255,255,255
 36480 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36496 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36512 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36528 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36544 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36560 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36576 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,20
 36592 DEFB 128,0,0,0,0,0,0,1,129,129,129,129,129,129,129,129
 36608 DEFB 0,255,208,208,63,255,170,128,255,160,255,170,128,255,224,170
 36624 DEFB 181,170,128,63,128,0,202,170,192,0,4,255,175,65,1,0
 36640 DEFB 0,239,255,170,245,255,255,213,213,223,250,254,255,202,127,96
 36656 DEFB 255,255,175,236,236,255,24,254,2,128,255,253,255,128,127,31
 36672 DEFB 255,128,127,251,254,128,24,7,127,8,2,1,128,0,239,239
 36688 DEFB 255,3,3,1,255,255,255,16,238,239,7,3,4,3,2,255
 36704 DEFB 68,2,0,191,255,240,224,0,24,127,1,16,20,247,255,8
 36720 DEFB 0,2,63,7,0,255,15,16,3,255,255,255,255,255,255,255
 36736 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36752 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36768 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36784 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36800 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36816 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 36832 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,8
 36848 DEFB 64,0,0,0,0,0,0,2,126,126,126,126,126,126,126,126

; Skool graphic data for columns 64-95 (tiles #b0-#b255)
;
; Used by the routine at #R24843. Tiles #b192-#b238 are unused and identical to
; tiles #b73-#b119, and tiles #b239-#b255 are used for the speech bubble.
b36864 DEFB 0,255,255,0,128,0,0,127,0,255,0,0,134,128,0,255
 36880 DEFB 0,0,0,255,128,128,128,0,255,0,1,1,0,1,0,255
 36896 DEFB 255,1,1,1,15,0,3,245,255,128,192,255,0,21,253,0
 36912 DEFB 5,85,85,255,0,255,255,0,27,255,128,0,13,85,85,0
 36928 DEFB 3,255,63,128,0,42,85,255,1,255,255,3,128,7,106,170
 36944 DEFB 255,6,255,132,4,255,170,171,255,255,0,170,255,128,0,255
 36960 DEFB 255,0,129,129,255,255,1,0,0,255,240,255,224,255,0,5
 36976 DEFB 5,255,0,255,127,255,1,0,255,136,255,224,0,255,255,1
 36992 DEFB 6,2,2,254,0,240,128,132,240,0,255,145,0,16,32,255
 37008 DEFB 17,0,8,4,252,28,20,20,255,6,6,7,255,248,64,64
 37024 DEFB 160,80,40,2,0,255,82,82,41,21,64,0,255,148,148,138
 37040 DEFB 74,74,212,63,31,255,0,192,128,240,0,255,0,32,255,1
 37056 DEFB 255,255,3,128,7,106,170,255,6,255,132,4,255,170,171,255
 37072 DEFB 255,0,170,255,128,0,255,255,0,129,129,255,255,1,0,0
 37088 DEFB 255,240,255,224,255,0,5,5,255,0,255,127,255,1,0,129
 37104 DEFB 14,126,126,126,126,126,126,112,64,0,0,0,0,0,0,2
 37120 DEFB 0,255,1,255,128,0,255,127,129,5,126,0,133,250,126,128
 37136 DEFB 255,126,255,255,128,128,192,255,255,0,1,1,0,1,129,9
 37152 DEFB 255,1,1,1,0,0,2,250,255,255,192,255,0,26,255,0
 37168 DEFB 6,170,170,252,131,17,255,0,21,128,255,15,10,170,170,0
 37184 DEFB 3,255,42,128,0,253,170,253,3,8,255,61,0,1,85,85
 37200 DEFB 255,7,135,4,4,255,85,85,255,255,248,85,255,128,0,255
 37216 DEFB 255,0,129,1,255,255,1,255,255,255,128,255,224,0,0,253
 37232 DEFB 253,255,0,255,0,253,1,127,136,136,0,224,126,255,1,1
 37248 DEFB 254,254,254,254,0,240,128,132,224,0,145,145,0,16,32,17
 37264 DEFB 17,0,8,4,4,28,20,20,255,6,7,7,255,128,64,64
 37280 DEFB 160,80,20,1,0,255,82,42,41,21,48,0,255,148,146,138
 37296 DEFB 74,74,211,63,31,255,0,128,128,255,224,255,0,16,193,1
 37312 DEFB 8,255,61,0,1,85,85,255,7,135,4,4,255,85,85,255
 37328 DEFB 255,248,85,255,128,0,255,255,0,129,1,255,255,1,255,255
 37344 DEFB 255,128,255,224,0,0,253,253,255,0,255,0,253,1,127,129
 37360 DEFB 49,129,129,129,129,129,129,140,64,0,0,0,0,0,0,2
 37376 DEFB 0,255,1,255,128,0,255,127,130,5,30,0,133,250,94,128
 37392 DEFB 255,114,255,255,128,128,240,255,255,0,1,193,0,1,134,9
 37408 DEFB 241,1,1,1,0,3,127,255,255,255,192,255,0,21,255,7
 37424 DEFB 255,85,85,240,141,17,255,0,26,128,255,15,255,85,85,0
 37440 DEFB 3,255,53,0,0,131,85,241,31,8,255,42,0,1,106,234
 37456 DEFB 255,14,134,4,4,171,170,170,255,252,255,170,255,0,192,255
 37472 DEFB 255,0,129,1,254,241,1,0,0,255,0,255,224,0,0,1
 37488 DEFB 1,255,0,255,0,241,1,127,136,136,0,248,126,255,1,1
 37504 DEFB 0,0,0,255,0,252,128,132,224,0,145,145,0,16,64,17
 37520 DEFB 17,0,8,2,4,28,20,20,255,6,7,7,255,128,64,64
 37536 DEFB 160,80,20,0,240,255,82,42,41,13,204,0,255,148,138,138
 37552 DEFB 74,74,127,63,31,255,0,128,128,255,24,240,0,24,1,1
 37568 DEFB 8,255,42,0,1,106,234,255,14,134,4,4,171,170,170,255
 37584 DEFB 252,255,170,255,0,192,255,255,0,129,1,254,241,1,0,0
 37600 DEFB 255,0,255,224,0,0,1,1,255,0,255,0,241,1,127,129
 37616 DEFB 64,0,0,0,0,0,0,2,64,0,0,0,0,0,0,2
 37632 DEFB 0,255,1,255,128,0,255,0,130,5,78,0,133,6,78,128
 37648 DEFB 255,114,255,255,128,128,248,255,255,0,1,249,0,1,132,9
 37664 DEFB 129,1,1,1,0,3,120,255,255,255,192,255,0,26,255,7
 37680 DEFB 192,234,170,192,137,17,255,0,21,128,255,10,129,234,170,0
 37696 DEFB 3,255,42,240,63,240,170,193,255,8,255,53,0,1,253,61
 37712 DEFB 255,117,132,4,4,85,85,85,255,252,127,85,255,0,254,255
 37728 DEFB 254,0,129,1,248,1,1,255,255,255,0,255,224,0,0,253
 37744 DEFB 253,255,0,255,0,129,15,127,136,136,0,248,126,0,1,1
 37760 DEFB 254,254,254,255,0,252,128,136,192,0,145,145,0,16,64,17
 37776 DEFB 17,0,8,2,4,28,20,20,0,6,7,7,0,128,64,64
 37792 DEFB 160,80,10,0,255,0,82,42,41,11,51,0,0,148,138,138
 37808 DEFB 74,74,254,63,31,16,0,128,128,255,20,0,0,20,1,1
 37824 DEFB 8,255,53,0,1,253,61,255,117,132,4,4,85,85,85,255
 37840 DEFB 252,127,85,255,0,254,255,254,0,129,1,248,1,1,255,255
 37856 DEFB 255,0,255,224,0,0,253,253,255,0,255,0,129,15,127,66
 37872 DEFB 64,0,0,0,0,0,0,2,128,0,0,0,0,0,0,1
 37888 DEFB 0,255,1,255,128,0,254,127,130,5,102,0,5,254,70,128
 37904 DEFB 255,78,255,255,128,128,254,255,252,0,1,255,0,1,132,9
 37920 DEFB 1,1,1,1,0,3,86,255,255,254,192,255,0,21,255,5
 37936 DEFB 120,61,213,0,9,17,255,0,26,128,255,13,112,61,85,3
 37952 DEFB 3,192,53,255,63,94,85,1,255,8,0,42,0,241,3,7
 37968 DEFB 0,106,132,4,4,170,250,170,0,240,175,170,3,0,255,255
 37984 DEFB 192,240,129,1,192,1,1,0,0,255,0,255,224,0,0,5
 38000 DEFB 5,254,0,255,0,1,127,127,136,136,0,254,126,255,1,1
 38016 DEFB 2,2,2,255,0,255,129,136,224,0,145,145,255,16,64,17
 38032 DEFB 17,192,8,2,4,28,20,20,255,6,7,7,255,128,64,64
 38048 DEFB 160,80,10,0,255,255,82,42,41,7,12,240,255,148,138,138
 38064 DEFB 74,74,54,63,9,0,0,128,0,255,18,0,0,18,1,241
 38080 DEFB 8,0,42,0,241,3,7,0,106,132,4,4,170,250,170,0
 38096 DEFB 240,175,170,3,0,255,255,192,240,129,1,192,1,1,0,0
 38112 DEFB 255,0,255,224,0,0,5,5,254,0,255,0,1,127,127,36
 38128 DEFB 128,0,0,0,0,0,0,1,128,0,0,0,0,0,0,1
 38144 DEFB 0,255,1,252,128,0,241,128,2,5,114,0,253,1,66,128
 38160 DEFB 254,78,255,255,128,128,255,254,224,0,1,255,1,193,4,9
 38176 DEFB 1,1,1,1,0,2,107,255,252,248,192,255,31,26,255,6
 38192 DEFB 175,134,250,0,9,17,224,0,245,128,255,10,175,7,170,3
 38208 DEFB 3,0,42,255,53,171,170,1,255,8,0,53,0,255,252,192
 38224 DEFB 0,85,132,4,4,255,15,245,0,240,255,213,126,0,255,254
 38240 DEFB 0,254,129,1,0,1,1,255,0,255,0,255,224,0,0,253
 38256 DEFB 5,248,3,255,0,1,255,127,136,136,0,254,126,255,1,1
 38272 DEFB 254,254,2,255,0,255,131,136,248,128,145,145,255,32,128,17
 38288 DEFB 17,240,4,1,4,20,20,20,254,6,7,7,255,128,64,160
 38304 DEFB 160,40,5,0,255,222,82,42,21,3,3,255,212,148,138,74
 38320 DEFB 74,73,246,63,0,0,0,128,0,255,17,0,0,17,1,255
 38336 DEFB 8,0,53,0,255,252,192,0,85,132,4,4,255,15,245,0
 38352 DEFB 240,255,213,126,0,255,254,0,254,129,1,0,1,1,255,0
 38368 DEFB 255,0,255,224,0,0,253,5,248,3,255,0,1,255,127,36
 38384 DEFB 128,0,0,0,0,0,0,1,128,0,0,0,0,0,0,1
 38400 DEFB 0,255,1,240,128,0,128,255,2,5,60,0,129,255,36,128
 38416 DEFB 248,44,248,254,128,0,255,240,0,0,1,255,1,241,4,9
 38432 DEFB 1,7,1,193,0,3,85,255,240,192,192,252,24,21,255,5
 38448 DEFB 85,113,253,0,9,17,0,31,14,128,255,13,85,240,245,3
 38464 DEFB 3,0,245,255,42,85,245,1,255,8,0,42,0,255,171,120
 38480 DEFB 0,106,132,4,4,255,192,14,15,192,255,126,192,0,255,252
 38496 DEFB 0,255,129,1,0,1,129,0,0,255,0,224,224,0,2,1
 38512 DEFB 5,192,3,0,0,1,255,127,136,136,0,255,126,0,1,1
 38528 DEFB 0,0,2,255,192,255,135,136,254,192,145,145,255,32,128,17
 38544 DEFB 17,248,4,1,4,20,20,244,2,6,7,7,255,128,64,160
 38560 DEFB 80,40,5,0,255,222,82,41,21,1,0,255,148,148,138,74
 38576 DEFB 74,165,54,31,240,0,48,128,0,255,17,0,128,17,1,255
 38592 DEFB 8,0,42,0,255,171,120,0,106,132,4,4,255,192,14,15
 38608 DEFB 192,255,126,192,0,255,252,0,255,129,1,0,1,129,0,0
 38624 DEFB 255,0,224,224,0,2,1,5,192,3,0,0,1,255,127,20
 38640 DEFB 128,0,0,0,0,0,0,1,129,129,129,129,129,129,129,129
 38656 DEFB 0,255,255,128,127,255,128,255,127,254,24,7,127,255,24,255
 38672 DEFB 128,24,128,240,128,0,255,128,0,1,1,255,1,253,127,254
 38688 DEFB 1,255,255,241,0,2,106,255,192,192,191,128,31,26,255,6
 38704 DEFB 170,174,255,0,127,254,0,28,1,128,255,10,170,174,30,3
 38720 DEFB 3,0,7,255,53,170,15,1,255,255,0,53,0,255,85,174
 38736 DEFB 7,85,132,4,4,255,126,1,248,128,255,3,0,0,255,224
 38752 DEFB 0,255,129,1,0,1,255,255,0,254,0,255,255,0,5,253
 38768 DEFB 5,0,3,255,255,1,255,0,136,136,255,255,0,255,1,7
 38784 DEFB 254,254,2,255,192,255,132,136,255,192,145,145,127,32,128,17
 38800 DEFB 17,248,4,1,252,20,20,252,254,6,7,7,255,128,64,160
 38816 DEFB 80,40,2,0,255,210,82,41,21,129,0,255,148,148,138,74
 38832 DEFB 74,165,62,31,255,0,96,128,0,255,17,0,64,17,1,255
 38848 DEFB 255,0,53,0,255,85,174,7,85,132,4,4,255,126,1,248
 38864 DEFB 128,255,3,0,0,255,224,0,255,129,1,0,1,255,255,0
 38880 DEFB 254,0,255,255,0,5,253,5,0,3,255,255,1,255,0,8
 38896 DEFB 64,0,0,0,0,0,0,2,126,126,126,126,126,126,126,126

; Skool UDG references (LSBs) for row 0
;
; Used by the routine at #R24843.
b38912 DEFB 1,13,29,43,43,43,43,43,96,103,77,43,43,43,43,43
 38928 DEFB 139,147,43,43,43,43,43,43,43,43,43,43,43,43,43,43
 38944 DEFB 1,1,1,1,1,1,1,1,42,1,1,1,1,1,1,1
 38960 DEFB 1,1,1,1,1,1,1,1,1,81,1,1,1,1,1,1
 38976 DEFB 1,1,1,1,1,1,1,1,1,1,40,71,1,1,1,1
 38992 DEFB 1,105,113,117,123,132,0,0,0,0,0,0,0,0,0,0

; Character buffer for little boy no. 1 (#b152)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
@label=BOY01CBUF
b39008 DEFS 32

; Skool attribute data for row 0
;
; Used by the routine at #R24576.
b39040 DEFB 104,104,104,104,40,40,40,40,48,48,48,48,48,48,48,48
 39056 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 39072 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 39088 DEFB 48,48,48,48,48,48,48,48,48,112,112,48,48,48,48,48
 39104 DEFB 48,48,48,48,48,48,48,96,96,96,96,96,48,48,48,48
 39120 DEFB 48,112,112,112,106,106,104,104,104,104,104,104,104,104,104,104

; Personal timetable for little boy no. 1 (#b152)
;
; Used by the routine at #R26342.
b39136 DEFB 170 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64761(#b170)
                ; (Dinner)
 39137 DEFB 170 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64761(#b170)
                ; (Dinner)
 39138 DEFB 146 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64548(#b146)
                ; (Reading Room)
 39139 DEFB 154 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64619(#b154)
                ; (Exam Room)
 39140 DEFB 176 ; Lesson #LESSON228 (REVISION LIBRARY): #R64801(#b176)
                ; (Revision Library)
 39141 DEFB 136 ; Lesson #LESSON229 (REVISION LIBRARY): #R64484(#b136) (Map
                ; Room)
 39142 DEFB 154 ; Lesson #LESSON230 (REVISION LIBRARY): #R64619(#b154) (Exam
                ; Room)
 39143 DEFB 146 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64548(#b146)
                ; (Reading Room)
 39144 DEFB 162 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64690(#b162)
                ; (White Room)
 39145 DEFB 154 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64619(#b154)
                ; (Exam Room)
 39146 DEFB 146 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64548(#b146)
                ; (Reading Room)
 39147 DEFB 146 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64548(#b146)
                ; (Reading Room)
 39148 DEFB 136 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64484(#b136)
                ; (Map Room)
 39149 DEFB 146 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64548(#b146)
                ; (Reading Room)
 39150 DEFB 136 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64484(#b136)
                ; (Map Room)
 39151 DEFB 154 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64619(#b154)
                ; (Exam Room)
 39152 DEFB 146 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64548(#b146)
                ; (Reading Room)
 39153 DEFB 154 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 39154 DEFB 162 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64690(#b162)
                ; (White Room)
 39155 DEFB 196 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64914(#b196) (Walkabout)
 39156 DEFB 196 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64914(#b196) (Walkabout)
 39157 DEFB 196 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64914(#b196) (Walkabout)
 39158 DEFB 198 ; Lesson #LESSON246 (PLAYTIME): #R64923(#b198) (Walk around the
                ; fire escape)
 39159 DEFB 176 ; Lesson #LESSON247 (PLAYTIME): #R64801(#b176) (Revision
                ; Library)
 39160 DEFB 176 ; Lesson #LESSON248 (PLAYTIME): #R64801(#b176) (Revision
                ; Library)
 39161 DEFB 202 ; Lesson #LESSON249 (PLAYTIME): #R64939(#b202) (Walk around the
                ; big window)
 39162 DEFB 196 ; Lesson #LESSON250 (PLAYTIME): #R64914(#b196) (Walkabout)
 39163 DEFB 196 ; Lesson #LESSON251 (PLAYTIME): #R64914(#b196) (Walkabout)
 39164 DEFB 204 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64947(#b204) (Stampede)
 39165 DEFB 204 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64947(#b204) (Stampede)
 39166 DEFB 176 ; Lesson #LESSON254 (PLAYTIME): #R64801(#b176) (Revision
                ; Library)
 39167 DEFB 196 ; Lesson #LESSON255 (PLAYTIME): #R64914(#b196) (Walkabout)

; Skool UDG references (LSBs) for row 1
;
; Used by the routine at #R24843.
b39168 DEFB 2,14,14,44,13,29,43,43,97,104,107,111,116,43,43,43
 39184 DEFB 140,148,155,147,43,43,43,43,43,43,43,43,43,43,43,43
 39200 DEFB 1,1,1,1,1,1,1,1,43,50,1,1,1,1,1,1
 39216 DEFB 1,1,1,1,1,1,1,1,76,82,1,1,1,1,1,1
 39232 DEFB 1,1,1,1,1,1,1,1,40,51,63,72,1,1,1,95
 39248 DEFB 100,106,114,118,1,133,137,0,0,0,0,0,0,0,0,0

; Character buffer for little boy no. 2 (#b153)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
b39264 DEFS 32

; Skool attribute data for row 1
;
; Used by the routine at #R24576.
b39296 DEFB 104,104,104,104,104,104,40,40,48,48,48,48,48,48,48,48
 39312 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 39328 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 39344 DEFB 48,48,48,48,48,48,48,48,112,112,112,48,32,32,32,32
 39360 DEFB 48,48,48,48,48,48,48,96,96,96,96,96,48,48,48,112
 39376 DEFB 112,112,114,114,114,106,106,104,104,104,104,104,104,104,104,104

; Personal timetable for little boy no. 2 (#b153)
;
; Used by the routine at #R26342.
b39392 DEFB 170 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64761(#b170)
                ; (Dinner)
 39393 DEFB 170 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64761(#b170)
                ; (Dinner)
 39394 DEFB 146 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64548(#b146)
                ; (Reading Room)
 39395 DEFB 154 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64619(#b154)
                ; (Exam Room)
 39396 DEFB 146 ; Lesson #LESSON228 (REVISION LIBRARY): #R64548(#b146) (Reading
                ; Room)
 39397 DEFB 136 ; Lesson #LESSON229 (REVISION LIBRARY): #R64484(#b136) (Map
                ; Room)
 39398 DEFB 162 ; Lesson #LESSON230 (REVISION LIBRARY): #R64690(#b162) (White
                ; Room)
 39399 DEFB 162 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64690(#b162)
                ; (White Room)
 39400 DEFB 146 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64548(#b146)
                ; (Reading Room)
 39401 DEFB 154 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64619(#b154)
                ; (Exam Room)
 39402 DEFB 136 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64484(#b136)
                ; (Map Room)
 39403 DEFB 136 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64484(#b136)
                ; (Map Room)
 39404 DEFB 146 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64548(#b146)
                ; (Reading Room)
 39405 DEFB 162 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64690(#b162)
                ; (White Room)
 39406 DEFB 154 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 39407 DEFB 162 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64690(#b162)
                ; (White Room)
 39408 DEFB 146 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64548(#b146)
                ; (Reading Room)
 39409 DEFB 154 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 39410 DEFB 136 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64484(#b136)
                ; (Map Room)
 39411 DEFB 196 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64914(#b196) (Walkabout)
 39412 DEFB 196 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64914(#b196) (Walkabout)
 39413 DEFB 196 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64914(#b196) (Walkabout)
 39414 DEFB 198 ; Lesson #LESSON246 (PLAYTIME): #R64923(#b198) (Walk around the
                ; fire escape)
 39415 DEFB 198 ; Lesson #LESSON247 (PLAYTIME): #R64923(#b198) (Walk around the
                ; fire escape)
 39416 DEFB 176 ; Lesson #LESSON248 (PLAYTIME): #R64801(#b176) (Revision
                ; Library)
 39417 DEFB 202 ; Lesson #LESSON249 (PLAYTIME): #R64939(#b202) (Walk around the
                ; big window)
 39418 DEFB 196 ; Lesson #LESSON250 (PLAYTIME): #R64914(#b196) (Walkabout)
 39419 DEFB 196 ; Lesson #LESSON251 (PLAYTIME): #R64914(#b196) (Walkabout)
 39420 DEFB 206 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 39421 DEFB 206 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 39422 DEFB 198 ; Lesson #LESSON254 (PLAYTIME): #R64923(#b198) (Walk around the
                ; fire escape)
 39423 DEFB 176 ; Lesson #LESSON255 (PLAYTIME): #R64801(#b176) (Revision
                ; Library)

; Skool UDG references (LSBs) for row 2
;
; Used by the routine at #R24843.
b39424 DEFB 2,15,30,45,14,14,85,0,98,105,14,14,14,0,0,0
 39440 DEFB 0,105,14,14,0,52,106,0,52,106,0,52,106,0,52,106
 39456 DEFB 0,8,13,0,8,13,0,8,44,51,8,13,0,8,13,70
 39472 DEFB 8,13,104,8,13,0,8,13,20,82,86,13,0,8,13,0
 39488 DEFB 2,0,15,2,0,15,2,0,20,0,64,0,0,0,17,20
 39504 DEFB 0,0,64,0,0,0,20,0,0,0,0,0,0,0,0,0

; Character buffer for little boy no. 3 (#b154)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
b39520 DEFS 32

; Skool attribute data for row 2
;
; Used by the routine at #R24576.
b39552 DEFB 104,104,104,104,104,104,42,40,41,48,48,48,48,48,48,48
 39568 DEFB 48,48,48,48,48,104,104,48,104,104,48,104,104,48,104,104
 39584 DEFB 48,40,40,48,40,40,48,40,40,48,40,40,48,40,40,49
 39600 DEFB 40,40,52,40,40,48,40,40,112,112,40,40,32,40,40,32
 39616 DEFB 104,32,104,104,32,104,104,32,96,96,96,48,48,48,49,112
 39632 DEFB 112,112,112,48,48,48,104,104,104,104,104,104,104,104,104,104

; Personal timetable for little boy no. 3 (#b154)
;
; Used by the routine at #R26342.
b39648 DEFB 170 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64761(#b170)
                ; (Dinner)
 39649 DEFB 170 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64761(#b170)
                ; (Dinner)
 39650 DEFB 146 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64548(#b146)
                ; (Reading Room)
 39651 DEFB 154 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64619(#b154)
                ; (Exam Room)
 39652 DEFB 146 ; Lesson #LESSON228 (REVISION LIBRARY): #R64548(#b146) (Reading
                ; Room)
 39653 DEFB 136 ; Lesson #LESSON229 (REVISION LIBRARY): #R64484(#b136) (Map
                ; Room)
 39654 DEFB 154 ; Lesson #LESSON230 (REVISION LIBRARY): #R64619(#b154) (Exam
                ; Room)
 39655 DEFB 146 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64548(#b146)
                ; (Reading Room)
 39656 DEFB 136 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64484(#b136)
                ; (Map Room)
 39657 DEFB 154 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64619(#b154)
                ; (Exam Room)
 39658 DEFB 162 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64690(#b162)
                ; (White Room)
 39659 DEFB 154 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 39660 DEFB 136 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64484(#b136)
                ; (Map Room)
 39661 DEFB 154 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 39662 DEFB 136 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64484(#b136)
                ; (Map Room)
 39663 DEFB 154 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64619(#b154)
                ; (Exam Room)
 39664 DEFB 136 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64484(#b136) (Map
                ; Room)
 39665 DEFB 154 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 39666 DEFB 162 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64690(#b162)
                ; (White Room)
 39667 DEFB 196 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64914(#b196) (Walkabout)
 39668 DEFB 196 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64914(#b196) (Walkabout)
 39669 DEFB 196 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64914(#b196) (Walkabout)
 39670 DEFB 198 ; Lesson #LESSON246 (PLAYTIME): #R64923(#b198) (Walk around the
                ; fire escape)
 39671 DEFB 200 ; Lesson #LESSON247 (PLAYTIME): #R64931(#b200) (Walk around the
                ; gym)
 39672 DEFB 198 ; Lesson #LESSON248 (PLAYTIME): #R64923(#b198) (Walk around the
                ; fire escape)
 39673 DEFB 202 ; Lesson #LESSON249 (PLAYTIME): #R64939(#b202) (Walk around the
                ; big window)
 39674 DEFB 196 ; Lesson #LESSON250 (PLAYTIME): #R64914(#b196) (Walkabout)
 39675 DEFB 196 ; Lesson #LESSON251 (PLAYTIME): #R64914(#b196) (Walkabout)
 39676 DEFB 206 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 39677 DEFB 206 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 39678 DEFB 200 ; Lesson #LESSON254 (PLAYTIME): #R64931(#b200) (Walk around the
                ; gym)
 39679 DEFB 196 ; Lesson #LESSON255 (PLAYTIME): #R64914(#b196) (Walkabout)

; Skool UDG references (LSBs) for row 3
;
; Used by the routine at #R24843.
b39680 DEFB 2,16,31,46,60,74,86,75,99,105,14,14,14,0,0,52
 39696 DEFB 101,105,14,163,174,180,183,189,194,74,86,75,204,207,212,217
 39712 DEFB 2,0,0,15,22,28,35,23,45,52,206,205,204,203,202,201
 39728 DEFB 200,199,0,0,0,0,0,0,20,82,0,90,101,111,114,117
 39744 DEFB 0,0,0,0,0,0,0,0,20,0,64,73,2,0,0,20
 39760 DEFB 0,0,64,119,124,0,20,0,0,0,0,0,0,0,0,0

; Character buffer for little boy no. 4 (#b155)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
b39776 DEFS 32

; Skool attribute data for row 3
;
; Used by the routine at #R24576.
b39808 DEFB 104,104,104,104,104,56,56,56,56,48,48,48,48,48,48,40
 39824 DEFB 40,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 39840 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 39856 DEFB 48,48,48,48,48,48,48,48,112,112,32,120,120,120,120,120
 39872 DEFB 32,32,32,32,32,32,32,32,96,96,96,104,104,48,48,112
 39888 DEFB 112,112,112,56,56,48,104,104,104,104,104,104,104,104,104,104

; Personal timetable for little boy no. 4 (#b155)
;
; Used by the routine at #R26342.
b39904 DEFB 170 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64761(#b170)
                ; (Dinner)
 39905 DEFB 170 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64761(#b170)
                ; (Dinner)
 39906 DEFB 146 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64548(#b146)
                ; (Reading Room)
 39907 DEFB 162 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64690(#b162)
                ; (White Room)
 39908 DEFB 146 ; Lesson #LESSON228 (REVISION LIBRARY): #R64548(#b146) (Reading
                ; Room)
 39909 DEFB 146 ; Lesson #LESSON229 (REVISION LIBRARY): #R64548(#b146) (Reading
                ; Room)
 39910 DEFB 154 ; Lesson #LESSON230 (REVISION LIBRARY): #R64619(#b154) (Exam
                ; Room)
 39911 DEFB 162 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64690(#b162)
                ; (White Room)
 39912 DEFB 154 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64619(#b154)
                ; (Exam Room)
 39913 DEFB 162 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64690(#b162)
                ; (White Room)
 39914 DEFB 154 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64619(#b154)
                ; (Exam Room)
 39915 DEFB 146 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64548(#b146)
                ; (Reading Room)
 39916 DEFB 146 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64548(#b146)
                ; (Reading Room)
 39917 DEFB 136 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64484(#b136)
                ; (Map Room)
 39918 DEFB 136 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64484(#b136)
                ; (Map Room)
 39919 DEFB 162 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64690(#b162)
                ; (White Room)
 39920 DEFB 146 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64548(#b146)
                ; (Reading Room)
 39921 DEFB 154 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 39922 DEFB 136 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64484(#b136)
                ; (Map Room)
 39923 DEFB 196 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64914(#b196) (Walkabout)
 39924 DEFB 196 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64914(#b196) (Walkabout)
 39925 DEFB 196 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64914(#b196) (Walkabout)
 39926 DEFB 200 ; Lesson #LESSON246 (PLAYTIME): #R64931(#b200) (Walk around the
                ; gym)
 39927 DEFB 176 ; Lesson #LESSON247 (PLAYTIME): #R64801(#b176) (Revision
                ; Library)
 39928 DEFB 198 ; Lesson #LESSON248 (PLAYTIME): #R64923(#b198) (Walk around the
                ; fire escape)
 39929 DEFB 198 ; Lesson #LESSON249 (PLAYTIME): #R64923(#b198) (Walk around the
                ; fire escape)
 39930 DEFB 200 ; Lesson #LESSON250 (PLAYTIME): #R64931(#b200) (Walk around the
                ; gym)
 39931 DEFB 196 ; Lesson #LESSON251 (PLAYTIME): #R64914(#b196) (Walkabout)
 39932 DEFB 206 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 39933 DEFB 206 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 39934 DEFB 202 ; Lesson #LESSON254 (PLAYTIME): #R64939(#b202) (Walk around the
                ; big window)
 39935 DEFB 198 ; Lesson #LESSON255 (PLAYTIME): #R64923(#b198) (Walk around the
                ; fire escape)

; Skool UDG references (LSBs) for row 4
;
; Used by the routine at #R24843.
b39936 DEFB 2,17,32,47,61,75,75,86,99,105,14,14,14,0,0,52
 39952 DEFB 101,105,14,164,175,181,184,99,75,198,200,202,205,208,213,213
 39968 DEFB 3,0,0,16,23,28,36,35,45,52,198,197,196,195,194,193
 39984 DEFB 192,191,0,0,0,0,0,0,20,82,0,91,102,112,115,118
 40000 DEFB 0,0,0,0,0,0,0,0,20,0,64,73,2,0,0,20
 40016 DEFB 0,0,64,119,124,0,20,0,0,0,0,0,0,0,0,0

; Character buffer for little boy no. 5 (#b156)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
b40032 DEFS 32

; Skool attribute data for row 4
;
; Used by the routine at #R24576.
b40064 DEFB 104,104,104,104,104,56,56,56,56,48,48,48,48,48,48,40
 40080 DEFB 40,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 40096 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 40112 DEFB 48,48,48,48,48,48,48,48,112,112,32,120,120,120,120,120
 40128 DEFB 32,32,32,32,32,32,32,32,96,96,96,104,104,48,48,112
 40144 DEFB 112,112,112,56,56,48,104,104,104,104,104,104,104,104,104,104

; Personal timetable for little boy no. 5 (#b156)
;
; Used by the routine at #R26342.
b40160 DEFB 170 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64761(#b170)
                ; (Dinner)
 40161 DEFB 170 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64761(#b170)
                ; (Dinner)
 40162 DEFB 146 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64548(#b146)
                ; (Reading Room)
 40163 DEFB 162 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64690(#b162)
                ; (White Room)
 40164 DEFB 162 ; Lesson #LESSON228 (REVISION LIBRARY): #R64690(#b162) (White
                ; Room)
 40165 DEFB 176 ; Lesson #LESSON229 (REVISION LIBRARY): #R64801(#b176)
                ; (Revision Library)
 40166 DEFB 162 ; Lesson #LESSON230 (REVISION LIBRARY): #R64690(#b162) (White
                ; Room)
 40167 DEFB 146 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64548(#b146)
                ; (Reading Room)
 40168 DEFB 136 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64484(#b136)
                ; (Map Room)
 40169 DEFB 146 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64548(#b146)
                ; (Reading Room)
 40170 DEFB 162 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64690(#b162)
                ; (White Room)
 40171 DEFB 136 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64484(#b136)
                ; (Map Room)
 40172 DEFB 154 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 40173 DEFB 146 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64548(#b146)
                ; (Reading Room)
 40174 DEFB 162 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64690(#b162)
                ; (White Room)
 40175 DEFB 154 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64619(#b154)
                ; (Exam Room)
 40176 DEFB 162 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64690(#b162)
                ; (White Room)
 40177 DEFB 154 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 40178 DEFB 162 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64690(#b162)
                ; (White Room)
 40179 DEFB 196 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64914(#b196) (Walkabout)
 40180 DEFB 196 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64914(#b196) (Walkabout)
 40181 DEFB 196 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64914(#b196) (Walkabout)
 40182 DEFB 200 ; Lesson #LESSON246 (PLAYTIME): #R64931(#b200) (Walk around the
                ; gym)
 40183 DEFB 198 ; Lesson #LESSON247 (PLAYTIME): #R64923(#b198) (Walk around the
                ; fire escape)
 40184 DEFB 202 ; Lesson #LESSON248 (PLAYTIME): #R64939(#b202) (Walk around the
                ; big window)
 40185 DEFB 200 ; Lesson #LESSON249 (PLAYTIME): #R64931(#b200) (Walk around the
                ; gym)
 40186 DEFB 200 ; Lesson #LESSON250 (PLAYTIME): #R64931(#b200) (Walk around the
                ; gym)
 40187 DEFB 196 ; Lesson #LESSON251 (PLAYTIME): #R64914(#b196) (Walkabout)
 40188 DEFB 206 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 40189 DEFB 206 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 40190 DEFB 176 ; Lesson #LESSON254 (PLAYTIME): #R64801(#b176) (Revision
                ; Library)
 40191 DEFB 200 ; Lesson #LESSON255 (PLAYTIME): #R64931(#b200) (Walk around the
                ; gym)

; Skool UDG references (LSBs) for row 5
;
; Used by the routine at #R24843.
b40192 DEFB 2,14,33,48,62,76,87,91,100,105,14,14,14,0,0,0
 40208 DEFB 0,105,14,165,176,182,185,190,195,199,201,203,206,209,214,218
 40224 DEFB 3,0,0,17,23,23,35,23,36,52,1,1,1,1,1,55
 40240 DEFB 61,66,61,72,61,72,61,72,61,72,0,92,103,0,116,119
 40256 DEFB 3,8,16,8,18,8,23,30,41,52,64,0,0,0,0,20
 40272 DEFB 0,0,64,120,120,120,138,143,143,143,143,143,143,143,186,188

; Character buffer for little boy no. 6 (#b157)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
b40288 DEFS 32

; Skool attribute data for row 5
;
; Used by the routine at #R24576.
b40320 DEFB 104,104,104,104,104,40,40,40,40,48,48,48,48,48,48,48
 40336 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 40352 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 40368 DEFB 48,48,48,48,48,48,48,48,112,112,32,120,120,120,120,120
 40384 DEFB 32,32,32,32,32,32,32,32,96,96,96,48,48,48,48,112
 40400 DEFB 112,112,112,48,48,48,104,104,104,104,104,104,104,104,104,104

; Personal timetable for little boy no. 6 (#b157)
;
; Used by the routine at #R26342.
b40416 DEFB 170 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64761(#b170)
                ; (Dinner)
 40417 DEFB 170 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64761(#b170)
                ; (Dinner)
 40418 DEFB 154 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64619(#b154)
                ; (Exam Room)
 40419 DEFB 162 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64690(#b162)
                ; (White Room)
 40420 DEFB 162 ; Lesson #LESSON228 (REVISION LIBRARY): #R64690(#b162) (White
                ; Room)
 40421 DEFB 146 ; Lesson #LESSON229 (REVISION LIBRARY): #R64548(#b146) (Reading
                ; Room)
 40422 DEFB 162 ; Lesson #LESSON230 (REVISION LIBRARY): #R64690(#b162) (White
                ; Room)
 40423 DEFB 162 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64690(#b162)
                ; (White Room)
 40424 DEFB 154 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64619(#b154)
                ; (Exam Room)
 40425 DEFB 162 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64690(#b162)
                ; (White Room)
 40426 DEFB 154 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64619(#b154)
                ; (Exam Room)
 40427 DEFB 154 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 40428 DEFB 136 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64484(#b136)
                ; (Map Room)
 40429 DEFB 162 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64690(#b162)
                ; (White Room)
 40430 DEFB 146 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64548(#b146)
                ; (Reading Room)
 40431 DEFB 154 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64619(#b154)
                ; (Exam Room)
 40432 DEFB 162 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64690(#b162)
                ; (White Room)
 40433 DEFB 154 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 40434 DEFB 136 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64484(#b136)
                ; (Map Room)
 40435 DEFB 196 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64914(#b196) (Walkabout)
 40436 DEFB 196 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64914(#b196) (Walkabout)
 40437 DEFB 196 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64914(#b196) (Walkabout)
 40438 DEFB 200 ; Lesson #LESSON246 (PLAYTIME): #R64931(#b200) (Walk around the
                ; gym)
 40439 DEFB 202 ; Lesson #LESSON247 (PLAYTIME): #R64939(#b202) (Walk around the
                ; big window)
 40440 DEFB 200 ; Lesson #LESSON248 (PLAYTIME): #R64931(#b200) (Walk around the
                ; gym)
 40441 DEFB 198 ; Lesson #LESSON249 (PLAYTIME): #R64923(#b198) (Walk around the
                ; fire escape)
 40442 DEFB 202 ; Lesson #LESSON250 (PLAYTIME): #R64939(#b202) (Walk around the
                ; big window)
 40443 DEFB 196 ; Lesson #LESSON251 (PLAYTIME): #R64914(#b196) (Walkabout)
 40444 DEFB 206 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 40445 DEFB 206 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 40446 DEFB 198 ; Lesson #LESSON254 (PLAYTIME): #R64923(#b198) (Walk around the
                ; fire escape)
 40447 DEFB 202 ; Lesson #LESSON255 (PLAYTIME): #R64939(#b202) (Walk around the
                ; big window)

; Skool UDG references (LSBs) for row 6
;
; Used by the routine at #R24843.
b40448 DEFB 2,14,34,49,63,9,88,92,0,105,14,14,14,0,0,0
 40464 DEFB 0,105,14,166,21,21,21,21,21,21,21,21,21,21,21,21
 40480 DEFB 3,0,0,18,21,21,21,21,21,52,0,0,0,0,0,56
 40496 DEFB 62,67,62,67,62,67,62,67,62,67,0,0,0,0,0,0
 40512 DEFB 4,9,4,9,4,9,4,31,42,53,64,0,0,0,0,20
 40528 DEFB 0,0,64,121,121,121,139,144,144,144,144,144,144,144,144,189

; Character buffer for little boy no. 7 (#b158)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
b40544 DEFS 32

; Skool attribute data for row 6
;
; Used by the routine at #R24576.
b40576 DEFB 104,104,104,104,104,40,40,40,40,48,48,48,48,48,48,48
 40592 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 40608 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 40624 DEFB 48,48,48,48,48,48,48,48,112,112,32,32,32,32,32,32
 40640 DEFB 32,32,32,32,32,32,32,32,96,96,96,48,48,48,48,112
 40656 DEFB 112,112,112,48,48,48,104,104,104,104,104,104,104,104,104,104

; Personal timetable for little boy no. 7 (#b158)
;
; Used by the routine at #R26342.
b40672 DEFB 170 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64761(#b170)
                ; (Dinner)
 40673 DEFB 170 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64761(#b170)
                ; (Dinner)
 40674 DEFB 154 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64619(#b154)
                ; (Exam Room)
 40675 DEFB 162 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64690(#b162)
                ; (White Room)
 40676 DEFB 154 ; Lesson #LESSON228 (REVISION LIBRARY): #R64619(#b154) (Exam
                ; Room)
 40677 DEFB 146 ; Lesson #LESSON229 (REVISION LIBRARY): #R64548(#b146) (Reading
                ; Room)
 40678 DEFB 154 ; Lesson #LESSON230 (REVISION LIBRARY): #R64619(#b154) (Exam
                ; Room)
 40679 DEFB 154 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64619(#b154)
                ; (Exam Room)
 40680 DEFB 146 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64548(#b146)
                ; (Reading Room)
 40681 DEFB 162 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64690(#b162)
                ; (White Room)
 40682 DEFB 136 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64484(#b136)
                ; (Map Room)
 40683 DEFB 146 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64548(#b146)
                ; (Reading Room)
 40684 DEFB 162 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64690(#b162)
                ; (White Room)
 40685 DEFB 154 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 40686 DEFB 136 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64484(#b136)
                ; (Map Room)
 40687 DEFB 146 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64548(#b146)
                ; (Reading Room)
 40688 DEFB 162 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64690(#b162)
                ; (White Room)
 40689 DEFB 154 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 40690 DEFB 162 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64690(#b162)
                ; (White Room)
 40691 DEFB 196 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64914(#b196) (Walkabout)
 40692 DEFB 196 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64914(#b196) (Walkabout)
 40693 DEFB 196 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64914(#b196) (Walkabout)
 40694 DEFB 202 ; Lesson #LESSON246 (PLAYTIME): #R64939(#b202) (Walk around the
                ; big window)
 40695 DEFB 176 ; Lesson #LESSON247 (PLAYTIME): #R64801(#b176) (Revision
                ; Library)
 40696 DEFB 200 ; Lesson #LESSON248 (PLAYTIME): #R64931(#b200) (Walk around the
                ; gym)
 40697 DEFB 200 ; Lesson #LESSON249 (PLAYTIME): #R64931(#b200) (Walk around the
                ; gym)
 40698 DEFB 202 ; Lesson #LESSON250 (PLAYTIME): #R64939(#b202) (Walk around the
                ; big window)
 40699 DEFB 196 ; Lesson #LESSON251 (PLAYTIME): #R64914(#b196) (Walkabout)
 40700 DEFB 206 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 40701 DEFB 206 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 40702 DEFB 200 ; Lesson #LESSON254 (PLAYTIME): #R64931(#b200) (Walk around the
                ; gym)
 40703 DEFB 176 ; Lesson #LESSON255 (PLAYTIME): #R64801(#b176) (Revision
                ; Library)

; Skool UDG references (LSBs) for row 7
;
; Used by the routine at #R24843.
b40704 DEFB 3,18,35,50,64,77,43,43,43,43,43,96,13,121,126,131
 40720 DEFB 141,149,156,167,43,43,44,13,29,43,43,43,43,43,43,43
 40736 DEFB 1,1,1,1,1,1,1,39,46,1,1,1,1,1,1,1
 40752 DEFB 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
 40768 DEFB 1,1,1,1,1,19,24,32,43,54,65,74,80,88,92,96
 40784 DEFB 101,107,115,115,125,125,125,125,125,152,156,165,172,181,187,190

; Character buffer for little boy no. 8 (#b159)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
b40800 DEFS 32

; Skool attribute data for row 7
;
; Used by the routine at #R24576.
b40832 DEFB 32,32,32,32,32,32,32,32,48,32,32,48,48,48,48,48
 40848 DEFB 48,48,48,48,48,48,56,56,56,56,56,56,56,56,56,56
 40864 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 40880 DEFB 48,48,48,48,48,48,48,112,48,48,48,48,48,48,48,48
 40896 DEFB 48,48,48,48,48,112,112,112,48,48,48,48,48,48,48,112
 40912 DEFB 112,48,48,48,48,48,48,48,48,48,112,112,112,112,112,112

; Personal timetable for little boy no. 8 (#b159)
;
; Used by the routine at #R26342.
b40928 DEFB 170 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64761(#b170)
                ; (Dinner)
 40929 DEFB 170 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64761(#b170)
                ; (Dinner)
 40930 DEFB 154 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64619(#b154)
                ; (Exam Room)
 40931 DEFB 162 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64690(#b162)
                ; (White Room)
 40932 DEFB 154 ; Lesson #LESSON228 (REVISION LIBRARY): #R64619(#b154) (Exam
                ; Room)
 40933 DEFB 146 ; Lesson #LESSON229 (REVISION LIBRARY): #R64548(#b146) (Reading
                ; Room)
 40934 DEFB 162 ; Lesson #LESSON230 (REVISION LIBRARY): #R64690(#b162) (White
                ; Room)
 40935 DEFB 146 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64548(#b146)
                ; (Reading Room)
 40936 DEFB 154 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64619(#b154)
                ; (Exam Room)
 40937 DEFB 136 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64484(#b136)
                ; (Map Room)
 40938 DEFB 154 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64619(#b154)
                ; (Exam Room)
 40939 DEFB 136 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64484(#b136)
                ; (Map Room)
 40940 DEFB 146 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64548(#b146)
                ; (Reading Room)
 40941 DEFB 136 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64484(#b136)
                ; (Map Room)
 40942 DEFB 146 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64548(#b146)
                ; (Reading Room)
 40943 DEFB 154 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64619(#b154)
                ; (Exam Room)
 40944 DEFB 146 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64548(#b146)
                ; (Reading Room)
 40945 DEFB 154 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 40946 DEFB 136 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64484(#b136)
                ; (Map Room)
 40947 DEFB 196 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64914(#b196) (Walkabout)
 40948 DEFB 196 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64914(#b196) (Walkabout)
 40949 DEFB 196 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64914(#b196) (Walkabout)
 40950 DEFB 202 ; Lesson #LESSON246 (PLAYTIME): #R64939(#b202) (Walk around the
                ; big window)
 40951 DEFB 198 ; Lesson #LESSON247 (PLAYTIME): #R64923(#b198) (Walk around the
                ; fire escape)
 40952 DEFB 202 ; Lesson #LESSON248 (PLAYTIME): #R64939(#b202) (Walk around the
                ; big window)
 40953 DEFB 176 ; Lesson #LESSON249 (PLAYTIME): #R64801(#b176) (Revision
                ; Library)
 40954 DEFB 198 ; Lesson #LESSON250 (PLAYTIME): #R64923(#b198) (Walk around the
                ; fire escape)
 40955 DEFB 196 ; Lesson #LESSON251 (PLAYTIME): #R64914(#b196) (Walkabout)
 40956 DEFB 206 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 40957 DEFB 206 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 40958 DEFB 202 ; Lesson #LESSON254 (PLAYTIME): #R64939(#b202) (Walk around the
                ; big window)
 40959 DEFB 198 ; Lesson #LESSON255 (PLAYTIME): #R64923(#b198) (Walk around the
                ; fire escape)

; Skool UDG references (LSBs) for row 8
;
; Used by the routine at #R24843.
b40960 DEFB 4,19,19,51,51,14,0,0,0,0,0,112,117,122,26,132
 40976 DEFB 0,0,0,0,0,25,186,14,14,0,0,0,0,0,0,0
 40992 DEFB 0,0,0,0,0,0,0,40,47,0,0,0,0,54,0,0
 41008 DEFB 0,0,70,0,0,0,0,54,0,0,0,0,104,0,0,0
 41024 DEFB 0,10,0,0,0,20,25,33,0,0,0,0,81,57,20,0
 41040 DEFB 26,108,116,122,122,122,122,122,148,153,157,166,173,0,0,26

; Character buffer for little boy no. 9 (#b160)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
b41056 DEFS 32

; Skool attribute data for row 8
;
; Used by the routine at #R24576.
b41088 DEFB 32,32,32,32,32,32,32,32,32,32,32,48,48,48,56,48
 41104 DEFB 48,48,48,48,48,48,56,56,56,56,56,56,56,56,56,56
 41120 DEFB 56,56,56,56,56,56,56,48,48,48,48,48,48,50,48,48
 41136 DEFB 48,48,52,48,48,48,48,50,48,48,48,48,49,48,48,48
 41152 DEFB 48,50,48,48,48,112,112,112,48,48,48,48,48,56,112,112
 41168 DEFB 112,48,48,48,48,48,48,48,48,48,112,112,112,112,112,112

; Personal timetable for little boy no. 9 (#b160)
;
; Used by the routine at #R26342.
b41184 DEFB 170 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64761(#b170)
                ; (Dinner)
 41185 DEFB 170 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64761(#b170)
                ; (Dinner)
 41186 DEFB 154 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64619(#b154)
                ; (Exam Room)
 41187 DEFB 154 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64619(#b154)
                ; (Exam Room)
 41188 DEFB 154 ; Lesson #LESSON228 (REVISION LIBRARY): #R64619(#b154) (Exam
                ; Room)
 41189 DEFB 136 ; Lesson #LESSON229 (REVISION LIBRARY): #R64484(#b136) (Map
                ; Room)
 41190 DEFB 162 ; Lesson #LESSON230 (REVISION LIBRARY): #R64690(#b162) (White
                ; Room)
 41191 DEFB 154 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64619(#b154)
                ; (Exam Room)
 41192 DEFB 136 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64484(#b136)
                ; (Map Room)
 41193 DEFB 136 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64484(#b136)
                ; (Map Room)
 41194 DEFB 162 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64690(#b162)
                ; (White Room)
 41195 DEFB 154 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 41196 DEFB 154 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 41197 DEFB 146 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64548(#b146)
                ; (Reading Room)
 41198 DEFB 154 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 41199 DEFB 146 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64548(#b146)
                ; (Reading Room)
 41200 DEFB 146 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64548(#b146)
                ; (Reading Room)
 41201 DEFB 154 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 41202 DEFB 136 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64484(#b136)
                ; (Map Room)
 41203 DEFB 196 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64914(#b196) (Walkabout)
 41204 DEFB 196 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64914(#b196) (Walkabout)
 41205 DEFB 196 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64914(#b196) (Walkabout)
 41206 DEFB 202 ; Lesson #LESSON246 (PLAYTIME): #R64939(#b202) (Walk around the
                ; big window)
 41207 DEFB 200 ; Lesson #LESSON247 (PLAYTIME): #R64931(#b200) (Walk around the
                ; gym)
 41208 DEFB 196 ; Lesson #LESSON248 (PLAYTIME): #R64914(#b196) (Walkabout)
 41209 DEFB 176 ; Lesson #LESSON249 (PLAYTIME): #R64801(#b176) (Revision
                ; Library)
 41210 DEFB 198 ; Lesson #LESSON250 (PLAYTIME): #R64923(#b198) (Walk around the
                ; fire escape)
 41211 DEFB 196 ; Lesson #LESSON251 (PLAYTIME): #R64914(#b196) (Walkabout)
 41212 DEFB 206 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 41213 DEFB 206 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 41214 DEFB 176 ; Lesson #LESSON254 (PLAYTIME): #R64801(#b176) (Revision
                ; Library)
 41215 DEFB 200 ; Lesson #LESSON255 (PLAYTIME): #R64931(#b200) (Walk around the
                ; gym)

; Skool UDG references (LSBs) for row 9
;
; Used by the routine at #R24843.
b41216 DEFB 5,20,36,52,65,14,0,52,101,106,219,52,105,123,127,26
 41232 DEFB 142,0,0,0,52,101,106,105,14,0,238,237,236,235,234,233
 41248 DEFB 232,231,0,0,0,0,0,40,47,222,221,220,219,218,217,216
 41264 DEFB 215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 41280 DEFB 0,0,0,0,0,20,26,2,0,0,0,75,57,89,93,0
 41296 DEFB 26,109,109,109,126,0,0,0,149,153,20,166,173,0,0,26

; Character buffer for little boy no. 10 (#b161)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
b41312 DEFS 32

; Skool attribute data for row 9
;
; Used by the routine at #R24576.
b41344 DEFB 32,104,104,104,104,32,32,40,40,40,32,40,48,48,48,56
 41360 DEFB 48,48,48,48,40,40,40,56,56,56,56,56,56,56,56,56
 41376 DEFB 56,56,56,56,56,56,56,48,48,48,48,48,48,48,48,48
 41392 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 41408 DEFB 48,48,48,48,48,112,112,104,48,48,48,48,56,112,112,112
 41424 DEFB 112,48,48,48,48,112,112,112,112,48,112,112,112,112,112,112

; Personal timetable for little boy no. 10 (#b161)
;
; Used by the routine at #R26342.
b41440 DEFB 170 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64761(#b170)
                ; (Dinner)
 41441 DEFB 170 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64761(#b170)
                ; (Dinner)
 41442 DEFB 154 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64619(#b154)
                ; (Exam Room)
 41443 DEFB 154 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64619(#b154)
                ; (Exam Room)
 41444 DEFB 154 ; Lesson #LESSON228 (REVISION LIBRARY): #R64619(#b154) (Exam
                ; Room)
 41445 DEFB 136 ; Lesson #LESSON229 (REVISION LIBRARY): #R64484(#b136) (Map
                ; Room)
 41446 DEFB 176 ; Lesson #LESSON230 (REVISION LIBRARY): #R64801(#b176)
                ; (Revision Library)
 41447 DEFB 154 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64619(#b154)
                ; (Exam Room)
 41448 DEFB 162 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64690(#b162)
                ; (White Room)
 41449 DEFB 136 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64484(#b136)
                ; (Map Room)
 41450 DEFB 136 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64484(#b136)
                ; (Map Room)
 41451 DEFB 146 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64548(#b146)
                ; (Reading Room)
 41452 DEFB 154 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 41453 DEFB 154 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 41454 DEFB 146 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64548(#b146)
                ; (Reading Room)
 41455 DEFB 154 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64619(#b154)
                ; (Exam Room)
 41456 DEFB 162 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64690(#b162)
                ; (White Room)
 41457 DEFB 154 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64619(#b154)
                ; (Exam Room)
 41458 DEFB 162 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64690(#b162)
                ; (White Room)
 41459 DEFB 210 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64240(#b210) (Tell ERIC about ANGELFACE)
 41460 DEFB 208 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64230(#b208) (Tell ERIC about EINSTEIN)
 41461 DEFB 208 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64230(#b208) (Tell ERIC about BOY WANDER)
 41462 DEFB 176 ; Lesson #LESSON246 (PLAYTIME): #R64801(#b176) (Revision
                ; Library)
 41463 DEFB 200 ; Lesson #LESSON247 (PLAYTIME): #R64931(#b200) (Walk around the
                ; gym)
 41464 DEFB 196 ; Lesson #LESSON248 (PLAYTIME): #R64914(#b196) (Walkabout)
 41465 DEFB 196 ; Lesson #LESSON249 (PLAYTIME): #R64914(#b196) (Walkabout)
 41466 DEFB 176 ; Lesson #LESSON250 (PLAYTIME): #R64801(#b176) (Revision
                ; Library)
 41467 DEFB 196 ; Lesson #LESSON251 (PLAYTIME): #R64914(#b196) (Walkabout)
 41468 DEFB 206 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 41469 DEFB 206 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 41470 DEFB 176 ; Lesson #LESSON254 (PLAYTIME): #R64801(#b176) (Revision
                ; Library)
 41471 DEFB 202 ; Lesson #LESSON255 (PLAYTIME): #R64939(#b202) (Walk around the
                ; big window)

; Skool UDG references (LSBs) for row 10
;
; Used by the routine at #R24843.
b41472 DEFB 5,21,26,53,66,14,0,52,101,106,0,52,105,14,128,133
 41488 DEFB 26,150,157,0,52,101,106,105,14,0,230,229,228,227,226,225
 41504 DEFB 224,223,0,0,0,0,0,40,47,214,213,212,211,210,209,208
 41520 DEFB 207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 41536 DEFB 0,0,0,0,0,20,26,34,0,55,66,57,82,76,0,0
 41552 DEFB 26,110,0,0,127,0,0,0,150,153,20,166,173,0,0,26

; Character buffer for little boy no. 11 (#b162)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
@label=BOY11CBUF
b41568 DEFS 32

; Skool attribute data for row 10
;
; Used by the routine at #R24576.
b41600 DEFB 32,104,104,104,104,32,32,40,40,40,32,40,48,48,48,48
 41616 DEFB 56,48,48,48,40,40,40,56,56,56,56,56,56,56,56,56
 41632 DEFB 56,56,56,56,56,56,56,48,48,48,48,48,48,48,48,48
 41648 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 41664 DEFB 48,48,48,48,48,112,112,104,48,48,48,56,48,112,112,112
 41680 DEFB 112,48,48,48,48,112,112,112,112,48,112,112,112,112,112,112

; Personal timetable for little boy no. 11 (#b162)
;
; Used by the routine at #R26342.
b41696 DEFB 170 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64761(#b170)
                ; (Dinner)
 41697 DEFB 170 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64761(#b170)
                ; (Dinner)
 41698 DEFB 154 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64619(#b154)
                ; (Exam Room)
 41699 DEFB 154 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64619(#b154)
                ; (Exam Room)
 41700 DEFB 176 ; Lesson #LESSON228 (REVISION LIBRARY): #R64801(#b176)
                ; (Revision Library)
 41701 DEFB 176 ; Lesson #LESSON229 (REVISION LIBRARY): #R64801(#b176)
                ; (Revision Library)
 41702 DEFB 176 ; Lesson #LESSON230 (REVISION LIBRARY): #R64801(#b176)
                ; (Revision Library)
 41703 DEFB 136 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64484(#b136) (Map
                ; Room)
 41704 DEFB 146 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64548(#b146)
                ; (Reading Room)
 41705 DEFB 146 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64548(#b146)
                ; (Reading Room)
 41706 DEFB 146 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64548(#b146)
                ; (Reading Room)
 41707 DEFB 162 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64690(#b162)
                ; (White Room)
 41708 DEFB 162 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64690(#b162)
                ; (White Room)
 41709 DEFB 162 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64690(#b162)
                ; (White Room)
 41710 DEFB 162 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64690(#b162)
                ; (White Room)
 41711 DEFB 136 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64484(#b136) (Map
                ; Room)
 41712 DEFB 136 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64484(#b136) (Map
                ; Room)
 41713 DEFB 162 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64690(#b162)
                ; (White Room)
 41714 DEFB 146 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64548(#b146)
                ; (Reading Room)
 41715 DEFB 196 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64914(#b196) (Walkabout)
 41716 DEFB 196 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64914(#b196) (Walkabout)
 41717 DEFB 196 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64914(#b196) (Walkabout)
 41718 DEFB 176 ; Lesson #LESSON246 (PLAYTIME): #R64801(#b176) (Revision
                ; Library)
 41719 DEFB 202 ; Lesson #LESSON247 (PLAYTIME): #R64939(#b202) (Walk around the
                ; big window)
 41720 DEFB 196 ; Lesson #LESSON248 (PLAYTIME): #R64914(#b196) (Walkabout)
 41721 DEFB 196 ; Lesson #LESSON249 (PLAYTIME): #R64914(#b196) (Walkabout)
 41722 DEFB 176 ; Lesson #LESSON250 (PLAYTIME): #R64801(#b176) (Revision
                ; Library)
 41723 DEFB 196 ; Lesson #LESSON251 (PLAYTIME): #R64914(#b196) (Walkabout)
 41724 DEFB 206 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 41725 DEFB 206 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64975(#b206) (Stampede)
 41726 DEFB 176 ; Lesson #LESSON254 (PLAYTIME): #R64801(#b176) (Revision
                ; Library)
 41727 DEFB 196 ; Lesson #LESSON255 (PLAYTIME): #R64914(#b196) (Walkabout)

; Skool UDG references (LSBs) for row 11
;
; Used by the routine at #R24843.
b41728 DEFB 6,22,37,54,67,78,0,93,21,21,108,113,105,14,14,134
 41744 DEFB 26,26,158,168,0,0,0,105,14,0,43,43,43,43,43,43
 41760 DEFB 1,1,14,19,14,19,14,40,47,1,1,1,1,1,1,1
 41776 DEFB 1,68,71,68,71,68,0,0,0,0,0,93,105,71,105,71
 41792 DEFB 5,11,5,11,5,21,26,0,44,56,57,57,83,0,0,0
 41808 DEFB 26,111,103,103,128,20,0,0,150,153,20,166,173,0,0,26

; Character buffer for MR WACKER (#b163)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
@label=WACKERCBUF
b41824 DEFS 32

; Skool attribute data for row 11
;
; Used by the routine at #R24576.
b41856 DEFB 32,32,32,32,32,32,32,32,32,32,32,32,48,48,48,48
 41872 DEFB 48,56,48,48,48,48,48,56,56,56,56,56,56,56,56,56
 41888 DEFB 56,56,56,56,56,56,56,48,48,48,48,48,48,48,48,48
 41904 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 41920 DEFB 48,48,48,48,48,112,112,48,48,48,56,48,48,112,112,112
 41936 DEFB 112,48,48,48,48,112,112,112,112,48,112,112,112,112,112,112

; Personal timetable for MR WACKER (#b163)
;
; Used by the routine at #R26342.
b41952 DEFB 186 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64869(#b186)
                ; (Head's study)
 41953 DEFB 184 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64857(#b184)
                ; (Dinner duty)
 41954 DEFB 132 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64436(#b132)
                ; (Exam Room)
 41955 DEFB 190 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64883(#b190)
                ; (Walkabout)
 41956 DEFB 130 ; Lesson #LESSON228 (REVISION LIBRARY): #R64410(#b130) (Reading
                ; Room)
 41957 DEFB 190 ; Lesson #LESSON229 (REVISION LIBRARY): #R64883(#b190)
                ; (Walkabout)
 41958 DEFB 190 ; Lesson #LESSON230 (REVISION LIBRARY): #R64883(#b190)
                ; (Walkabout)
 41959 DEFB 132 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64436(#b132)
                ; (Exam Room)
 41960 DEFB 130 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64410(#b130)
                ; (Reading Room)
 41961 DEFB 132 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64436(#b132)
                ; (Exam Room)
 41962 DEFB 134 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64458(#b134)
                ; (White Room)
 41963 DEFB 130 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64410(#b130)
                ; (Reading Room)
 41964 DEFB 134 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64458(#b134)
                ; (White Room)
 41965 DEFB 128 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64384(#b128)
                ; (Map Room)
 41966 DEFB 132 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64436(#b132)
                ; (Exam Room)
 41967 DEFB 128 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64384(#b128) (Map
                ; Room)
 41968 DEFB 190 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64883(#b190)
                ; (Walkabout)
 41969 DEFB 132 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64436(#b132)
                ; (Exam Room)
 41970 DEFB 190 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64883(#b190)
                ; (Walkabout)
 41971 DEFB 190 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64883(#b190) (Walkabout)
 41972 DEFB 214 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64288(#b214) (Wait for EINSTEIN to grass on ERIC)
 41973 DEFB 218 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64341(#b218) (Look for the pea-shooter)
 41974 DEFB 190 ; Lesson #LESSON246 (PLAYTIME): #R64883(#b190) (Walkabout)
 41975 DEFB 186 ; Lesson #LESSON247 (PLAYTIME): #R64869(#b186) (Head's study)
 41976 DEFB 190 ; Lesson #LESSON248 (PLAYTIME): #R64883(#b190) (Walkabout)
 41977 DEFB 190 ; Lesson #LESSON249 (PLAYTIME): #R64883(#b190) (Walkabout)
 41978 DEFB 190 ; Lesson #LESSON250 (PLAYTIME): #R64883(#b190) (Walkabout)
 41979 DEFB 190 ; Lesson #LESSON251 (PLAYTIME): #R64883(#b190) (Walkabout)
 41980 DEFB 190 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64883(#b190) (Walkabout)
 41981 DEFB 196 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64914(#b196) (Walkabout)
 41982 DEFB 188 ; Lesson #LESSON254 (PLAYTIME): #R64876(#b188) (Staff room)
 41983 DEFB 190 ; Lesson #LESSON255 (PLAYTIME): #R64883(#b190) (Walkabout)

; Skool UDG references (LSBs) for row 12
;
; Used by the routine at #R24843.
b41984 DEFB 7,23,38,55,68,79,89,94,102,102,109,114,105,14,14,135
 42000 DEFB 125,26,26,92,0,0,0,105,14,0,0,0,0,210,215,210
 42016 DEFB 4,9,4,9,4,9,4,40,47,0,0,9,4,9,4,57
 42032 DEFB 63,69,63,69,63,69,63,0,0,0,0,94,69,63,69,63
 42048 DEFB 6,12,6,12,6,12,26,0,45,57,57,76,84,0,0,0
 42064 DEFB 26,111,103,103,129,20,0,0,150,154,158,166,173,0,0,26

; Character buffer for MR ROCKITT (#b164)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
@label=ROCKITTCBUF
b42080 DEFS 32

; Skool attribute data for row 12
;
; Used by the routine at #R24576.
b42112 DEFB 32,32,32,32,32,32,32,32,32,32,32,32,48,48,48,48
 42128 DEFB 48,48,56,48,48,48,48,56,56,56,56,56,56,56,56,56
 42144 DEFB 56,56,56,56,56,56,56,48,48,48,48,48,48,48,48,48
 42160 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 42176 DEFB 48,48,48,48,48,112,112,48,48,56,48,48,48,112,112,112
 42192 DEFB 112,48,48,48,48,112,112,112,112,48,112,112,112,112,112,112

; Personal timetable for MR ROCKITT (#b164)
;
; Used by the routine at #R26342.
b42208 DEFB 188 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64876(#b188) (Staff
                ; room)
 42209 DEFB 188 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64876(#b188) (Staff
                ; room)
 42210 DEFB 196 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64914(#b196)
                ; (Walkabout)
 42211 DEFB 132 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64436(#b132)
                ; (Exam Room)
 42212 DEFB 132 ; Lesson #LESSON228 (REVISION LIBRARY): #R64436(#b132) (Exam
                ; Room)
@bfix=DEFB 188  ; Lesson #LESSON229 (REVISION LIBRARY): #R64876(#b188) (Staff
@bfix=          ; room)
 42213 DEFB 154 ; Lesson #LESSON229 (REVISION LIBRARY): #R64619(#b154) (Exam
                ; Room) (this is a #BUG#rockittExamRoom(bug))
 42214 DEFB 134 ; Lesson #LESSON230 (REVISION LIBRARY): #R64458(#b134) (White
                ; Room)
 42215 DEFB 134 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64458(#b134)
                ; (White Room)
 42216 DEFB 132 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64436(#b132)
                ; (Exam Room)
 42217 DEFB 130 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64410(#b130)
                ; (Reading Room)
 42218 DEFB 132 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64436(#b132)
                ; (Exam Room)
 42219 DEFB 132 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64436(#b132)
                ; (Exam Room)
 42220 DEFB 132 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64436(#b132)
                ; (Exam Room)
 42221 DEFB 132 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64436(#b132)
                ; (Exam Room)
 42222 DEFB 134 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64458(#b134)
                ; (White Room)
 42223 DEFB 130 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64410(#b130)
                ; (Reading Room)
 42224 DEFB 130 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64410(#b130)
                ; (Reading Room)
 42225 DEFB 134 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64458(#b134)
                ; (White Room)
 42226 DEFB 134 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64458(#b134)
                ; (White Room)
 42227 DEFB 222 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64219(#b222) (Mumps duty)
 42228 DEFB 190 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64883(#b190) (Walkabout)
 42229 DEFB 190 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64883(#b190) (Walkabout)
 42230 DEFB 190 ; Lesson #LESSON246 (PLAYTIME): #R64883(#b190) (Walkabout)
 42231 DEFB 188 ; Lesson #LESSON247 (PLAYTIME): #R64876(#b188) (Staff room)
 42232 DEFB 196 ; Lesson #LESSON248 (PLAYTIME): #R64914(#b196) (Walkabout)
 42233 DEFB 188 ; Lesson #LESSON249 (PLAYTIME): #R64876(#b188) (Staff room)
 42234 DEFB 196 ; Lesson #LESSON250 (PLAYTIME): #R64914(#b196) (Walkabout)
 42235 DEFB 196 ; Lesson #LESSON251 (PLAYTIME): #R64914(#b196) (Walkabout)
 42236 DEFB 196 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64914(#b196) (Walkabout)
 42237 DEFB 196 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64914(#b196) (Walkabout)
 42238 DEFB 188 ; Lesson #LESSON254 (PLAYTIME): #R64876(#b188) (Staff room)
 42239 DEFB 196 ; Lesson #LESSON255 (PLAYTIME): #R64914(#b196) (Walkabout)

; Skool UDG references (LSBs) for row 13
;
; Used by the routine at #R24843.
b42240 DEFB 8,24,39,56,69,80,90,43,43,43,110,115,118,124,129,136
 42256 DEFB 143,151,159,169,43,43,43,191,196,43,43,43,43,211,216,211
 42272 DEFB 5,10,5,10,5,10,5,41,48,1,1,10,5,10,5,58
 42288 DEFB 64,58,64,58,64,58,64,1,1,1,1,95,58,64,58,64
 42304 DEFB 7,13,7,13,7,13,27,1,46,58,67,77,85,90,94,97
 42320 DEFB 102,111,103,103,129,20,0,0,150,155,159,166,174,0,0,26

; Character buffer for MR WITHIT (#b165)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
b42336 DEFS 32

; Skool attribute data for row 13
;
; Used by the routine at #R24576.
b42368 DEFB 32,32,32,32,32,32,32,32,32,32,32,32,48,48,48,48
 42384 DEFB 48,48,48,48,48,48,48,56,56,56,56,56,56,56,56,56
 42400 DEFB 56,56,56,56,56,56,56,48,48,48,48,48,48,48,48,48
 42416 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 42432 DEFB 48,48,48,48,48,112,112,48,48,48,48,48,48,48,112,112
 42448 DEFB 112,48,48,48,48,112,112,112,112,48,112,112,112,112,112,112

; Personal timetable for MR WITHIT (#b165)
;
; Used by the routine at #R26342.
b42464 DEFB 184 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64857(#b184)
                ; (Dinner duty)
 42465 DEFB 198 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64923(#b198) (Walk
                ; around the fire escape)
 42466 DEFB 130 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64410(#b130)
                ; (Reading Room)
 42467 DEFB 190 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64883(#b190)
                ; (Walkabout)
 42468 DEFB 202 ; Lesson #LESSON228 (REVISION LIBRARY): #R64939(#b202) (Walk
                ; around the big window)
 42469 DEFB 128 ; Lesson #LESSON229 (REVISION LIBRARY): #R64384(#b128) (Map
                ; Room)
 42470 DEFB 132 ; Lesson #LESSON230 (REVISION LIBRARY): #R64436(#b132) (Exam
                ; Room)
 42471 DEFB 128 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64384(#b128) (Map
                ; Room)
 42472 DEFB 128 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64384(#b128)
                ; (Map Room)
 42473 DEFB 128 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64384(#b128)
                ; (Map Room)
 42474 DEFB 128 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64384(#b128)
                ; (Map Room)
 42475 DEFB 128 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64384(#b128)
                ; (Map Room)
 42476 DEFB 128 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64384(#b128)
                ; (Map Room)
 42477 DEFB 134 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64458(#b134)
                ; (White Room)
 42478 DEFB 128 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64384(#b128)
                ; (Map Room)
 42479 DEFB 132 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64436(#b132)
                ; (Exam Room)
 42480 DEFB 128 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64384(#b128) (Map
                ; Room)
 42481 DEFB 196 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64914(#b196)
                ; (Walkabout)
 42482 DEFB 128 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64384(#b128)
                ; (Map Room)
 42483 DEFB 190 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64883(#b190) (Walkabout)
 42484 DEFB 190 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64883(#b190) (Walkabout)
 42485 DEFB 190 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64883(#b190) (Walkabout)
 42486 DEFB 190 ; Lesson #LESSON246 (PLAYTIME): #R64883(#b190) (Walkabout)
 42487 DEFB 188 ; Lesson #LESSON247 (PLAYTIME): #R64876(#b188) (Staff room)
 42488 DEFB 188 ; Lesson #LESSON248 (PLAYTIME): #R64876(#b188) (Staff room)
 42489 DEFB 196 ; Lesson #LESSON249 (PLAYTIME): #R64914(#b196) (Walkabout)
 42490 DEFB 188 ; Lesson #LESSON250 (PLAYTIME): #R64876(#b188) (Staff room)
 42491 DEFB 188 ; Lesson #LESSON251 (PLAYTIME): #R64876(#b188) (Staff room)
 42492 DEFB 196 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64914(#b196) (Walkabout)
 42493 DEFB 196 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64914(#b196) (Walkabout)
 42494 DEFB 188 ; Lesson #LESSON254 (PLAYTIME): #R64876(#b188) (Staff room)
 42495 DEFB 188 ; Lesson #LESSON255 (PLAYTIME): #R64876(#b188) (Staff room)

; Skool UDG references (LSBs) for row 14
;
; Used by the routine at #R24843.
b42496 DEFB 9,25,9,0,70,81,0,0,0,0,0,0,119,26,130,137
 42512 DEFB 144,152,0,0,0,25,14,14,14,0,95,0,85,0,98,25
 42528 DEFB 6,11,11,20,20,29,0,0,0,0,0,0,0,0,0,0
 42544 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,106,0,0,106
 42560 DEFB 0,14,0,17,0,20,0,26,0,0,68,78,86,91,20,98
 42576 DEFB 103,111,103,103,129,20,0,0,150,155,160,167,175,0,0,26

; Character buffer for MR CREAK (#b166)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
b42592 DEFS 32

; Skool attribute data for row 14
;
; Used by the routine at #R24576.
b42624 DEFB 120,120,120,120,120,120,48,48,48,48,48,48,48,56,48,48
 42640 DEFB 48,48,48,48,48,48,48,48,48,48,52,48,50,48,49,48
 42656 DEFB 48,48,48,24,48,48,24,24,24,24,24,24,24,24,24,24
 42672 DEFB 24,24,24,24,24,24,24,24,24,24,24,24,24,48,48,48
 42688 DEFB 48,51,48,50,48,112,112,112,48,48,48,48,48,48,56,48
 42704 DEFB 48,48,48,48,48,112,112,112,112,48,112,112,112,112,112,112

; Personal timetable for MR CREAK (#b166)
;
; Used by the routine at #R26342.
b42720 DEFB 188 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64876(#b188) (Staff
                ; room)
 42721 DEFB 188 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64876(#b188) (Staff
                ; room)
 42722 DEFB 188 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64876(#b188)
                ; (Staff room)
@bfix=DEFB 134  ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64458(#b134)
@bfix=          ; (White Room)
 42723 DEFB 188 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64876(#b188)
                ; (Staff room)
 42724 DEFB 134 ; Lesson #LESSON228 (REVISION LIBRARY): #R64458(#b134) (White
                ; Room)
 42725 DEFB 130 ; Lesson #LESSON229 (REVISION LIBRARY): #R64410(#b130) (Reading
                ; Room)
@bfix=DEFB 188  ; Lesson #LESSON230 (REVISION LIBRARY): #R64876(#b188) (Staff
@bfix=          ; room)
 42726 DEFB 130 ; Lesson #LESSON230 (REVISION LIBRARY): #R64410(#b130) (Reading
                ; Room) (this is a #BUG#emptyClass(bug))
 42727 DEFB 130 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64410(#b130)
                ; (Reading Room)
 42728 DEFB 134 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64458(#b134)
                ; (White Room)
 42729 DEFB 134 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64458(#b134)
                ; (White Room)
 42730 DEFB 130 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64410(#b130)
                ; (Reading Room)
 42731 DEFB 134 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64458(#b134)
                ; (White Room)
 42732 DEFB 130 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64410(#b130)
                ; (Reading Room)
 42733 DEFB 130 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64410(#b130)
                ; (Reading Room)
 42734 DEFB 130 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64410(#b130)
                ; (Reading Room)
 42735 DEFB 134 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64458(#b134)
                ; (White Room)
 42736 DEFB 134 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64458(#b134)
                ; (White Room)
 42737 DEFB 188 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64876(#b188)
                ; (Staff room)
 42738 DEFB 130 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64410(#b130)
                ; (Reading Room)
 42739 DEFB 190 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64883(#b190) (Walkabout)
 42740 DEFB 190 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64883(#b190) (Walkabout)
 42741 DEFB 190 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64883(#b190) (Walkabout)
 42742 DEFB 188 ; Lesson #LESSON246 (PLAYTIME): #R64876(#b188) (Staff room)
 42743 DEFB 188 ; Lesson #LESSON247 (PLAYTIME): #R64876(#b188) (Staff room)
 42744 DEFB 188 ; Lesson #LESSON248 (PLAYTIME): #R64876(#b188) (Staff room)
 42745 DEFB 188 ; Lesson #LESSON249 (PLAYTIME): #R64876(#b188) (Staff room)
 42746 DEFB 188 ; Lesson #LESSON250 (PLAYTIME): #R64876(#b188) (Staff room)
 42747 DEFB 188 ; Lesson #LESSON251 (PLAYTIME): #R64876(#b188) (Staff room)
 42748 DEFB 196 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64914(#b196) (Walkabout)
 42749 DEFB 196 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64914(#b196) (Walkabout)
 42750 DEFB 188 ; Lesson #LESSON254 (PLAYTIME): #R64876(#b188) (Staff room)
 42751 DEFB 188 ; Lesson #LESSON255 (PLAYTIME): #R64876(#b188) (Staff room)

; Skool UDG references (LSBs) for row 15
;
; Used by the routine at #R24843.
b42752 DEFB 9,25,40,57,71,82,0,0,0,0,0,0,120,26,26,138
 42768 DEFB 145,153,160,0,0,25,187,148,14,0,0,0,0,0,0,25
 42784 DEFB 6,11,11,20,24,30,0,0,0,0,0,0,0,0,0,0
 42800 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,106,0,0,106
 42816 DEFB 0,0,0,0,0,20,28,35,0,59,69,79,87,57,57,99
 42832 DEFB 103,111,103,103,129,20,0,0,150,155,161,168,176,0,0,26

; Character buffer for BOY WANDER (#b167)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
b42848 DEFS 32

; Skool attribute data for row 15
;
; Used by the routine at #R24576.
b42880 DEFB 120,120,120,120,120,120,48,48,48,48,48,48,48,48,56,48
 42896 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 42912 DEFB 48,48,48,24,48,48,24,24,24,24,24,24,24,24,24,24
 42928 DEFB 24,24,24,24,24,24,24,24,24,24,24,24,24,48,48,48
 42944 DEFB 48,48,48,48,48,112,112,112,48,48,48,48,48,56,48,48
 42960 DEFB 48,48,48,48,48,112,112,112,112,48,112,112,112,112,112,112

; Personal timetable for BOY WANDER (#b167)
;
; Used by the routine at #R26342.
b42976 DEFB 172 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64769(#b172)
                ; (Dinner)
 42977 DEFB 172 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64769(#b172)
                ; (Dinner)
 42978 DEFB 156 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64631(#b156)
                ; (Exam Room)
 42979 DEFB 156 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64631(#b156)
                ; (Exam Room)
 42980 DEFB 178 ; Lesson #LESSON228 (REVISION LIBRARY): #R64809(#b178)
                ; (Revision Library)
 42981 DEFB 140 ; Lesson #LESSON229 (REVISION LIBRARY): #R64496(#b140) (Map
                ; Room)
 42982 DEFB 178 ; Lesson #LESSON230 (REVISION LIBRARY): #R64809(#b178)
                ; (Revision Library)
 42983 DEFB 156 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64631(#b156)
                ; (Exam Room)
 42984 DEFB 148 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64560(#b148)
                ; (Reading Room)
 42985 DEFB 148 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64560(#b148)
                ; (Reading Room)
 42986 DEFB 148 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64560(#b148)
                ; (Reading Room)
 42987 DEFB 164 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64702(#b164)
                ; (White Room)
 42988 DEFB 178 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64809(#b178)
                ; (Revision Library)
 42989 DEFB 178 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64809(#b178)
                ; (Revision Library)
 42990 DEFB 164 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64702(#b164)
                ; (White Room)
 42991 DEFB 156 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64631(#b156)
                ; (Exam Room)
 42992 DEFB 140 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64496(#b140) (Map
                ; Room)
 42993 DEFB 164 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64702(#b164)
                ; (White Room)
 42994 DEFB 148 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64560(#b148)
                ; (Reading Room)
 42995 DEFB 196 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64914(#b196) (Walkabout)
 42996 DEFB 196 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64914(#b196) (Walkabout)
 42997 DEFB 216 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64314(#b216) (Collect the pea-shooter)
 42998 DEFB 192 ; Lesson #LESSON246 (PLAYTIME): #R64892(#b192) (Write on the
                ; boards)
 42999 DEFB 194 ; Lesson #LESSON247 (PLAYTIME): #R64988(#b194) (Walkabout)
 43000 DEFB 192 ; Lesson #LESSON248 (PLAYTIME): #R64892(#b192) (Write on the
                ; boards)
 43001 DEFB 192 ; Lesson #LESSON249 (PLAYTIME): #R64892(#b192) (Write on the
                ; boards)
 43002 DEFB 192 ; Lesson #LESSON250 (PLAYTIME): #R64892(#b192) (Write on the
                ; boards)
 43003 DEFB 194 ; Lesson #LESSON251 (PLAYTIME): #R64988(#b194) (Walkabout)
 43004 DEFB 194 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64988(#b194) (Walkabout)
 43005 DEFB 194 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64988(#b194) (Walkabout)
 43006 DEFB 192 ; Lesson #LESSON254 (PLAYTIME): #R64892(#b192) (Write on the
                ; boards)
 43007 DEFB 194 ; Lesson #LESSON255 (PLAYTIME): #R64988(#b194) (Walkabout)

; Skool UDG references (LSBs) for row 16
;
; Used by the routine at #R24843.
b43008 DEFB 10,26,9,0,70,81,0,0,0,0,0,0,9,125,26,26
 43024 DEFB 146,154,161,170,0,125,188,105,14,0,0,0,0,0,0,25
 43040 DEFB 6,11,12,21,25,31,21,21,21,21,21,21,21,21,21,21
 43056 DEFB 21,21,21,21,21,21,21,73,77,83,21,96,21,113,0,106
 43072 DEFB 0,0,0,0,0,20,26,36,47,60,61,70,57,57,76,26
 43088 DEFB 103,111,103,103,129,134,140,145,150,155,162,169,177,182,0,26

; Character buffer for ANGELFACE (#b168)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
@label=BULLYCBUF
b43104 DEFS 32

; Skool attribute data for row 16
;
; Used by the routine at #R24576.
b43136 DEFB 120,120,120,120,120,120,48,48,48,48,48,48,112,112,112,120
 43152 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 43168 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 43184 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 43200 DEFB 48,48,48,48,48,112,112,48,48,48,48,48,120,112,112,112
 43216 DEFB 48,48,48,48,48,112,112,112,112,48,112,112,112,112,112,112

; Personal timetable for ANGELFACE (#b168)
;
; Used by the routine at #R26342.
b43232 DEFB 174 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64785(#b174)
                ; (Dinner)
 43233 DEFB 174 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64785(#b174)
                ; (Dinner)
 43234 DEFB 158 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64658(#b158)
                ; (Exam Room)
 43235 DEFB 158 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64658(#b158)
                ; (Exam Room)
 43236 DEFB 166 ; Lesson #LESSON228 (REVISION LIBRARY): #R64729(#b166) (White
                ; Room)
 43237 DEFB 180 ; Lesson #LESSON229 (REVISION LIBRARY): #R64825(#b180)
                ; (Revision Library)
 43238 DEFB 180 ; Lesson #LESSON230 (REVISION LIBRARY): #R64825(#b180)
                ; (Revision Library)
 43239 DEFB 142 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64516(#b142) (Map
                ; Room)
 43240 DEFB 166 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64729(#b166)
                ; (White Room)
 43241 DEFB 150 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64587(#b150)
                ; (Reading Room)
 43242 DEFB 150 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64587(#b150)
                ; (Reading Room)
 43243 DEFB 166 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64729(#b166)
                ; (White Room)
 43244 DEFB 166 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64729(#b166)
                ; (White Room)
 43245 DEFB 180 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64825(#b180)
                ; (Revision Library)
 43246 DEFB 180 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64825(#b180)
                ; (Revision Library)
 43247 DEFB 142 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64516(#b142) (Map
                ; Room)
 43248 DEFB 142 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64516(#b142) (Map
                ; Room)
 43249 DEFB 166 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64729(#b166)
                ; (White Room)
 43250 DEFB 150 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64587(#b150)
                ; (Reading Room)
 43251 DEFB 220 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64255(#b220) (Mumps walkabout)
 43252 DEFB 196 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64914(#b196) (Walkabout)
 43253 DEFB 196 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64914(#b196) (Walkabout)
 43254 DEFB 182 ; Lesson #LESSON246 (PLAYTIME): #R64841(#b182) (Walkabout)
 43255 DEFB 182 ; Lesson #LESSON247 (PLAYTIME): #R64841(#b182) (Walkabout)
 43256 DEFB 182 ; Lesson #LESSON248 (PLAYTIME): #R64841(#b182) (Walkabout)
 43257 DEFB 182 ; Lesson #LESSON249 (PLAYTIME): #R64841(#b182) (Walkabout)
 43258 DEFB 182 ; Lesson #LESSON250 (PLAYTIME): #R64841(#b182) (Walkabout)
 43259 DEFB 182 ; Lesson #LESSON251 (PLAYTIME): #R64841(#b182) (Walkabout)
 43260 DEFB 182 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64841(#b182) (Walkabout)
 43261 DEFB 182 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64841(#b182) (Walkabout)
 43262 DEFB 182 ; Lesson #LESSON254 (PLAYTIME): #R64841(#b182) (Walkabout)
 43263 DEFB 182 ; Lesson #LESSON255 (PLAYTIME): #R64841(#b182) (Walkabout)

; Skool UDG references (LSBs) for row 17
;
; Used by the routine at #R24843.
b43264 DEFB 9,25,9,0,72,83,0,0,0,0,0,0,9,0,125,26
 43280 DEFB 26,146,154,171,177,0,0,105,14,0,0,0,0,0,0,25
 43296 DEFB 6,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 43312 DEFB 0,0,0,0,0,0,0,74,0,0,87,97,107,31,113,106
 43328 DEFB 0,0,0,0,0,20,26,37,48,61,70,57,57,76,0,26
 43344 DEFB 104,112,104,104,130,135,141,146,150,155,163,170,178,183,0,26

; Character buffer for EINSTEIN (#b169)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
@label=SWOTCBUF
b43360 DEFS 32

; Skool attribute data for row 17
;
; Used by the routine at #R24576.
b43392 DEFB 120,120,120,120,120,120,48,48,48,48,48,48,112,112,112,112
 43408 DEFB 120,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 43424 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 43440 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 43456 DEFB 48,48,48,48,48,112,112,48,48,48,48,120,112,112,112,112
 43472 DEFB 48,48,48,48,48,112,112,112,112,48,112,112,112,112,112,112

; Personal timetable for EINSTEIN (#b169)
;
; Used by the routine at #R26342.
b43488 DEFB 170 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64761(#b170)
                ; (Dinner)
 43489 DEFB 170 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64761(#b170)
                ; (Dinner)
 43490 DEFB 160 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64678(#b160)
                ; (Exam Room)
 43491 DEFB 160 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64678(#b160)
                ; (Exam Room)
 43492 DEFB 176 ; Lesson #LESSON228 (REVISION LIBRARY): #R64801(#b176)
                ; (Revision Library)
 43493 DEFB 176 ; Lesson #LESSON229 (REVISION LIBRARY): #R64801(#b176)
                ; (Revision Library)
 43494 DEFB 176 ; Lesson #LESSON230 (REVISION LIBRARY): #R64801(#b176)
                ; (Revision Library)
 43495 DEFB 144 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64536(#b144) (Map
                ; Room)
 43496 DEFB 152 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64607(#b152)
                ; (Reading Room)
 43497 DEFB 152 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64607(#b152)
                ; (Reading Room)
 43498 DEFB 152 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64607(#b152)
                ; (Reading Room)
 43499 DEFB 168 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64749(#b168)
                ; (White Room)
 43500 DEFB 168 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64749(#b168)
                ; (White Room)
 43501 DEFB 168 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64749(#b168)
                ; (White Room)
 43502 DEFB 168 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64749(#b168)
                ; (White Room)
 43503 DEFB 144 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64536(#b144) (Map
                ; Room)
 43504 DEFB 144 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64536(#b144) (Map
                ; Room)
 43505 DEFB 168 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64749(#b168)
                ; (White Room)
 43506 DEFB 152 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64607(#b152)
                ; (Reading Room)
 43507 DEFB 196 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64914(#b196) (Walkabout)
 43508 DEFB 212 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64265(#b212) (Grass on ERIC)
 43509 DEFB 196 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64914(#b196) (Walkabout)
 43510 DEFB 196 ; Lesson #LESSON246 (PLAYTIME): #R64914(#b196) (Walkabout)
 43511 DEFB 196 ; Lesson #LESSON247 (PLAYTIME): #R64914(#b196) (Walkabout)
 43512 DEFB 196 ; Lesson #LESSON248 (PLAYTIME): #R64914(#b196) (Walkabout)
 43513 DEFB 196 ; Lesson #LESSON249 (PLAYTIME): #R64914(#b196) (Walkabout)
 43514 DEFB 196 ; Lesson #LESSON250 (PLAYTIME): #R64914(#b196) (Walkabout)
 43515 DEFB 196 ; Lesson #LESSON251 (PLAYTIME): #R64914(#b196) (Walkabout)
 43516 DEFB 196 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64914(#b196) (Walkabout)
 43517 DEFB 196 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64914(#b196) (Walkabout)
 43518 DEFB 196 ; Lesson #LESSON254 (PLAYTIME): #R64914(#b196) (Walkabout)
 43519 DEFB 196 ; Lesson #LESSON255 (PLAYTIME): #R64914(#b196) (Walkabout)

; Skool UDG references (LSBs) for row 18
;
; Used by the routine at #R24843.
b43520 DEFB 11,27,41,58,70,81,0,0,0,0,0,0,9,0,0,125
 43536 DEFB 26,26,162,172,178,0,0,105,14,0,0,0,0,0,0,25
 43552 DEFB 7,0,0,0,26,32,32,32,32,32,32,32,32,32,32,32
 43568 DEFB 65,0,0,0,0,0,0,75,78,84,88,98,108,0,31,120
 43584 DEFB 0,0,0,0,0,20,26,38,49,62,57,57,76,0,0,26
 43600 DEFB 1,46,1,1,131,136,142,147,151,155,0,0,179,20,0,26

; Character buffer for BOY WANDER's pellet (#b170)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
@label=BWPELCBUF
b43616 DEFS 32

; Skool attribute data for row 18
;
; Used by the routine at #R24576.
b43648 DEFB 120,120,120,120,120,120,48,48,48,48,48,48,112,112,112,112
 43664 DEFB 112,120,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 43680 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 43696 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 43712 DEFB 48,48,48,48,48,112,112,48,48,48,120,112,112,112,112,112
 43728 DEFB 48,48,48,48,48,112,112,112,112,48,112,112,112,112,112,112

; Personal timetable for BOY WANDER's pellet (#b170)
;
; Used by the routine at #R26342.
b43744 DEFB 138 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64493(#b138) (Do
                ; nothing)
 43745 DEFB 138 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64493(#b138) (Do
                ; nothing)
 43746 DEFB 138 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64493(#b138) (Do
                ; nothing)
 43747 DEFB 138 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64493(#b138)
                ; (Do nothing)
 43748 DEFB 138 ; Lesson #LESSON228 (REVISION LIBRARY): #R64493(#b138) (Do
                ; nothing)
 43749 DEFB 138 ; Lesson #LESSON229 (REVISION LIBRARY): #R64493(#b138) (Do
                ; nothing)
 43750 DEFB 138 ; Lesson #LESSON230 (REVISION LIBRARY): #R64493(#b138) (Do
                ; nothing)
 43751 DEFB 138 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64493(#b138) (Do
                ; nothing)
 43752 DEFB 138 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64493(#b138)
                ; (Do nothing)
 43753 DEFB 138 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64493(#b138)
                ; (Do nothing)
 43754 DEFB 138 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64493(#b138)
                ; (Do nothing)
 43755 DEFB 138 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64493(#b138) (Do
                ; nothing)
 43756 DEFB 138 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64493(#b138)
                ; (Do nothing)
 43757 DEFB 138 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64493(#b138)
                ; (Do nothing)
 43758 DEFB 138 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64493(#b138)
                ; (Do nothing)
 43759 DEFB 138 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64493(#b138) (Do
                ; nothing)
 43760 DEFB 138 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64493(#b138) (Do
                ; nothing)
 43761 DEFB 138 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64493(#b138)
                ; (Do nothing)
 43762 DEFB 138 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64493(#b138)
                ; (Do nothing)
 43763 DEFB 138 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64493(#b138) (Do nothing)
 43764 DEFB 138 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64493(#b138) (Do nothing)
 43765 DEFB 138 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64493(#b138) (Do nothing)
 43766 DEFB 138 ; Lesson #LESSON246 (PLAYTIME): #R64493(#b138) (Do nothing)
 43767 DEFB 138 ; Lesson #LESSON247 (PLAYTIME): #R64493(#b138) (Do nothing)
 43768 DEFB 138 ; Lesson #LESSON248 (PLAYTIME): #R64493(#b138) (Do nothing)
 43769 DEFB 138 ; Lesson #LESSON249 (PLAYTIME): #R64493(#b138) (Do nothing)
 43770 DEFB 138 ; Lesson #LESSON250 (PLAYTIME): #R64493(#b138) (Do nothing)
 43771 DEFB 138 ; Lesson #LESSON251 (PLAYTIME): #R64493(#b138) (Do nothing)
 43772 DEFB 138 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64493(#b138) (Do nothing)
 43773 DEFB 138 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64493(#b138) (Do nothing)
 43774 DEFB 138 ; Lesson #LESSON254 (PLAYTIME): #R64493(#b138) (Do nothing)
 43775 DEFB 138 ; Lesson #LESSON255 (PLAYTIME): #R64493(#b138) (Do nothing)

; Skool UDG references (LSBs) for row 19
;
; Used by the routine at #R24843.
b43776 DEFB 9,25,9,59,73,84,43,43,43,43,43,43,9,0,0,0
 43792 DEFB 125,26,26,173,179,43,43,192,197,43,43,43,43,43,43,43
 43808 DEFB 1,1,1,1,27,33,37,37,49,37,37,37,53,37,37,59
 43824 DEFB 1,1,1,1,1,1,1,1,79,85,89,99,109,1,1,1
 43840 DEFB 1,1,1,1,1,22,29,39,50,57,57,76,0,0,0,26
 43856 DEFB 1,1,1,1,1,1,1,1,1,1,164,171,180,184,0,26

; Character buffer for ERIC's pellet (#b171)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
@label=ERICPELCBUF
b43872 DEFS 32

; Skool attribute data for row 19
;
; Used by the routine at #R24576.
b43904 DEFB 56,56,56,56,56,56,48,48,48,48,48,48,112,112,112,112
 43920 DEFB 112,112,120,48,48,48,48,48,48,48,48,48,48,48,48,48
 43936 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 43952 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 43968 DEFB 48,48,48,48,48,112,112,48,48,120,112,112,112,112,112,112
 43984 DEFB 48,48,48,48,48,112,112,112,112,48,112,112,112,112,112,112

; Personal timetable for ERIC's pellet (#b171)
;
; Used by the routine at #R26342.
b44000 DEFB 138 ; Lesson #LESSON224 (DINNER (MR WITHIT)): #R64493(#b138) (Do
                ; nothing)
 44001 DEFB 138 ; Lesson #LESSON225 (DINNER (MR WACKER)): #R64493(#b138) (Do
                ; nothing)
 44002 DEFB 138 ; Lesson #LESSON226 (MR WACKER - EXAM ROOM): #R64493(#b138) (Do
                ; nothing)
 44003 DEFB 138 ; Lesson #LESSON227 (MR ROCKITT - EXAM ROOM): #R64493(#b138)
                ; (Do nothing)
 44004 DEFB 138 ; Lesson #LESSON228 (REVISION LIBRARY): #R64493(#b138) (Do
                ; nothing)
 44005 DEFB 138 ; Lesson #LESSON229 (REVISION LIBRARY): #R64493(#b138) (Do
                ; nothing)
 44006 DEFB 138 ; Lesson #LESSON230 (REVISION LIBRARY): #R64493(#b138) (Do
                ; nothing)
 44007 DEFB 138 ; Lesson #LESSON231 (MR WITHIT - MAP ROOM): #R64493(#b138) (Do
                ; nothing)
 44008 DEFB 138 ; Lesson #LESSON232 (MR WACKER - READING ROOM): #R64493(#b138)
                ; (Do nothing)
 44009 DEFB 138 ; Lesson #LESSON233 (MR ROCKITT - READING ROOM): #R64493(#b138)
                ; (Do nothing)
 44010 DEFB 138 ; Lesson #LESSON234 (MR CREAK - READING ROOM): #R64493(#b138)
                ; (Do nothing)
 44011 DEFB 138 ; Lesson #LESSON235 (MR CREAK - WHITE ROOM): #R64493(#b138) (Do
                ; nothing)
 44012 DEFB 138 ; Lesson #LESSON236 (MR WACKER - WHITE ROOM): #R64493(#b138)
                ; (Do nothing)
 44013 DEFB 138 ; Lesson #LESSON237 (MR WITHIT - WHITE ROOM): #R64493(#b138)
                ; (Do nothing)
 44014 DEFB 138 ; Lesson #LESSON238 (MR ROCKITT - WHITE ROOM): #R64493(#b138)
                ; (Do nothing)
 44015 DEFB 138 ; Lesson #LESSON239 (MR WACKER - MAP ROOM): #R64493(#b138) (Do
                ; nothing)
 44016 DEFB 138 ; Lesson #LESSON240 (MR WITHIT - MAP ROOM): #R64493(#b138) (Do
                ; nothing)
 44017 DEFB 138 ; Lesson #LESSON241 (MR ROCKITT - WHITE ROOM): #R64493(#b138)
                ; (Do nothing)
 44018 DEFB 138 ; Lesson #LESSON242 (MR CREAK - READING ROOM): #R64493(#b138)
                ; (Do nothing)
 44019 DEFB 138 ; Lesson #LESSON243 (PLAYTIME (ANGELFACE has mumps)):
                ; #R64493(#b138) (Do nothing)
 44020 DEFB 138 ; Lesson #LESSON244 (PLAYTIME (EINSTEIN is going to grass on
                ; ERIC)): #R64493(#b138) (Do nothing)
 44021 DEFB 138 ; Lesson #LESSON245 (PLAYTIME (BOY WANDER has hidden a
                ; pea-shooter)): #R64493(#b138) (Do nothing)
 44022 DEFB 138 ; Lesson #LESSON246 (PLAYTIME): #R64493(#b138) (Do nothing)
 44023 DEFB 138 ; Lesson #LESSON247 (PLAYTIME): #R64493(#b138) (Do nothing)
 44024 DEFB 138 ; Lesson #LESSON248 (PLAYTIME): #R64493(#b138) (Do nothing)
 44025 DEFB 138 ; Lesson #LESSON249 (PLAYTIME): #R64493(#b138) (Do nothing)
 44026 DEFB 138 ; Lesson #LESSON250 (PLAYTIME): #R64493(#b138) (Do nothing)
 44027 DEFB 138 ; Lesson #LESSON251 (PLAYTIME): #R64493(#b138) (Do nothing)
 44028 DEFB 138 ; Lesson #LESSON252 (PLAYTIME (little boys stampede)):
                ; #R64493(#b138) (Do nothing)
 44029 DEFB 138 ; Lesson #LESSON253 (PLAYTIME (little boys stampede)):
                ; #R64493(#b138) (Do nothing)
 44030 DEFB 138 ; Lesson #LESSON254 (PLAYTIME): #R64493(#b138) (Do nothing)
 44031 DEFB 138 ; Lesson #LESSON255 (PLAYTIME): #R64493(#b138) (Do nothing)

; Skool UDG references (LSBs) for row 20
;
; Used by the routine at #R24843.
b44032 DEFB 12,28,42,43,43,43,43,43,43,43,43,43,43,43,43,43
 44048 DEFB 43,43,43,43,43,43,43,193,43,43,43,43,43,43,43,43
 44064 DEFB 1,1,1,1,1,34,38,38,38,38,38,38,38,38,38,60
 44080 DEFB 1,1,1,1,1,1,1,1,80,1,80,100,110,1,1,1
 44096 DEFB 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
 44112 DEFB 1,1,1,1,1,1,1,1,1,1,1,1,1,185,164,191

; Character buffer for ERIC (#b172)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used.
@label=ERICCBUF
b44128 DEFS 32

; Skool attribute data for row 20
;
; Used by the routine at #R24576.
b44160 DEFB 56,56,56,56,56,56,48,48,48,48,48,48,48,48,48,48
 44176 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 44192 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 44208 DEFB 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
 44224 DEFB 48,48,48,48,48,112,112,48,48,48,48,48,48,112,48,48
 44240 DEFB 48,48,48,48,48,112,112,112,112,112,112,112,112,112,112,112

; Lesson descriptors
;
; When a lesson starts, the routine at #R26342 picks up the lesson descriptor
; from this table and copies it into #R32756. Each entry in this table defines
; the teacher for the period (if any), and the room. The teacher is identified
; by bits 4-7:
; .
; #TABLE(default)
; { =h Bits | =h Teacher }
; { 0000    | MR WACKER }
; { 0001    | MR ROCKITT }
; { 0010    | MR WITHIT }
; { 0011    | MR CREAK }
; { 0100    | None }
; TABLE#
; .
; The room is identified by bits 0-3:
; .
; #TABLE(default)
; { =h Bits | =h Room }
; { 0001    | READING ROOM }
; { 0010    | MAP ROOM }
; { 0011    | WHITE ROOM }
; { 0100    | EXAM ROOM }
; { 0101    | REVISION LIBRARY }
; { 0110    | DINNER }
; { 0111    | PLAYTIME }
; TABLE#
@label=LDESCS
b44256 DEFB 38 ; Lesson #LESSON224: DINNER (MR WITHIT)
 44257 DEFB 6  ; Lesson #LESSON225: DINNER (MR WACKER)
 44258 DEFB 4  ; Lesson #LESSON226: MR WACKER - EXAM ROOM
 44259 DEFB 20 ; Lesson #LESSON227: MR ROCKITT - EXAM ROOM
 44260 DEFB 69 ; Lesson #LESSON228: REVISION LIBRARY
 44261 DEFB 69 ; Lesson #LESSON229: REVISION LIBRARY
 44262 DEFB 69 ; Lesson #LESSON230: REVISION LIBRARY
 44263 DEFB 34 ; Lesson #LESSON231: MR WITHIT - MAP ROOM
 44264 DEFB 1  ; Lesson #LESSON232: MR WACKER - READING ROOM
 44265 DEFB 17 ; Lesson #LESSON233: MR ROCKITT - READING ROOM
 44266 DEFB 49 ; Lesson #LESSON234: MR CREAK - READING ROOM
 44267 DEFB 51 ; Lesson #LESSON235: MR CREAK - WHITE ROOM
 44268 DEFB 3  ; Lesson #LESSON236: MR WACKER - WHITE ROOM
 44269 DEFB 35 ; Lesson #LESSON237: MR WITHIT - WHITE ROOM
 44270 DEFB 19 ; Lesson #LESSON238: MR ROCKITT - WHITE ROOM
 44271 DEFB 2  ; Lesson #LESSON239: MR WACKER - MAP ROOM
 44272 DEFB 34 ; Lesson #LESSON240: MR WITHIT - MAP ROOM
 44273 DEFB 19 ; Lesson #LESSON241: MR ROCKITT - WHITE ROOM
 44274 DEFB 49 ; Lesson #LESSON242: MR CREAK - READING ROOM
 44275 DEFB 71 ; Lesson #LESSON243: PLAYTIME (ANGELFACE has mumps)
 44276 DEFB 71 ; Lesson #LESSON244: PLAYTIME (EINSTEIN is going to grass on
               ; ERIC)
 44277 DEFB 71 ; Lesson #LESSON245: PLAYTIME (BOY WANDER has hidden a
               ; pea-shooter)
 44278 DEFB 71 ; Lesson #LESSON246: PLAYTIME
 44279 DEFB 71 ; Lesson #LESSON247: PLAYTIME
 44280 DEFB 71 ; Lesson #LESSON248: PLAYTIME
 44281 DEFB 71 ; Lesson #LESSON249: PLAYTIME
 44282 DEFB 71 ; Lesson #LESSON250: PLAYTIME
 44283 DEFB 71 ; Lesson #LESSON251: PLAYTIME
 44284 DEFB 71 ; Lesson #LESSON252: PLAYTIME (little boys stampede)
 44285 DEFB 71 ; Lesson #LESSON253: PLAYTIME (little boys stampede)
 44286 DEFB 71 ; Lesson #LESSON254: PLAYTIME
 44287 DEFB 71 ; Lesson #LESSON255: PLAYTIME

; UDG references for animatory states #b0-#b103 at row 0, column 0
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s) | =h Address(es) }
; { #AS4        | #w44292 }
; { #AS14-#b15  | #w44302-#w44303 }
; { #AS20       | #w44308 }
; { #AS24-#b31  | #w44312-#w44319 }
; { #AS36       | #w44324 }
; { #AS40-#b41  | #w44328-#w44329 }
; { #AS44-#b47  | #w44332-#w44335 }
; { #AS52       | #w44340 }
; { #AS58-#b59  | #w44346-#w44347 }
; { #AS62       | #w44350 }
; { #AS68       | #w44356 }
; { #AS76       | #w44364 }
; { #AS78       | #w44366 }
; { #AS84       | #w44372 }
; { #AS86       | #w44374 }
; { #AS92       | #w44380 }
; { #AS94       | #w44382 }
; { #AS100      | #w44388 }
; { #AS102      | #w44390 }
; TABLE#
b44288 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0
 44304 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 44320 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0
 44336 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0
 44352 DEFB 0,0,0,0,0,0,0,0,0,102,0,102,116,116,0,0
 44368 DEFB 0,90,0,90,76,76,0,0,0,9,0,9,0,0,0,0
 44384 DEFB 0,39,0,39,0,0,0,0

; 'CAST OF CHARACTERS'
;
; Used by the routine at #R61152.
@label=M_CAST
t44392 DEFM "CAST OF CHARACTERS"
 44410 DEFB 0 ; End marker

; Unused
s44411 DEFS 4

; UDG references for animatory states #b127-#b231 at row 0, column 0
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s)  | =h Address(es) }
; { #AS132       | #w44420 }
; { #AS142-#b143 | #w44430-#w44431 }
; { #AS148       | #w44436 }
; { #AS152-#b159 | #w44440-#w44447 }
; { #AS164       | #w44452 }
; { #AS168-#b169 | #w44456-#w44457 }
; { #AS172-#b175 | #w44460-#w44463 }
; { #AS180       | #w44468 }
; { #AS186-#b187 | #w44474-#w44475 }
; { #AS190       | #w44478 }
; { #AS196       | #w44484 }
; { #AS204       | #w44492 }
; { #AS206       | #w44494 }
; { #AS212       | #w44500 }
; { #AS214       | #w44502 }
; { #AS220       | #w44508 }
; { #AS222       | #w44510 }
; { #AS228       | #w44516 }
; { #AS230       | #w44518 }
; TABLE#
b44415 DEFB 0
 44416 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 44432 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 44448 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 44464 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 44480 DEFB 0,0,0,0,0,0,0,0,187,232,187,232,187,187,0,0
 44496 DEFB 228,0,228,0,228,228,0,0,130,0,130,0,130,130,0,0
 44512 DEFB 158,228,158,228,158,158,0,0

; Insert a pixel column into the message graphic buffer
;
; Used by the routines at #R44776 and #R45937. Slides the current contents of
; the message graphic buffer (at #R23296) one pixel to the left, and places the
; new pixel column into the slot freed up on the right.
;
; A Pixel column byte
@label=SLIDECOL
@assemble=1
c44520 EXX           ;
 44521 LD HL,23551   ; Point #REGhl' at the end of the graphic buffer at
                     ; #R23296
 44524 LD C,8        ; There are 8 pixel rows in the graphic buffer
*44526 LD B,32       ; {Append a pixel to the row and slide all the other
 44528 RRCA          ; pixels one space to the left
*44529 RL (HL)       ;
 44531 DEC HL        ;
 44532 DJNZ 44529    ; }
 44534 DEC C         ; Next pixel row
 44535 JR NZ,44526   ; Jump back until all 8 pixels rows are done
 44537 EXX           ;
 44538 RET           ;

; Unused
s44539 DEFS 4

; UDG reference for animatory state #b255 at row 0, column 0
;
; Used by the routine at #R24843.
b44543 DEFB 0

; UDG references for animatory states #b0-#b103 at row 1, column 0
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s) | =h Address(es) }
; { #AS4        | #w44548 }
; { #AS14-#b15  | #w44558-#w44559 }
; { #AS20       | #w44564 }
; { #AS24-#b31  | #w44568-#w44575 }
; { #AS36       | #w44580 }
; { #AS40-#b41  | #w44584-#w44585 }
; { #AS44-#b47  | #w44588-#w44591 }
; { #AS52       | #w44596 }
; { #AS58-#b59  | #w44602-#w44603 }
; { #AS62       | #w44606 }
; { #AS68       | #w44612 }
; { #AS76       | #w44620 }
; { #AS78       | #w44622 }
; { #AS84       | #w44628 }
; { #AS86       | #w44630 }
; { #AS92       | #w44636 }
; { #AS94       | #w44638 }
; { #AS100      | #w44644 }
; { #AS102      | #w44646 }
; TABLE#
b44544 DEFB 38,7,38,7,38,38,0,0,38,57,38,66,69,72,0,0
 44560 DEFB 0,33,0,33,0,0,0,0,0,23,0,17,0,23,0,0
 44576 DEFB 38,41,38,41,38,38,0,0,0,0,38,66,69,72,0,0
 44592 DEFB 38,47,38,47,38,38,0,0,38,57,0,0,69,72,0,0
 44608 DEFB 0,117,0,117,0,0,0,0,0,105,0,105,117,117,120,120
 44624 DEFB 99,88,99,88,75,75,0,0,0,11,0,11,25,25,0,0
 44640 DEFB 31,42,31,42,55,55,0,0

; 'PRESS'C'TO CHANGE NAME'
;
; Used by the routine at #R46070.
@label=M_CTOCHANGE
t44648 DEFM "PRESS'C'TO CHANGE NAME"
 44670 DEFB 0 ; End marker

; UDG references for animatory states #b127-#b231 at row 1, column 0
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s)  | =h Address(es) }
; { #AS132       | #w44676 }
; { #AS142-#b143 | #w44686-#w44687 }
; { #AS148       | #w44692 }
; { #AS152-#b159 | #w44696-#w44703 }
; { #AS164       | #w44708 }
; { #AS168-#b169 | #w44712-#w44713 }
; { #AS172-#b175 | #w44716-#w44719 }
; { #AS180       | #w44724 }
; { #AS186-#b187 | #w44730-#w44731 }
; { #AS190       | #w44734 }
; { #AS196       | #w44740 }
; { #AS204       | #w44748 }
; { #AS206       | #w44750 }
; { #AS212       | #w44756 }
; { #AS214       | #w44758 }
; { #AS220       | #w44764 }
; { #AS222       | #w44766 }
; { #AS228       | #w44772 }
; { #AS230       | #w44774 }
; TABLE#
b44671 DEFB 0
 44672 DEFB 130,0,130,0,130,130,0,0,130,130,130,130,130,130,0,0
 44688 DEFB 167,0,167,0,167,167,0,0,0,0,0,0,0,0,0,0
 44704 DEFB 130,0,130,0,130,130,0,0,0,0,130,130,130,130,0,0
 44720 DEFB 130,0,130,0,130,130,0,0,130,130,0,0,130,130,0,0
 44736 DEFB 0,0,0,0,0,0,0,0,189,235,189,235,189,189,250,250
 44752 DEFB 225,228,225,228,225,225,200,200,132,141,132,141,132,132,255,255
 44768 DEFB 161,172,161,172,161,161,169,169

; Insert message text into the message graphic buffer
;
; Used by the routine at #R45937. Generates the graphic data for the text of
; the message and inserts it into the buffer at #R23296. Returns with the
; message right-aligned in the buffer, and with #REGc holding the number of
; empty pixel columns remaining on the left.
;
; C #b254
; DE Message address
@label=TXT2LBUF
c44776 LD A,(DE)     ; #REGa=ASCII code of a character in the message
 44777 INC DE        ; Point #REGde at the next character in the message
 44778 AND A         ; Have we reached the end of the message?
 44779 RET Z         ; Return if so
 44780 LD L,A        ; {#REGb=width (in pixels) of the bitmap for this font
 44781 LD H,217      ; character
 44783 LD B,(HL)     ; }
*44784 INC H         ; {Pick up a pixel column for the font character and slide
 44785 LD A,(HL)     ; it into the graphic buffer
 44786 CALL 44520    ; }
 44789 DEC C         ; Decrease the pixel column count
 44790 DJNZ 44784    ; Jump back until the entire font character has been done
 44792 XOR A         ; {Insert a blank pixel column between characters
 44793 DEC C         ;
 44794 CALL 44520    ; }
 44797 JR 44776      ; Continue until the message is finished

; UDG reference for animatory state #b255 at row 1, column 0
;
; Used by the routine at #R24843.
b44799 DEFB 0

; UDG references for animatory states #b0-#b103 at row 2, column 0
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s) | =h Address(es) }
; { #AS4        | #w44804 }
; { #AS14-#b15  | #w44814-#w44815 }
; { #AS20       | #w44820 }
; { #AS24-#b31  | #w44824-#w44831 }
; { #AS36       | #w44836 }
; { #AS40-#b41  | #w44840-#w44841 }
; { #AS44-#b47  | #w44844-#w44847 }
; { #AS52       | #w44852 }
; { #AS58-#b59  | #w44858-#w44859 }
; { #AS62       | #w44862 }
; { #AS68       | #w44868 }
; { #AS76       | #w44876 }
; { #AS78       | #w44878 }
; { #AS84       | #w44884 }
; { #AS86       | #w44886 }
; { #AS92       | #w44892 }
; { #AS94       | #w44894 }
; { #AS100      | #w44900 }
; { #AS102      | #w44902 }
; TABLE#
b44800 DEFB 3,8,3,8,17,17,0,0,52,55,60,64,70,70,0,0
 44816 DEFB 3,8,3,8,17,17,0,0,0,24,0,28,0,24,0,0
 44832 DEFB 3,8,3,8,17,17,0,0,0,0,60,64,70,70,0,0
 44848 DEFB 3,8,3,8,17,17,0,0,52,55,0,0,70,70,0,0
 44864 DEFB 120,115,120,115,112,112,108,0,0,108,0,108,0,0,123,123
 44880 DEFB 96,86,96,86,96,96,0,0,0,14,0,14,27,27,0,0
 44896 DEFB 205,45,205,45,0,0,0,0

; 'ENTER NEW NAME'
;
; Used by the routine at #R47208.
@label=M_ENTERNAME
t44904 DEFM "ENTER NEW NAME"
 44918 DEFB 0 ; End marker

; Prepare a character to be walked onto the screen (1)
;
; Used by the routine at #R46056.
;
@ignoreua
; A Character's animatory state
; HL #w39008 (96, 152)
@ssub=LD DE,46571+1
@label=SETASY
c44919 LD DE,46572   ;
 44922 CP 200        ; Reset the carry flag if the animatory state is >= #AS200
                     ; (i.e. if we're dealing with a teacher)
 44924 JP 45429      ;

; UDG references for animatory states #b127-#b231 at row 2, column 0
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s)  | =h Address(es) }
; { #AS132       | #w44932 }
; { #AS142-#b143 | #w44942-#w44943 }
; { #AS148       | #w44948 }
; { #AS152-#b159 | #w44952-#w44959 }
; { #AS164       | #w44964 }
; { #AS168-#b169 | #w44968-#w44969 }
; { #AS172-#b175 | #w44972-#w44975 }
; { #AS180       | #w44980 }
; { #AS186-#b187 | #w44986-#w44987 }
; { #AS190       | #w44990 }
; { #AS196       | #w44996 }
; { #AS204       | #w45004 }
; { #AS206       | #w45006 }
; { #AS212       | #w45012 }
; { #AS214       | #w45014 }
; { #AS220       | #w45020 }
; { #AS222       | #w45022 }
; { #AS228       | #w45028 }
; { #AS230       | #w45030 }
; TABLE#
b44927 DEFB 0
 44928 DEFB 133,0,133,0,146,146,151,0,182,184,133,133,133,133,0,0
 44944 DEFB 133,0,133,0,146,146,164,0,0,0,0,0,0,0,0,0
 44960 DEFB 133,0,133,0,146,146,172,0,0,0,133,133,133,133,0,0
 44976 DEFB 133,0,133,0,146,146,178,0,182,184,0,0,133,133,0,0
 44992 DEFB 246,0,246,0,0,0,0,0,191,238,191,238,191,191,253,253
 45008 DEFB 222,212,222,212,222,222,198,198,134,144,134,144,134,134,202,202
 45024 DEFB 164,175,164,175,164,164,180,180

; Print a message centred across the entire screen
;
; Used by the routines at #R26784, #R45288, #R45544, #R46070, #R47080, #R61152
; and #R64073.
;
; DE Display file address
; HL Message address
@label=PRINTMSG
c45032 EX DE,HL      ; Now #REGde=message address, #REGhl=display file address
 45033 PUSH HL       ; Save the display file address
 45034 CALL 45682    ; Prepare the message in the buffer at #R23296
 45037 POP DE        ; Restore the display file address to #REGde
 45038 LD HL,23296   ; {Transfer the message from the buffer to the screen
*45041 LD C,32       ;
 45043 PUSH DE       ;
 45044 LDIR          ;
 45046 POP DE        ;
 45047 INC D         ;
 45048 BIT 1,H       ;
 45050 JR NZ,45041   ; }
 45052 RET           ;

; Unused
s45053 DEFS 2

; UDG reference for animatory state #b255 at row 2, column 0
;
; Used by the routine at #R24843.
b45055 DEFB 0

; UDG references for animatory states #b0-#b103 at row 3, column 0
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s) | =h Address(es) }
; { #AS4        | #w45060 }
; { #AS14-#b15  | #w45070-#w45071 }
; { #AS20       | #w45076 }
; { #AS24-#b31  | #w45080-#w45087 }
; { #AS36       | #w45092 }
; { #AS40-#b41  | #w45096-#w45097 }
; { #AS44-#b47  | #w45100-#w45103 }
; { #AS52       | #w45108 }
; { #AS58-#b59  | #w45114-#w45115 }
; { #AS62       | #w45118 }
; { #AS68       | #w45124 }
; { #AS76       | #w45132 }
; { #AS78       | #w45134 }
; { #AS84       | #w45140 }
; { #AS86       | #w45142 }
; { #AS92       | #w45148 }
; { #AS94       | #w45150 }
; { #AS100      | #w45156 }
; { #AS102      | #w45158 }
; TABLE#
b45056 DEFB 0,11,0,14,19,19,24,27,0,0,62,62,0,0,0,0
 45072 DEFB 0,11,0,14,19,19,24,27,0,25,0,29,0,25,0,0
 45088 DEFB 0,11,0,14,19,19,24,27,0,0,62,62,0,0,0,0
 45104 DEFB 0,11,0,14,19,19,24,27,0,0,0,0,0,0,0,27
 45120 DEFB 0,126,0,123,110,110,106,104,0,111,0,111,0,0,69,69
 45136 DEFB 93,83,93,79,93,93,69,69,0,17,0,22,0,0,69,69
 45152 DEFB 0,48,0,53,0,0,69,69

; 'OUR HERO'
;
; Used by the routine at #R45288.
@label=M_OURHERO
t45160 DEFM "OUR HERO"
 45168 DEFB 0 ; End marker

; Unused
s45169 DEFB 0

; Get the LSB of the message address for a main character's name
;
; Used by the routine at #R45288. Returns with the LSB in #REGl.
;
; B 1-8 (corresponding to one of the eight main characters)
@label=NAMELSB
c45170 LD A,8        ; {#REGc=8-#REGb
 45172 SUB B         ;
 45173 LD C,A        ; }
 45174 ADD A,A       ; {#REGa=8*(8-#REGb)
 45175 ADD A,A       ;
 45176 ADD A,A       ; }
 45177 SUB C         ; #REGa=7*(8-#REGb)
 45178 ADD A,A       ; #REGa=14*(8-#REGb)
@ssub=ADD A,55680%256
 45179 ADD A,128     ; #REGa=128+14*(8-#REGb)
 45181 LD L,A        ; Place this LSB in #REGl
 45182 RET           ;

; UDG references for animatory states #b127-#b231 at row 3, column 0
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s)  | =h Address(es) }
; { #AS132       | #w45188 }
; { #AS142-#b143 | #w45198-#w45199 }
; { #AS148       | #w45204 }
; { #AS152-#b159 | #w45208-#w45215 }
; { #AS164       | #w45220 }
; { #AS168-#b169 | #w45224-#w45225 }
; { #AS172-#b175 | #w45228-#w45231 }
; { #AS180       | #w45236 }
; { #AS186-#b187 | #w45242-#w45243 }
; { #AS190       | #w45246 }
; { #AS196       | #w45252 }
; { #AS204       | #w45260 }
; { #AS206       | #w45262 }
; { #AS212       | #w45268 }
; { #AS214       | #w45270 }
; { #AS220       | #w45276 }
; { #AS222       | #w45278 }
; { #AS228       | #w45284 }
; { #AS230       | #w45286 }
; TABLE#
b45183 DEFB 0
 45184 DEFB 0,0,0,0,0,0,154,157,0,0,133,133,0,0,0,0
 45200 DEFB 0,0,0,0,0,0,154,165,0,0,0,0,0,0,0,0
 45216 DEFB 0,0,0,0,0,0,154,173,0,0,133,133,0,0,0,0
 45232 DEFB 0,0,0,0,0,0,154,179,0,0,0,0,0,0,0,179
 45248 DEFB 0,0,0,0,0,0,0,230,193,241,243,241,193,193,195,195
 45264 DEFB 219,141,219,205,219,219,195,195,136,147,149,152,136,136,195,195
 45280 DEFB 166,178,166,141,166,166,195,195

; Print a character's title and name, and walk him onto the screen (1)
;
; Used by the routine at #R61408.
;
; B 1-8 (corresponding to one of the eight main characters)
@label=WALKCHAR
c45288 LD A,184      ; {Set #REGhl to the address of the appropriate character
 45290 SUB B         ; title message, e.g. #R45160: 'OUR HERO'
 45291 LD H,A        ;
@ssub=LD L,45160%256
 45292 LD L,104      ; }
 45294 LD DE,16608   ; This is the display file address at which to print the
                     ; character's title
 45297 PUSH BC       ;
 45298 CALL 45032    ; Print the character's title
 45301 POP BC        ;
 45302 CALL 45170    ; {Set #REGhl to the message address for the character's
@ssub=LD H,55680/256
 45305 LD H,217      ; name}
 45307 PUSH HL       ; Save this message address
 45308 JP 45544      ;

; UDG reference for animatory state #b255 at row 3, column 0
;
; Used by the routine at #R24843.
b45311 DEFB 0

; UDG references for animatory states #b0-#b103 at row 0, column 1
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s) | =h Address(es) }
; { #AS4        | #w45316 }
; { #AS14-#b15  | #w45326-#w45327 }
; { #AS20       | #w45332 }
; { #AS24-#b31  | #w45336-#w45343 }
; { #AS36       | #w45348 }
; { #AS40-#b41  | #w45352-#w45353 }
; { #AS44-#b47  | #w45356-#w45359 }
; { #AS52       | #w45364 }
; { #AS58-#b59  | #w45370-#w45371 }
; { #AS62       | #w45374 }
; { #AS68       | #w45380 }
; { #AS76       | #w45388 }
; { #AS78       | #w45390 }
; { #AS84       | #w45396 }
; { #AS86       | #w45398 }
; { #AS92       | #w45404 }
; { #AS94       | #w45406 }
; { #AS100      | #w45412 }
; { #AS102      | #w45414 }
; TABLE#
b45312 DEFB 0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0
 45328 DEFB 0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0
 45344 DEFB 0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0
 45360 DEFB 0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0
 45376 DEFB 0,0,0,0,0,0,0,0,58,103,58,103,58,58,0,0
 45392 DEFB 101,89,101,89,101,101,0,0,1,10,1,10,1,1,0,0
 45408 DEFB 29,40,29,40,29,29,0,0

; 'THE TEARAWAY'
;
; Used by the routine at #R45288.
@label=M_TEARAWAY
t45416 DEFM "THE TEARAWAY"
 45428 DEFB 0 ; End marker

; Prepare a character to be walked onto the screen (2)
;
; Continues from #R44919. On entry here, the carry flag is set if the character
; to be walked onto the screen is a boy.
;
@ignoreua
; DE #w46572
; HL #w39008 (96, 152)
@label=SETASY2
c45429 JR C,45433    ; Jump if we are dealing with a boy
 45431 LD H,164      ; #b164=MR ROCKITT
*45433 EX DE,HL      ; {Change the instruction at #R46571 in the routine at
 45434 LD (HL),D     ; #R46568 to #S/LD H/,#n152 (boy) or #S/LD H/,#n164
 45435 EX DE,HL      ; (teacher) as appropriate}
 45436 JP 46202      ;

; UDG references for animatory states #b127-#b231 at row 0, column 1
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s)  | =h Address(es) }
; { #AS132       | #w45444 }
; { #AS142-#b143 | #w45454-#w45455 }
; { #AS148       | #w45460 }
; { #AS152-#b159 | #w45464-#w45471 }
; { #AS164       | #w45476 }
; { #AS168-#b169 | #w45480-#w45481 }
; { #AS172-#b175 | #w45484-#w45487 }
; { #AS180       | #w45492 }
; { #AS186-#b187 | #w45498-#w45499 }
; { #AS190       | #w45502 }
; { #AS196       | #w45508 }
; { #AS204       | #w45516 }
; { #AS206       | #w45518 }
; { #AS212       | #w45524 }
; { #AS214       | #w45526 }
; { #AS220       | #w45532 }
; { #AS222       | #w45534 }
; { #AS228       | #w45540 }
; { #AS230       | #w45542 }
; TABLE#
b45439 DEFB 0
 45440 DEFB 0,0,0,0,149,0,0,0,0,0,0,0,0,0,0,0
 45456 DEFB 0,0,0,0,149,0,0,0,0,0,0,0,0,0,0,0
 45472 DEFB 0,0,0,0,149,0,0,0,0,0,0,0,0,0,0,0
 45488 DEFB 0,0,0,0,149,0,0,0,0,0,0,0,0,0,0,0
 45504 DEFB 0,0,0,0,0,0,0,0,186,231,186,231,186,186,0,0
 45520 DEFB 229,217,229,217,229,229,0,0,129,138,129,138,129,129,0,0
 45536 DEFB 157,168,157,168,157,157,0,0

; Print a character's title and name, and walk him onto the screen (2)
;
; Continues from #R45288. Prints the character's name followed by a space.
;
; B 1-8 (corresponding to one of the eight main characters)
; HL Message address for the character's name
@label=WALKCHAR2
c45544 PUSH BC       ;
 45545 LD DE,20512   ; This is the display file address at which to print the
                     ; character's name
 45548 CALL 45032    ; Print the character's name
 45551 LD HL,46199   ; #R46199: ' '
 45554 CALL 46073    ; Print a space
 45557 LD HL,39008   ; Point #REGhl at byte #b96 of little boy no. 1's buffer
 45560 POP BC        ;
 45561 LD A,B        ; #REGa=1-8 (corresponding to one of the eight main
                     ; characters)
@rsub-begin
 45562 NOP           ;
 45563 NOP           ;
@rsub-end
 45564 JP 45800      ;
@rsub+begin
       DEFS 2
@rsub+end

; UDG reference for animatory state #b255 at row 0, column 1
;
; Used by the routine at #R24843.
b45567 DEFB 0

; UDG references for animatory states #b0-#b103 at row 1, column 1
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s) | =h Address(es) }
; { #AS4        | #w45572 }
; { #AS14-#b15  | #w45582-#w45583 }
; { #AS20       | #w45588 }
; { #AS24-#b31  | #w45592-#w45599 }
; { #AS36       | #w45604 }
; { #AS40-#b41  | #w45608-#w45609 }
; { #AS44-#b47  | #w45612-#w45615 }
; { #AS52       | #w45620 }
; { #AS58-#b59  | #w45626-#w45627 }
; { #AS62       | #w45630 }
; { #AS68       | #w45636 }
; { #AS76       | #w45644 }
; { #AS78       | #w45646 }
; { #AS84       | #w45652 }
; { #AS86       | #w45654 }
; { #AS92       | #w45660 }
; { #AS94       | #w45662 }
; { #AS100      | #w45668 }
; { #AS102      | #w45670 }
; TABLE#
b45568 DEFB 1,9,1,9,1,1,0,0,1,58,1,68,1,1,0,0
 45584 DEFB 32,34,32,34,32,32,0,0,0,0,0,20,0,0,0,0
 45600 DEFB 40,42,40,42,40,40,0,0,0,0,40,67,40,40,0,0
 45616 DEFB 46,48,46,48,46,46,0,0,46,59,0,0,46,46,0,0
 45632 DEFB 121,116,121,116,113,113,0,0,60,106,60,106,118,118,121,121
 45648 DEFB 98,87,98,87,98,98,73,73,3,12,3,12,26,26,66,66
 45664 DEFB 32,43,32,43,56,56,81,81

; 'THE BULLY'
;
; Used by the routine at #R45288.
@label=M_BULLY
t45672 DEFM "THE BULLY"
 45681 DEFB 0 ; End marker

; Prepare a message in the message graphic buffer (1)
;
; Used by the routine at #R45032. Clears the buffer at #R23296 in preparation
; for the message.
;
; DE Message address
@label=PREPMSG
c45682 XOR A         ; {Clear the buffer at #R23296 in preparation for the
 45683 LD HL,23296   ; message
*45686 LD (HL),A     ;
 45687 INC L         ;
 45688 JR NZ,45686   ; }
 45690 LD C,254      ; Initialise the pixel column counter
 45692 JP 45937      ;

; UDG references for animatory states #b127-#b231 at row 1, column 1
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s)  | =h Address(es) }
; { #AS132       | #w45700 }
; { #AS142-#b143 | #w45710-#w45711 }
; { #AS148       | #w45716 }
; { #AS152-#b159 | #w45720-#w45727 }
; { #AS164       | #w45732 }
; { #AS168-#b169 | #w45736-#w45737 }
; { #AS172-#b175 | #w45740-#w45743 }
; { #AS180       | #w45748 }
; { #AS186-#b187 | #w45754-#w45755 }
; { #AS190       | #w45758 }
; { #AS196       | #w45764 }
; { #AS204       | #w45772 }
; { #AS206       | #w45774 }
; { #AS212       | #w45780 }
; { #AS214       | #w45782 }
; { #AS220       | #w45788 }
; { #AS222       | #w45790 }
; { #AS228       | #w45796 }
; { #AS230       | #w45798 }
; TABLE#
b45695 DEFB 73
 45696 DEFB 129,137,129,137,129,129,0,0,129,186,129,196,129,129,0,0
 45712 DEFB 160,162,160,162,160,160,0,0,0,0,0,148,0,0,0,0
 45728 DEFB 168,170,168,170,168,168,0,0,0,0,168,195,168,168,0,0
 45744 DEFB 174,176,174,176,174,174,0,0,174,187,0,0,174,174,0,0
 45760 DEFB 249,244,249,244,241,241,0,0,188,234,188,234,246,246,249,249
 45776 DEFB 226,215,226,215,226,226,201,201,131,140,131,140,154,154,194,194
 45792 DEFB 160,171,160,171,184,184,209,209

; Print a character's title and name, and walk him onto the screen (3)
;
; Continues from #R45544. Determines the animatory state of the character to be
; walked onto the screen.
;
@ignoreua
; A 1-8 (corresponding to one of the eight main characters)
; HL #w39008 (96, 152)
@label=WALKCHAR3
c45800 SUB 5         ; Are we dealing with one of the teachers?
 45802 JR C,45811    ; Jump if so
 45804 ADD A,9       ; #REGa=9, 10, 11, 12
 45806 AND 11        ; #REGa=9, 10, 11, 8
 45808 ADD A,A       ; #REGa=18, 20, 22, 16
 45809 JR 45817      ;
*45811 CPL           ; #REGa=0, 1, 2, 3
 45812 INC A         ; #REGa=1, 2, 3, 4
 45813 AND 3         ; #REGa=1, 2, 3, 0
 45815 ADD A,25      ; #REGa=26, 27, 28, 25
*45817 RLCA          ; {#REGa=#AS208 (MR WACKER), #AS216 (MR ROCKITT), #AS224
 45818 RLCA          ; (MR WITHIT), #AS200 (MR CREAK), #AS144 (EINSTEIN),
 45819 RLCA          ; #AS160 (ANGELFACE), #AS176 (BOY WANDER), or #AS128
                     ; (ERIC)}
 45820 JP 46056      ;

; UDG reference for animatory state #b255 at row 1, column 1
;
; Used by the routine at #R24843.
b45823 DEFB 201

; UDG references for animatory states #b0-#b103 at row 2, column 1
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s) | =h Address(es) }
; { #AS4        | #w45828 }
; { #AS14-#b15  | #w45838-#w45839 }
; { #AS20       | #w45844 }
; { #AS24-#b31  | #w45848-#w45855 }
; { #AS36       | #w45860 }
; { #AS40-#b41  | #w45864-#w45865 }
; { #AS44-#b47  | #w45868-#w45871 }
; { #AS52       | #w45876 }
; { #AS58-#b59  | #w45882-#w45883 }
; { #AS62       | #w45886 }
; { #AS68       | #w45892 }
; { #AS76       | #w45900 }
; { #AS78       | #w45902 }
; { #AS84       | #w45908 }
; { #AS86       | #w45910 }
; { #AS92       | #w45916 }
; { #AS94       | #w45918 }
; { #AS100      | #w45924 }
; { #AS102      | #w45926 }
; TABLE#
b45824 DEFB 4,10,4,10,16,16,22,0,53,53,61,65,4,4,0,0
 45840 DEFB 30,31,30,31,16,16,35,0,0,26,0,30,0,26,0,0
 45856 DEFB 4,10,4,10,16,16,43,0,0,0,61,65,4,4,0,0
 45872 DEFB 4,10,4,10,16,16,49,0,53,53,0,0,4,4,0,0
 45888 DEFB 119,114,119,114,111,111,107,0,62,109,62,109,119,119,124,124
 45904 DEFB 95,85,95,85,95,95,71,71,5,15,5,15,28,28,126,126
 45920 DEFB 35,46,35,46,57,57,34,34

; 'THE SWOT'
;
; Used by the routine at #R45288.
@label=M_SWOT
t45928 DEFM "THE SWOT"
 45936 DEFB 0 ; End marker

; Prepare a message in the message graphic buffer (2)
;
; Continues from #R45682. Generates the graphic data for the text of the
; message and centres it in the buffer at #R23296.
;
; C #b254
; DE Message address
@label=PREPMSG2
c45937 CALL 44776    ; Slide the message text into the graphic buffer
 45940 SRL C         ; {Halve the number of remaining pixel columns and add one
 45942 INC C         ; }
*45943 XOR A         ; {Insert this number of blank pixel columns, thus
 45944 CALL 44520    ; centring the message
 45947 DEC C         ;
 45948 JR NZ,45943   ; }
 45950 RET           ;

; UDG references for animatory states #b127-#b231 at row 2, column 1
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s)  | =h Address(es) }
; { #AS132       | #w45956 }
; { #AS142-#b143 | #w45966-#w45967 }
; { #AS148       | #w45972 }
; { #AS152-#b159 | #w45976-#w45983 }
; { #AS164       | #w45988 }
; { #AS168-#b169 | #w45992-#w45993 }
; { #AS172-#b175 | #w45996-#w45999 }
; { #AS180       | #w46004 }
; { #AS186-#b187 | #w46010-#w46011 }
; { #AS190       | #w46014 }
; { #AS196       | #w46020 }
; { #AS204       | #w46028 }
; { #AS206       | #w46030 }
; { #AS212       | #w46036 }
; { #AS214       | #w46038 }
; { #AS220       | #w46044 }
; { #AS222       | #w46046 }
; { #AS228       | #w46052 }
; { #AS230       | #w46054 }
; TABLE#
b45951 DEFB 0
 45952 DEFB 132,138,132,138,144,144,150,0,181,181,189,193,132,132,0,0
 45968 DEFB 158,159,158,159,144,144,163,0,0,154,0,158,0,154,0,0
 45984 DEFB 132,138,132,138,144,144,171,0,0,0,189,193,132,132,0,0
 46000 DEFB 132,138,132,138,144,144,177,0,181,181,0,0,132,132,0,0
 46016 DEFB 247,242,247,242,239,239,235,0,190,237,190,237,247,247,252,252
 46032 DEFB 223,213,223,213,223,223,199,199,133,143,133,143,156,156,254,254
 46048 DEFB 163,174,163,174,185,185,162,162

; Print a character's title and name, and walk him onto the screen (4)
;
; Continues from #R45800. Sets the animatory state and location of the
; character and walks him to the middle of the screen.
;
@ignoreua
; A Animatory state
; B 1-8 (corresponding to one of the eight main characters)
; HL #w39008 (96, 152)
@label=WALKCHAR4
c46056 PUSH BC       ;
 46057 CALL 44919    ; Set the animatory state and y-coordinate of the
                     ; character to be walked on screen
@rsub-begin
 46060 NOP           ;
@rsub-end
 46061 INC L         ; #REGl=#b98
 46062 LD (HL),3     ; Set the character's x-coordinate to 3
 46064 CALL 46568    ; Walk the character to the middle of the screen
 46067 POP BC        ;
 46068 POP HL        ; Restore the message address for the character's name to
                     ; #REGhl
 46069 RET           ;
@rsub+begin
       DEFB 0
@rsub+end

; Print 'PRESS'C'TO CHANGE NAME'
;
; Used by the routine at #R46824.
@label=PRTCPROMPT
c46070 LD HL,44648   ; #R44648: 'PRESS'C'TO CHANGE NAME'
; This entry point is used by the routines at #R45544 (with #REGhl=#R46199:
; ' ') and #R47208 (with #REGhl=#R44904: 'ENTER NEW NAME').
@label=PRTNAME
*46073 LD DE,20640   ; Set #REGde to the display file address at which to print
                     ; the message
 46076 JP 45032      ; Print the message

; UDG reference for animatory state #b255 at row 2, column 1
;
; Used by the routine at #R24843.
b46079 DEFB 0

; UDG references for animatory states #b0-#b103 at row 3, column 1
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s) | =h Address(es) }
; { #AS4        | #w46084 }
; { #AS14-#b15  | #w46094-#w46095 }
; { #AS20       | #w46100 }
; { #AS24-#b31  | #w46104-#w46111 }
; { #AS36       | #w46116 }
; { #AS40-#b41  | #w46120-#w46121 }
; { #AS44-#b47  | #w46124-#w46127 }
; { #AS52       | #w46132 }
; { #AS58-#b59  | #w46138-#w46139 }
; { #AS62       | #w46142 }
; { #AS68       | #w46148 }
; { #AS76       | #w46156 }
; { #AS78       | #w46158 }
; { #AS84       | #w46164 }
; { #AS86       | #w46166 }
; { #AS92       | #w46172 }
; { #AS94       | #w46174 }
; { #AS100      | #w46180 }
; { #AS102      | #w46182 }
; TABLE#
b46080 DEFB 6,12,13,15,20,20,25,28,6,6,63,63,6,6,0,0
 46096 DEFB 6,12,13,15,20,20,25,28,0,27,0,31,0,27,0,0
 46112 DEFB 6,12,13,15,20,20,25,28,0,0,63,63,6,6,0,0
 46128 DEFB 6,12,13,15,20,20,25,28,6,6,0,0,6,6,0,28
 46144 DEFB 127,125,124,122,109,109,105,103,64,112,114,112,64,64,68,68
 46160 DEFB 92,82,80,78,92,92,68,68,7,18,20,23,7,7,68,68
 46176 DEFB 37,49,51,54,37,37,68,68

; 'THE HEADMASTER'
;
; Used by the routine at #R45288.
@label=M_HEAD
t46184 DEFM "THE HEADMASTER"
 46198 DEFB 0 ; End marker

; ' ' (single space)
;
; Used by the routine at #R45544.
@label=M_SPACE
t46199 DEFM " "
 46200 DEFB 0 ; End marker

; Unused
s46201 DEFB 0

; Prepare a character to be walked onto the screen (3)
;
; Continues from #R45429. Sets the animatory state and y-coordinate of the
; character to be walked onto the screen.
;
; A Animatory state
; H #b152 (boy) or #b164 (teacher)
; L #b96
@label=SETASY3
c46202 LD (HL),A     ; Set the character's animatory state
 46203 INC L         ; #REGl=#b97
 46204 LD (HL),164   ; Set the character's y-coordinate to 164
 46206 RET           ;

; UDG references for animatory states #b127-#b231 at row 3, column 1
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s)  | =h Address(es) }
; { #AS132       | #w46212 }
; { #AS142-#b143 | #w46222-#w46223 }
; { #AS148       | #w46228 }
; { #AS152-#b159 | #w46232-#w46239 }
; { #AS164       | #w46244 }
; { #AS168-#b169 | #w46248-#w46249 }
; { #AS172-#b175 | #w46252-#w46255 }
; { #AS180       | #w46260 }
; { #AS186-#b187 | #w46266-#w46267 }
; { #AS190       | #w46270 }
; { #AS196       | #w46276 }
; { #AS204       | #w46284 }
; { #AS206       | #w46286 }
; { #AS212       | #w46292 }
; { #AS214       | #w46294 }
; { #AS220       | #w46300 }
; { #AS222       | #w46302 }
; { #AS228       | #w46308 }
; { #AS230       | #w46310 }
; TABLE#
b46207 DEFB 0
 46208 DEFB 134,140,141,143,148,148,153,156,134,134,191,191,134,134,0,0
 46224 DEFB 134,140,141,143,148,148,153,156,0,155,0,159,0,155,0,0
 46240 DEFB 134,140,141,143,148,148,153,156,0,0,191,191,134,134,0,0
 46256 DEFB 134,140,141,143,148,148,153,156,134,134,0,0,134,134,0,156
 46272 DEFB 255,253,252,250,237,237,233,231,192,240,242,240,192,192,196,196
 46288 DEFB 220,210,208,206,220,220,196,196,135,146,148,151,135,135,196,196
 46304 DEFB 165,177,179,182,165,165,196,196

; Move a character one step along the catwalk
;
; Used by the routine at #R46568.
;
; H #b152 (boy) or #b164 (teacher)
@label=CATWALK
c46312 CALL 25108    ; Update the SRB for the character's current location
 46315 INC A         ; #REGa=character's next animatory state
 46316 LD C,A        ; Store this in #REGc
 46317 RRCA          ; Set the carry flag if this animatory state is midstride
 46318 LD A,C        ; Restore the next animatory state to #REGa
 46319 JR C,46329    ; Jump if the character will be midstride
; The character will be moving from the midstride position, so move him one
; space forward.
 46321 INC E         ; Increment the character's x-coordinate
 46322 AND 3         ; Keep only the walking phase identifier bits of the
                     ; animatory state (bits 0-1)
 46324 LD A,C        ; Restore the next animatory state to #REGa again
 46325 JR NZ,46329   ; Jump if the next animatory state is standing/walking
                     ; phase 3
 46327 SUB 4         ; Reset the animatory state to standing/walking phase 1
; Now #REGa holds the character's new animatory state, and #REGe his
; x-coordinate.
*46329 CALL 25008    ; Update the character's animatory state and location and
                     ; update the SRB
 46332 JP 27026      ; Update the display

; UDG reference for animatory state #b255 at row 3, column 1
;
; Used by the routine at #R24843.
b46335 DEFB 0

; UDG references for animatory states #b0-#b103 at row 0, column 2
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s) | =h Address(es) }
; { #AS4        | #w46340 }
; { #AS14-#b15  | #w46350-#w46351 }
; { #AS20       | #w46356 }
; { #AS24-#b31  | #w46360-#w46367 }
; { #AS36       | #w46372 }
; { #AS40-#b41  | #w46376-#w46377 }
; { #AS44-#b47  | #w46380-#w46383 }
; { #AS52       | #w46388 }
; { #AS58-#b59  | #w46394-#w46395 }
; { #AS62       | #w46398 }
; { #AS68       | #w46404 }
; { #AS76       | #w46412 }
; { #AS78       | #w46414 }
; { #AS84       | #w46420 }
; { #AS86       | #w46422 }
; { #AS92       | #w46428 }
; { #AS94       | #w46430 }
; { #AS100      | #w46436 }
; { #AS102      | #w46438 }
; TABLE#
b46336 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 46352 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 46368 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 46384 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 46400 DEFB 0,0,0,0,0,0,0,0,59,104,59,104,59,59,0,0
 46416 DEFB 100,0,100,0,100,100,0,0,2,0,2,0,2,2,0,0
 46432 DEFB 30,100,30,100,30,30,0,0

; 'THE SCIENCE TEACHER'
;
; Used by the routine at #R45288.
@label=M_SCITEACH
t46440 DEFM "THE SCIENCE TEACHER"
 46459 DEFB 0 ; End marker

; Unused
s46460 DEFS 3

; UDG references for animatory states #b127-#b231 at row 0, column 2
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s)  | =h Address(es) }
; { #AS132       | #w46468 }
; { #AS142-#b143 | #w46478-#w46479 }
; { #AS148       | #w46484 }
; { #AS152-#b159 | #w46488-#w46495 }
; { #AS164       | #w46500 }
; { #AS168-#b169 | #w46504-#w46505 }
; { #AS172-#b175 | #w46508-#w46511 }
; { #AS180       | #w46516 }
; { #AS186-#b187 | #w46522-#w46523 }
; { #AS190       | #w46526 }
; { #AS196       | #w46532 }
; { #AS204       | #w46540 }
; { #AS206       | #w46542 }
; { #AS212       | #w46548 }
; { #AS214       | #w46550 }
; { #AS220       | #w46556 }
; { #AS222       | #w46558 }
; { #AS228       | #w46564 }
; { #AS230       | #w46566 }
; TABLE#
b46463 DEFB 0
 46464 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,199,0,0
 46480 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 46496 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,199,0,0
 46512 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,199,0,0
 46528 DEFB 0,0,0,0,0,0,0,0,0,230,0,230,244,244,0,0
 46544 DEFB 0,218,0,218,204,204,0,0,0,137,0,137,0,0,0,0
 46560 DEFB 0,167,0,167,0,0,0,0

; Guide a character onto the catwalk or off it
;
; Used by the routines at #R46056 and #R61408. Makes a character walk in from
; the left to the middle of the screen (at which point his name may be
; changed), or from the middle of the screen and off to the right.
@label=WALKONOFF
c46568 LD B,38       ; The character will take 38 steps along the catwalk
*46570 PUSH BC       ;
@label=CHARBUF
 46571 LD H,152      ; This instruction is set by the routine at #R45429 to
                     ; either '#S/LD H/,#n152' (boy) or '#S/LD H/,#n164'
                     ; (teacher) as appropriate
 46573 CALL 46312    ; Move the character one step along the catwalk
 46576 CALL 65088    ; Make a walking sound effect
 46579 LD C,100      ; {Pause briefly between steps
*46581 DJNZ 46581    ;
 46583 DEC C         ;
 46584 JR NZ,46581   ; }
 46586 POP BC        ;
 46587 DJNZ 46570    ; Jump back until 38 steps have been taken
 46589 RET           ;

; Unused
s46590 DEFB 0

; UDG reference for animatory state #b255 at row 0, column 2
;
; Used by the routine at #R24843.
b46591 DEFB 0

; UDG references for animatory states #b0-#b103 at row 1, column 2
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s) | =h Address(es) }
; { #AS4        | #w46596 }
; { #AS14-#b15  | #w46606-#w46607 }
; { #AS20       | #w46612 }
; { #AS24-#b31  | #w46616-#w46623 }
; { #AS36       | #w46628 }
; { #AS40-#b41  | #w46632-#w46633 }
; { #AS44-#b47  | #w46636-#w46639 }
; { #AS52       | #w46644 }
; { #AS58-#b59  | #w46650-#w46651 }
; { #AS62       | #w46654 }
; { #AS68       | #w46660 }
; { #AS76       | #w46668 }
; { #AS78       | #w46670 }
; { #AS84       | #w46676 }
; { #AS86       | #w46678 }
; { #AS92       | #w46684 }
; { #AS94       | #w46686 }
; { #AS100      | #w46692 }
; { #AS102      | #w46694 }
; TABLE#
b46592 DEFB 2,0,2,0,2,2,0,0,2,2,2,2,2,2,0,0
 46608 DEFB 39,0,39,0,39,39,0,0,0,0,0,0,0,0,0,0
 46624 DEFB 2,0,2,0,2,2,0,0,0,0,2,2,2,2,0,0
 46640 DEFB 2,0,2,0,2,2,0,0,2,2,0,0,2,2,0,0
 46656 DEFB 0,0,0,0,0,0,0,0,61,107,61,107,61,61,122,122
 46672 DEFB 97,100,97,100,97,97,72,72,4,13,4,13,4,4,127,127
 46688 DEFB 33,44,33,44,33,33,41,41

; 'THE GEOGRAPHY TEACHER'
;
; Used by the routine at #R45288.
@label=M_GEOGTEACH
t46696 DEFM "THE GEOGRAPHY TEACHER"
 46717 DEFB 0 ; End marker

; Unused
s46718 DEFB 0

; UDG references for animatory states #b127-#b231 at row 1, column 2
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s)  | =h Address(es) }
; { #AS132       | #w46724 }
; { #AS142-#b143 | #w46734-#w46735 }
; { #AS148       | #w46740 }
; { #AS152-#b159 | #w46744-#w46751 }
; { #AS164       | #w46756 }
; { #AS168-#b169 | #w46760-#w46761 }
; { #AS172-#b175 | #w46764-#w46767 }
; { #AS180       | #w46772 }
; { #AS186-#b187 | #w46778-#w46779 }
; { #AS190       | #w46782 }
; { #AS196       | #w46788 }
; { #AS204       | #w46796 }
; { #AS206       | #w46798 }
; { #AS212       | #w46804 }
; { #AS214       | #w46806 }
; { #AS220       | #w46812 }
; { #AS222       | #w46814 }
; { #AS228       | #w46820 }
; { #AS230       | #w46822 }
; TABLE#
b46719 DEFB 0
 46720 DEFB 166,135,166,135,166,166,0,0,166,185,166,194,197,200,0,0
 46736 DEFB 0,161,0,161,0,0,0,0,0,151,0,145,0,151,0,0
 46752 DEFB 166,169,166,169,166,166,0,0,0,0,166,194,197,200,0,0
 46768 DEFB 166,175,166,175,166,166,0,0,166,185,0,0,197,200,0,0
 46784 DEFB 0,245,0,245,0,0,0,0,0,233,0,233,245,245,248,248
 46800 DEFB 227,216,227,216,203,203,0,0,0,139,0,139,153,153,0,0
 46816 DEFB 159,170,159,170,183,183,0,0

; Print 'PRESS'C'TO CHANGE NAME' and wait for a keypress
;
; Used by the routines at #R47336 and #R61408. Returns with the zero flag set
; if 'c' was pressed.
@label=CPROMPT
c46824 LD HL,23611   ; This is the FLAGS system variable
 46827 RES 5,(HL)    ; Signal: no key pressed
 46829 CALL 46070    ; Print 'PRESS'C'TO CHANGE NAME'
*46832 CALL 26426    ; {Wait for a keypress and collect its ASCII code in #REGa
 46835 JR Z,46832    ; }
 46837 OR 32         ; Convert the ASCII code to lower case
 46839 CP 99         ; Set the zero flag if 'c' (or 'C') was pressed
 46841 RET           ;

; Unused
s46842 DEFS 5

; UDG reference for animatory state #b255 at row 1, column 2
;
; Used by the routine at #R24843.
b46847 DEFB 0

; UDG references for animatory states #b0-#b103 at row 2, column 2
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s) | =h Address(es) }
; { #AS4        | #w46852 }
; { #AS14-#b15  | #w46862-#w46863 }
; { #AS20       | #w46868 }
; { #AS24-#b31  | #w46872-#w46879 }
; { #AS36       | #w46884 }
; { #AS40-#b41  | #w46888-#w46889 }
; { #AS44-#b47  | #w46892-#w46895 }
; { #AS52       | #w46900 }
; { #AS58-#b59  | #w46906-#w46907 }
; { #AS62       | #w46910 }
; { #AS68       | #w46916 }
; { #AS76       | #w46924 }
; { #AS78       | #w46926 }
; { #AS84       | #w46932 }
; { #AS86       | #w46934 }
; { #AS92       | #w46940 }
; { #AS94       | #w46942 }
; { #AS100      | #w46948 }
; { #AS102      | #w46950 }
; TABLE#
b46848 DEFB 5,0,5,0,18,18,23,0,54,56,5,5,5,5,0,0
 46864 DEFB 5,0,5,0,18,18,36,0,0,0,0,0,0,0,0,0
 46880 DEFB 5,0,5,0,18,18,44,0,0,0,5,5,5,5,0,0
 46896 DEFB 5,0,5,0,18,18,50,0,54,56,0,0,5,5,0,0
 46912 DEFB 118,0,118,0,0,0,0,0,63,110,63,110,63,63,125,125
 46928 DEFB 94,84,94,84,94,94,70,70,6,16,6,16,6,6,74,74
 46944 DEFB 36,47,36,47,36,36,52,52

; 'THE HISTORY MASTER'
;
; Used by the routine at #R45288.
@label=M_HISTTEACH
t46952 DEFM "THE HISTORY MASTER"
 46970 DEFB 0 ; End marker

; Unused
s46971 DEFS 4

; UDG references for animatory states #b127-#b231 at row 2, column 2
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s)  | =h Address(es) }
; { #AS132       | #w46980 }
; { #AS142-#b143 | #w46990-#w46991 }
; { #AS148       | #w46996 }
; { #AS152-#b159 | #w47000-#w47007 }
; { #AS164       | #w47012 }
; { #AS168-#b169 | #w47016-#w47017 }
; { #AS172-#b175 | #w47020-#w47023 }
; { #AS180       | #w47028 }
; { #AS186-#b187 | #w47034-#w47035 }
; { #AS190       | #w47038 }
; { #AS196       | #w47044 }
; { #AS204       | #w47052 }
; { #AS206       | #w47054 }
; { #AS212       | #w47060 }
; { #AS214       | #w47062 }
; { #AS220       | #w47068 }
; { #AS222       | #w47070 }
; { #AS228       | #w47076 }
; { #AS230       | #w47078 }
; TABLE#
b46975 DEFB 0
 46976 DEFB 131,136,131,136,145,145,0,0,180,183,188,192,198,198,0,0
 46992 DEFB 131,136,131,136,145,145,0,0,0,152,0,156,0,152,0,0
 47008 DEFB 131,136,131,136,145,145,0,0,0,0,188,192,198,198,0,0
 47024 DEFB 131,136,131,136,145,145,0,0,180,183,0,0,198,198,0,0
 47040 DEFB 248,243,248,243,240,240,236,0,0,236,0,236,0,0,251,251
 47056 DEFB 224,214,224,214,224,224,0,0,0,142,0,142,155,155,0,0
 47072 DEFB 77,173,77,173,0,0,0,0

; Collect a keypress while a character's name is being entered
;
; Used by the routine at #R47336. Waits for a keypress and returns with the
; zero flag set if it was ENTER; otherwise inserts the ASCII code of the
; keypress into the next slot in the character's name message, and returns with
; #REGa holding the number of characters typed so far.
;
; DE Address of the next slot in the character's name message
; HL Base address of the character's name message
@label=GETKEY
c47080 PUSH HL       ; Save the message address for the character's name
 47081 PUSH DE       ;
 47082 LD DE,20512   ; Set #REGde to the display file address at which to print
                     ; the character's name
 47085 CALL 45032    ; Print the character's name (which is being edited)
*47088 CALL 26426    ; {Wait for a keypress and collect its ASCII code in #REGa
 47091 JR Z,47088    ; }
 47093 POP DE        ;
 47094 POP HL        ; Restore the character name message address to #REGhl
 47095 CP 13         ; Was ENTER pressed?
 47097 RET Z         ; Return if so
 47098 LD (DE),A     ; Store the ASCII code of the key just pressed
 47099 INC E         ; Move #REGde along to the next slot in the name message
 47100 LD A,E        ; {Set #REGa equal to the number of characters typed so
 47101 SUB L         ; far}
 47102 RET           ;

; UDG reference for animatory state #b255 at row 2, column 2
;
; Used by the routine at #R24843.
b47103 DEFB 0

; UDG references for animatory states #b0-#b103 at row 3, column 2
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s) | =h Address(es) }
; { #AS4        | #w47108 }
; { #AS14-#b15  | #w47118-#w47119 }
; { #AS20       | #w47124 }
; { #AS24-#b31  | #w47128-#w47135 }
; { #AS36       | #w47140 }
; { #AS40-#b41  | #w47144-#w47145 }
; { #AS44-#b47  | #w47148-#w47151 }
; { #AS52       | #w47156 }
; { #AS58-#b59  | #w47162-#w47163 }
; { #AS62       | #w47166 }
; { #AS68       | #w47172 }
; { #AS76       | #w47180 }
; { #AS78       | #w47182 }
; { #AS84       | #w47188 }
; { #AS86       | #w47190 }
; { #AS92       | #w47196 }
; { #AS94       | #w47198 }
; { #AS100      | #w47204 }
; { #AS102      | #w47206 }
; TABLE#
b47104 DEFB 0,0,0,0,0,0,26,29,0,0,5,5,0,0,0,0
 47120 DEFB 0,0,0,0,0,0,26,37,0,0,0,0,0,0,0,0
 47136 DEFB 0,0,0,0,0,0,26,45,0,0,5,5,0,0,0,0
 47152 DEFB 0,0,0,0,0,0,26,51,0,0,0,0,0,0,0,51
 47168 DEFB 0,0,0,0,0,0,0,102,65,113,115,113,65,65,67,67
 47184 DEFB 91,13,91,77,91,91,67,67,8,19,21,24,8,8,67,67
 47200 DEFB 38,50,38,13,38,38,67,67

; Change a character's name (1)
;
; Used by the routine at #R61408 after 'c' was pressed to change a character's
; name.
;
; HL Address of the character's name message
@label=CHANGENAME
c47208 PUSH HL       ; Save the message address
 47209 LD (HL),32    ; {Set the character's name to ' ' (single space)
 47211 LD B,13       ;
*47213 INC L         ;
 47214 LD (HL),0     ;
 47216 DJNZ 47213    ; }
 47218 LD HL,44904   ; #R44904: 'ENTER NEW NAME'
 47221 CALL 46073    ; Print this message
 47224 LD HL,23611   ; Point #REGhl at the FLAGS system variable
 47227 POP DE        ; Restore the message address for the character's name to
                     ; #REGde
 47228 JP 47336      ;

; UDG references for animatory states #b127-#b231 at row 3, column 2
;
@ignoreua
; Used by the routine at #R24843. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State(s)  | =h Address(es) }
; { #AS132       | #w47236 }
; { #AS142-#b143 | #w47246-#w47247 }
; { #AS148       | #w47252 }
; { #AS152-#b159 | #w47256-#w47263 }
; { #AS164       | #w47268 }
; { #AS168-#b169 | #w47272-#w47273 }
; { #AS172-#b175 | #w47276-#w47279 }
; { #AS180       | #w47284 }
; { #AS186-#b187 | #w47290-#w47291 }
; { #AS190       | #w47294 }
; { #AS196       | #w47300 }
; { #AS204       | #w47308 }
; { #AS206       | #w47310 }
; { #AS212       | #w47316 }
; { #AS214       | #w47318 }
; { #AS220       | #w47324 }
; { #AS222       | #w47326 }
; { #AS228       | #w47332 }
; { #AS230       | #w47334 }
; TABLE#
b47231 DEFB 0
 47232 DEFB 0,139,0,142,147,147,152,155,0,0,190,190,0,0,0,0
 47248 DEFB 0,139,0,142,147,147,152,155,0,153,0,157,0,153,0,0
 47264 DEFB 0,139,0,142,147,147,152,155,0,0,190,190,0,0,0,0
 47280 DEFB 0,139,0,142,147,147,152,155,0,0,0,0,0,0,0,155
 47296 DEFB 0,254,0,251,238,238,234,232,0,239,0,239,0,0,197,197
 47312 DEFB 221,211,221,207,221,221,197,197,0,145,0,150,0,0,197,197
 47328 DEFB 0,176,0,181,0,0,197,197

; Change a character's name (2)
;
; Continues from #R47208. Returns with the zero flag set if 'c' was pressed
; after entering the character's name.
;
; DE Address of the character's name message
; HL #w23611 (FLAGS)
@label=CHANGENAME2
c47336 RES 5,(HL)    ; Signal: no key pressed
 47338 LD H,D        ; {Set #REGhl to the message address for the character's
 47339 LD L,E        ; name}
*47340 CALL 47080    ; Collect a keypress
 47343 JR Z,47352    ; Jump forward if ENTER was pressed
 47345 CP 13         ; Have 13 characters been typed?
 47347 JR NZ,47340   ; Jump back to collect another keypress if not
 47349 DEC E         ; {Set the character name message address offset back to
 47350 JR 47340      ; 12 to avoid overflow (any subsequent keypresses will be
                     ; stored at that offset)}
*47352 PUSH HL       ; Save the message address
 47353 CALL 46824    ; Print 'PRESS'C'TO CHANGE NAME' and wait for a keypress
 47356 POP HL        ; Restore the character name message address to #REGhl
 47357 RET           ;
@assemble=0

; Unused
u47358 DEFB 184

; UDG reference for animatory state #b255 at row 3, column 2
;
; Used by the routine at #R24843.
b47359 DEFB 0

; Sprite graphic data for the boys and the catapult pellet
;
; Used by the routine at #R24843. Tiles #b0 and #b128 are unused by design (and
; would appear completely blank if they were used); tiles #b74 and #b202 are
; also unused; tiles #b21 and #b149 belong to the #FACT#handsUp(unused sprites
; of the main kids with their hands raised); tiles #b75-#b80, #b82-#b101,
; #b203-#b208 and #b210-#b229 belong to #FACT#doppelwacker(unused copies of MR
; WACKER's sprites).
; .
; #UDGTABLE(gallery)
; { #UDG47381,120,,512:47637(tile#b21) | #UDG47509,120,,512:47765(tile#b149) |
; #UDG47434,120,,512:47690(tile#b74) | #UDG47562,120,,512:47818(tile#b202) }
; { #b21 | #b149 | #b74 | #b202 }
; TABLE#
b47360 DEFB 16,0,0,0,255,128,127,0,15,0,248,7,240,127,7,240
 47376 DEFB 127,0,128,2,128,0,0,0,0,96,248,0,0,0,255,248
 47392 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 47408 DEFB 0,0,0,0,1,255,128,127,192,0,0,0,20,127,0,79
 47424 DEFB 127,255,0,0,0,16,7,0,10,0,4,20,0,0,143,14
 47440 DEFB 228,0,231,12,128,228,62,156,11,0,0,240,228,0,72,238
 47456 DEFB 3,192,185,0,0,0,0,0,0,254,3,0,0,64,1,62
 47472 DEFB 0,0,240,2,0,0,0,47,0,0,240,7,127,240,7,127
 47488 DEFB 8,0,0,0,255,1,254,0,240,0,31,224,15,254,224,15
 47504 DEFB 254,0,1,64,1,0,0,0,0,6,31,0,0,0,255,31
 47520 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 47536 DEFB 0,0,0,0,128,255,1,254,3,0,0,0,40,254,0,242
 47552 DEFB 254,255,0,0,0,8,224,0,80,0,32,40,0,0,241,112
 47568 DEFB 39,0,231,48,1,39,124,57,208,0,0,15,39,0,18,119
 47584 DEFB 192,3,157,0,0,0,0,0,0,127,192,0,0,2,128,124
 47600 DEFB 0,0,15,64,0,0,0,244,0,0,15,224,254,15,224,254
@bfix=DEFB 0,7,255,254,255,191,127,240,239,127,251,231,247,127,231,247
 47616 DEFB 0,7,255,254,255,191,127,240,239,127,251,199,247,127,231,247
 47632 DEFB 127,255,191,250,191,255,255,255,255,110,251,255,255,253,255,251
@bfix=DEFB 195,252,63,255,255,255,255,255,135,248,127,255,255,255,131,248
 47648 DEFB 195,253,63,255,255,0,255,255,135,248,127,255,255,255,131,248
@bfix=DEFB 63,255,255,253,249,255,191,127,223,255,7,131,212,127,255,79
 47664 DEFB 63,0,255,253,249,255,191,127,223,255,7,131,212,127,255,79
 47680 DEFB 127,255,255,135,7,215,247,255,234,239,244,212,255,127,143,238
 47696 DEFB 228,127,231,236,191,228,190,157,235,63,252,247,228,254,75,238
 47712 DEFB 251,223,185,254,255,195,255,255,255,254,251,135,255,95,253,190
@bfix=DEFB 255,255,247,250,255,255,127,175,255,255,247,231,127,247,247,127
 47728 DEFB 255,255,247,250,255,255,127,175,255,255,247,231,127,247,199,127
@bfix=DEFB 0,224,255,127,255,253,254,15,247,254,223,231,239,254,231,239
 47744 DEFB 0,224,255,127,255,253,254,15,247,254,223,227,239,254,231,239
 47760 DEFB 254,255,253,95,253,255,255,255,255,118,223,255,255,191,255,223
@bfix=DEFB 195,63,252,255,255,255,255,255,225,31,254,255,255,255,193,31
 47776 DEFB 195,191,252,255,255,0,255,255,225,31,254,255,255,255,193,31
@bfix=DEFB 252,255,255,191,159,255,253,254,251,255,224,193,43,254,255,242
 47792 DEFB 252,0,255,191,159,255,253,254,251,255,224,193,43,254,255,242
 47808 DEFB 254,255,255,225,224,235,239,255,87,247,47,43,255,254,241,119
 47824 DEFB 39,254,231,55,253,39,125,185,215,252,63,239,39,127,210,119
 47840 DEFB 223,251,157,127,255,195,255,255,255,127,223,225,255,250,191,125
@bfix=DEFB 255,255,239,95,255,255,254,245,255,255,239,231,254,239,239,254
 47856 DEFB 255,255,239,95,255,255,254,245,255,255,239,231,254,239,227,254
 47872 DEFB 0,248,0,0,255,128,126,15,15,128,248,3,32,126,11,208
 47888 DEFB 63,0,128,3,128,0,0,0,0,144,248,0,0,2,251,184
 47904 DEFB 60,3,192,0,0,0,0,0,120,7,128,0,0,0,124,7
 47920 DEFB 192,0,0,2,7,255,192,32,192,0,248,124,31,255,0,147
 47936 DEFB 2,127,0,120,248,40,3,0,14,16,2,18,0,0,143,15
 47952 DEFB 244,0,243,12,128,232,38,254,15,192,3,112,228,0,136,110
 47968 DEFB 2,224,255,0,0,60,0,0,0,126,2,120,0,192,1,31
 47984 DEFB 0,0,248,7,0,0,128,127,0,0,208,11,126,32,3,126
 48000 DEFB 0,31,0,0,255,1,126,240,240,1,31,192,4,126,208,11
 48016 DEFB 252,0,1,192,1,0,0,0,0,9,31,0,0,64,223,29
 48032 DEFB 60,192,3,0,0,0,0,0,30,224,1,0,0,0,62,224
 48048 DEFB 3,0,0,64,224,255,3,4,3,0,31,62,248,255,0,201
 48064 DEFB 64,254,0,30,31,20,192,0,112,8,64,72,0,0,241,240
 48080 DEFB 47,0,207,48,1,23,100,127,240,3,192,14,39,0,17,118
 48096 DEFB 64,7,255,0,0,60,0,0,0,126,64,30,0,3,128,248
 48112 DEFB 0,0,31,224,0,0,1,254,0,0,11,208,126,4,192,126
 48128 DEFB 0,251,255,254,255,191,126,239,239,191,251,251,47,126,235,215
 48144 DEFB 191,255,191,251,191,255,248,63,254,148,251,255,255,194,251,187
 48160 DEFB 188,251,207,254,31,243,254,255,123,247,191,252,63,131,125,247
 48176 DEFB 223,252,31,2,247,255,223,160,223,254,251,125,223,255,254,147
 48192 DEFB 130,127,254,123,251,170,251,255,238,215,250,210,255,127,143,239
 48208 DEFB 244,127,243,236,191,232,166,254,239,223,251,119,228,254,139,110
 48224 DEFB 250,239,255,254,255,189,225,255,255,126,250,123,255,223,253,223
 48240 DEFB 255,255,251,247,255,255,191,127,255,255,215,235,126,47,251,126
 48256 DEFB 0,223,255,127,255,253,126,247,247,253,223,223,244,126,215,235
 48272 DEFB 253,255,253,223,253,255,31,252,127,41,223,255,255,67,223,221
 48288 DEFB 61,223,243,127,248,207,127,255,222,239,253,63,252,193,190,239
 48304 DEFB 251,63,248,64,239,255,251,5,251,127,223,190,251,255,127,201
 48320 DEFB 65,254,127,222,223,85,223,255,119,235,95,75,255,254,241,247
 48336 DEFB 47,254,207,55,253,23,101,127,247,251,223,238,39,127,209,118
 48352 DEFB 95,247,255,127,255,189,135,255,255,126,95,222,255,251,191,251
 48368 DEFB 255,255,223,239,255,255,253,254,255,255,235,215,126,244,223,126
 48384 DEFB 0,124,0,0,255,128,42,7,15,192,248,2,64,42,11,80
 48400 DEFB 127,0,128,3,128,0,7,192,1,11,252,0,0,46,255,248
 48416 DEFB 79,4,240,1,224,12,0,0,252,15,192,3,192,108,130,8
 48432 DEFB 32,3,224,90,11,255,192,0,0,0,124,130,7,255,0,162
 48448 DEFB 3,255,0,252,124,56,1,0,12,40,1,23,0,0,159,15
 48464 DEFB 244,0,241,9,64,239,30,237,20,32,4,112,228,0,244,238
 48480 DEFB 1,208,110,1,0,66,22,0,0,62,4,92,0,192,1,63
 48496 DEFB 0,0,184,7,0,0,128,123,0,0,80,11,42,64,2,42
 48512 DEFB 0,62,0,0,255,1,84,224,240,3,31,64,2,84,208,10
 48528 DEFB 254,0,1,192,1,0,224,3,128,208,63,0,0,116,255,31
 48544 DEFB 242,32,15,128,7,48,0,0,63,240,3,192,3,54,65,16
 48560 DEFB 4,192,7,90,208,255,3,0,0,0,62,65,224,255,0,69
 48576 DEFB 192,255,0,63,62,28,128,0,48,20,128,232,0,0,249,240
 48592 DEFB 47,0,143,144,2,247,120,183,40,4,32,14,39,0,47,119
 48608 DEFB 128,11,118,128,0,66,104,0,0,124,32,58,0,3,128,252
 48624 DEFB 0,0,29,224,0,0,1,222,0,0,10,208,84,2,64,84
 48640 DEFB 0,125,255,254,255,191,170,247,239,223,251,250,95,170,235,87
 48656 DEFB 127,255,191,251,191,159,247,223,253,11,253,255,240,46,255,251
 48672 DEFB 79,244,247,253,231,141,254,127,253,239,223,251,223,109,130,232
 48688 DEFB 47,251,239,90,235,255,223,222,63,254,125,130,231,255,254,170
 48704 DEFB 251,255,254,253,125,186,253,255,236,171,253,215,255,127,159,239
 48720 DEFB 244,127,241,233,95,239,222,237,212,47,244,119,228,254,245,238
 48736 DEFB 253,215,110,253,255,66,214,255,255,62,244,93,255,223,253,191
 48752 DEFB 255,255,187,247,255,255,191,123,255,255,87,235,170,95,250,170
 48768 DEFB 0,190,255,127,255,253,85,239,247,251,223,95,250,85,215,234
 48784 DEFB 254,255,253,223,253,249,239,251,191,208,191,255,15,116,255,223
 48800 DEFB 242,47,239,191,231,177,127,254,191,247,251,223,251,182,65,23
 48816 DEFB 244,223,247,90,215,255,251,123,252,127,190,65,231,255,127,85
 48832 DEFB 223,255,127,191,190,93,191,255,55,213,191,235,255,254,249,247
 48848 DEFB 47,254,143,151,250,247,123,183,43,244,47,238,39,127,175,119
 48864 DEFB 191,235,118,191,255,66,107,255,255,124,47,186,255,251,191,253
 48880 DEFB 255,255,221,239,255,255,253,222,255,255,234,215,85,250,95,85
 48896 DEFB 0,92,0,0,255,128,42,5,15,192,248,4,160,42,20,72
 48912 DEFB 95,0,128,7,128,96,3,224,2,71,252,0,15,230,255,248
 48928 DEFB 75,4,176,2,120,82,0,0,156,9,192,7,224,198,98,6
 48944 DEFB 32,4,16,202,15,255,0,0,0,0,92,98,2,127,0,162
 48960 DEFB 0,127,0,156,92,48,0,0,12,16,0,13,0,0,23,7
 48976 DEFB 116,128,120,9,64,31,15,237,22,112,4,112,110,0,244,241
 48992 DEFB 0,208,110,1,0,71,50,0,0,62,5,4,0,192,3,95
 49008 DEFB 0,0,248,7,0,0,128,127,0,0,72,20,42,160,4,42
 49024 DEFB 0,58,0,0,255,1,84,160,240,3,31,32,5,84,40,18
 49040 DEFB 250,0,1,224,1,6,192,7,64,226,63,0,240,103,255,31
 49056 DEFB 210,32,13,64,30,74,0,0,57,144,3,224,7,99,70,96
 49072 DEFB 4,32,8,83,240,255,0,0,0,0,58,70,64,254,0,69
 49088 DEFB 0,254,0,57,58,12,0,0,48,8,0,176,0,0,232,224
 49104 DEFB 46,1,30,144,2,248,240,183,104,14,32,14,118,0,47,143
 49120 DEFB 0,11,118,128,0,226,76,0,0,124,160,32,0,3,192,250
 49136 DEFB 0,0,31,224,0,0,1,254,0,0,18,40,84,5,32,84
 49152 DEFB 0,93,255,254,255,191,170,245,239,223,251,244,175,170,213,75
 49168 DEFB 95,255,191,247,191,127,251,239,234,71,253,190,15,230,255,251
 49184 DEFB 75,244,183,250,123,82,254,127,157,233,223,247,239,198,98,246
 49200 DEFB 47,244,23,202,239,255,63,254,127,192,93,98,250,127,254,170
 49216 DEFB 252,127,254,157,93,182,254,255,236,215,254,237,255,127,23,247
 49232 DEFB 116,191,120,233,95,31,239,237,214,119,244,119,110,255,245,241
 49248 DEFB 254,215,110,253,127,71,50,128,239,62,245,5,255,223,251,95
 49264 DEFB 255,135,251,247,127,248,191,127,255,135,75,213,170,175,244,170
 49280 DEFB 0,186,255,127,255,253,85,175,247,251,223,47,245,85,171,210
 49296 DEFB 250,255,253,239,253,254,223,247,87,226,191,125,240,103,255,223
 49312 DEFB 210,47,237,95,222,74,127,254,185,151,251,239,247,99,70,111
 49328 DEFB 244,47,232,83,247,255,252,127,254,3,186,70,95,254,127,85
 49344 DEFB 63,254,127,185,186,109,127,255,55,235,127,183,255,254,232,239
 49360 DEFB 46,253,30,151,250,248,247,183,107,238,47,238,118,255,175,143
 49376 DEFB 127,235,118,191,254,226,76,1,247,124,175,160,255,251,223,250
 49392 DEFB 255,225,223,239,254,31,253,254,255,225,210,171,85,245,47,85
 49408 DEFB 0,4,0,0,255,128,42,0,15,64,248,5,208,26,20,36
 49424 DEFB 255,0,128,0,0,160,2,224,23,163,252,65,255,174,255,248
 49440 DEFB 99,6,48,2,88,66,0,0,20,1,64,4,224,198,90,5
 49456 DEFB 160,3,16,218,19,255,0,0,0,63,244,230,1,255,0,162
 49472 DEFB 0,63,0,20,4,48,0,0,14,0,0,9,0,0,31,1
 49488 DEFB 12,192,4,9,0,15,14,109,22,240,6,64,36,0,240,224
 49504 DEFB 0,208,110,1,0,111,214,127,16,62,13,124,0,0,0,127
 49520 DEFB 0,120,248,7,128,7,128,127,0,120,36,20,26,208,5,42
 49536 DEFB 0,32,0,0,255,1,84,0,240,2,31,160,11,88,40,36
 49552 DEFB 255,0,1,0,0,5,64,7,232,197,63,130,255,117,255,31
 49568 DEFB 198,96,12,64,26,66,0,0,40,128,2,32,7,99,90,160
 49584 DEFB 5,192,8,91,200,255,0,0,0,252,47,103,128,255,0,69
 49600 DEFB 0,252,0,40,32,12,0,0,112,0,0,144,0,0,248,128
 49616 DEFB 48,3,32,144,0,240,112,182,104,15,96,2,36,0,15,7
 49632 DEFB 0,11,118,128,0,246,107,254,8,124,176,62,0,0,0,254
 49648 DEFB 0,30,31,224,1,224,1,254,0,30,36,40,88,11,160,84
 49664 DEFB 0,5,255,254,255,191,170,240,239,95,251,245,215,218,213,165
 49680 DEFB 255,254,191,248,127,175,250,239,215,163,253,65,255,174,255,251
 49696 DEFB 99,246,55,250,91,66,254,127,21,225,95,244,239,198,90,245
 49712 DEFB 175,251,23,218,211,255,127,254,127,191,245,230,253,255,254,170
 49728 DEFB 255,191,254,21,5,182,254,255,238,239,254,233,255,127,31,249
 49744 DEFB 140,223,4,233,31,15,238,109,214,247,246,79,164,255,243,224
 49760 DEFB 254,215,110,253,127,111,214,127,208,62,205,125,255,63,252,127
 49776 DEFB 255,123,251,247,191,247,191,127,255,123,165,213,218,215,245,170
 49792 DEFB 0,160,255,127,255,253,85,15,247,250,223,175,235,91,171,165
 49808 DEFB 255,127,253,31,254,245,95,247,235,197,191,130,255,117,255,223
 49824 DEFB 198,111,236,95,218,66,127,254,168,135,250,47,247,99,90,175
 49840 DEFB 245,223,232,91,203,255,254,127,254,253,175,103,191,255,127,85
 49856 DEFB 255,253,127,168,160,109,127,255,119,247,127,151,255,254,248,159
 49872 DEFB 49,251,32,151,248,240,119,182,107,239,111,242,37,255,207,7
 49888 DEFB 127,235,118,191,254,246,107,254,11,124,179,190,255,252,63,254
 49904 DEFB 255,222,223,239,253,239,253,254,255,222,165,171,91,235,175,85
 49920 DEFB 0,126,0,1,255,128,62,7,31,224,248,14,80,30,28,28
 49936 DEFB 31,1,128,0,0,144,0,48,31,251,236,127,255,238,255,248
 49952 DEFB 14,0,224,3,24,206,0,0,134,8,96,0,160,222,4,0
 49968 DEFB 64,2,208,210,12,255,0,0,0,32,70,70,0,63,0,227
 49984 DEFB 0,63,0,134,126,56,0,0,14,0,0,9,0,0,231,3
 50000 DEFB 29,192,2,30,0,79,14,173,22,112,4,192,61,0,240,228
 50016 DEFB 0,208,110,1,0,71,246,255,31,126,63,44,0,0,0,159
 50032 DEFB 0,92,248,15,192,5,128,255,0,92,28,28,30,80,14,62
 50048 DEFB 0,126,0,128,255,1,124,224,248,7,31,112,10,120,56,56
 50064 DEFB 248,128,1,0,0,9,0,12,248,223,55,254,255,119,255,31
 50080 DEFB 112,0,7,192,24,115,0,0,97,16,6,0,5,123,32,0
 50096 DEFB 2,64,11,75,48,255,0,0,0,4,98,98,0,252,0,199
 50112 DEFB 0,252,0,97,126,28,0,0,112,0,0,144,0,0,231,192
 50128 DEFB 184,3,64,120,0,242,112,181,104,14,32,3,188,0,15,39
 50144 DEFB 0,11,118,128,0,226,111,255,248,126,252,52,0,0,0,249
 50160 DEFB 0,58,31,240,3,160,1,255,0,58,56,56,120,10,112,124
 50176 DEFB 0,126,255,253,255,191,190,247,223,239,251,238,87,222,221,221
 50192 DEFB 31,253,191,255,255,151,248,55,223,251,237,127,255,238,255,251
 50208 DEFB 14,240,239,251,27,206,254,255,134,232,111,240,175,222,5,240
 50224 DEFB 95,250,215,210,236,255,127,254,127,160,70,70,254,191,254,235
 50240 DEFB 255,191,128,134,126,186,254,255,238,255,254,233,255,127,231,251
 50256 DEFB 221,223,250,222,127,79,238,173,214,119,244,223,189,255,247,238
 50272 DEFB 254,215,110,253,127,71,246,255,223,126,191,45,252,255,255,159
 50288 DEFB 254,93,251,239,223,245,191,255,254,93,221,221,222,87,238,190
 50304 DEFB 0,126,255,191,255,253,125,239,251,247,223,119,234,123,187,187
 50320 DEFB 248,191,253,255,255,233,31,236,251,223,183,254,255,119,255,223
 50336 DEFB 112,15,247,223,216,115,127,255,97,23,246,15,245,123,160,15
 50352 DEFB 250,95,235,75,55,255,254,127,254,5,98,98,127,253,127,215
 50368 DEFB 255,253,1,97,126,93,127,255,119,255,127,151,255,254,231,223
 50384 DEFB 187,251,95,123,254,242,119,181,107,238,47,251,189,255,239,119
 50400 DEFB 127,235,118,191,254,226,111,255,251,126,253,180,63,255,255,249
 50416 DEFB 127,186,223,247,251,175,253,255,127,186,187,187,123,234,119,125
 50432 DEFB 0,47,0,2,255,128,62,2,47,240,248,30,56,14,56,12
 50448 DEFB 127,2,0,0,0,224,3,240,31,159,234,113,191,252,255,248
 50464 DEFB 116,7,64,0,112,166,0,0,255,15,240,4,48,206,126,7
 50480 DEFB 224,0,48,252,0,127,0,0,0,63,231,229,0,63,0,227
 50496 DEFB 0,63,127,255,239,28,0,0,14,0,0,4,0,0,198,7
 50512 DEFB 63,192,3,62,0,79,14,205,22,240,6,192,127,0,240,228
 50528 DEFB 0,208,6,1,0,111,254,111,28,252,31,62,3,0,0,62
 50544 DEFB 1,4,248,23,64,0,128,127,1,4,12,56,14,56,30,62
 50560 DEFB 0,244,0,64,255,1,124,64,244,15,31,120,28,112,28,48
 50576 DEFB 254,64,0,0,0,7,192,15,248,249,87,142,253,63,255,31
 50592 DEFB 46,224,2,0,14,101,0,0,255,240,15,32,12,115,126,224
 50608 DEFB 7,0,12,63,0,254,0,0,0,252,231,167,0,252,0,199
 50624 DEFB 0,252,254,255,247,56,0,0,112,0,0,32,0,0,99,224
 50640 DEFB 252,3,192,124,0,242,112,179,104,15,96,3,254,0,15,39
 50656 DEFB 0,11,96,128,0,246,127,246,56,63,248,124,192,0,0,124
 50672 DEFB 128,32,31,232,2,0,1,254,128,32,48,28,112,28,120,124
@bfix=DEFB 0,175,127,250,255,191,190,250,175,247,251,222,187,238,187,237
 50688 DEFB 0,175,127,250,255,191,190,250,175,247,251,162,187,238,187,237
 50704 DEFB 127,250,127,255,255,239,251,247,223,159,234,113,191,252,255,251
 50720 DEFB 116,247,79,248,115,166,254,255,255,239,247,244,55,206,126,247
 50736 DEFB 231,248,55,253,243,127,127,254,127,191,231,229,255,191,254,235
 50752 DEFB 255,191,127,255,239,220,254,255,238,255,254,244,247,255,198,247
 50768 DEFB 191,223,251,190,127,79,238,205,214,247,246,223,127,255,247,228
 50784 DEFB 254,215,6,253,127,111,254,111,220,252,159,62,251,255,255,62
@bfix=DEFB 253,5,251,215,95,240,191,127,253,5,237,187,238,187,222,190
 50800 DEFB 253,5,251,215,95,240,191,127,253,5,237,187,238,187,162,190
@bfix=DEFB 0,245,254,95,255,253,125,95,245,239,223,123,221,119,221,183
 50816 DEFB 0,245,254,95,255,253,125,95,245,239,223,69,221,119,221,183
 50832 DEFB 254,95,254,255,255,247,223,239,251,249,87,142,253,63,255,223
 50848 DEFB 46,239,242,31,206,101,127,255,255,247,239,47,236,115,126,239
 50864 DEFB 231,31,236,191,207,254,254,127,254,253,231,167,255,253,127,215
 50880 DEFB 255,253,254,255,247,59,127,255,119,255,127,47,239,255,99,239
 50896 DEFB 253,251,223,125,254,242,119,179,107,239,111,251,254,255,239,39
 50912 DEFB 127,235,96,191,254,246,127,246,59,63,249,124,223,255,255,124
@bfix=DEFB 191,160,223,235,250,15,253,254,191,160,183,221,119,221,123,125
 50928 DEFB 191,160,223,235,250,15,253,254,191,160,183,221,119,221,69,125
 50944 DEFB 0,127,128,1,126,128,126,7,23,248,232,60,120,30,120,28
 50960 DEFB 128,2,0,0,0,112,1,120,31,7,206,127,31,224,126,232
 50976 DEFB 23,1,112,3,176,124,0,0,127,7,248,7,248,252,127,7
 50992 DEFB 248,3,248,192,0,127,0,0,0,79,255,255,0,63,1,231
 51008 DEFB 0,63,95,255,255,15,0,4,15,0,0,4,8,0,204,7
 51024 DEFB 127,128,7,126,0,79,14,239,30,224,7,192,255,0,240,228
 51040 DEFB 0,240,232,1,0,126,240,199,31,120,14,254,4,0,0,64
 51056 DEFB 1,124,232,15,224,7,128,254,0,126,28,120,30,120,60,126
 51072 DEFB 0,254,1,128,126,1,126,224,232,31,23,60,30,120,30,56
 51088 DEFB 1,64,0,0,0,14,128,30,248,224,115,254,248,7,126,23
 51104 DEFB 232,128,14,192,13,62,0,0,254,224,31,224,31,63,254,224
 51120 DEFB 31,192,31,3,0,254,0,0,0,242,255,255,0,252,128,231
 51136 DEFB 0,252,250,255,255,240,0,32,240,0,0,32,16,0,51,224
 51152 DEFB 254,1,224,126,0,242,112,247,120,7,224,3,255,0,15,39
 51168 DEFB 0,15,23,128,0,126,15,227,248,30,112,127,32,0,0,2
 51184 DEFB 128,62,23,240,7,224,1,127,0,126,56,30,120,30,60,126
 51200 DEFB 0,127,191,253,126,191,126,247,215,251,235,189,123,222,123,221
 51216 DEFB 128,250,255,255,255,119,157,123,223,7,206,127,31,225,126,235
 51232 DEFB 23,241,119,155,183,125,255,127,127,247,251,151,251,253,127,247
 51248 DEFB 251,155,251,193,255,127,127,254,127,79,255,255,255,191,253,231
 51264 DEFB 255,191,95,255,255,239,255,244,239,255,254,244,203,255,205,247
 51280 DEFB 127,191,247,126,127,79,238,239,222,227,247,223,255,254,247,228
 51296 DEFB 254,247,232,253,63,126,241,199,223,121,238,254,244,255,255,65
 51312 DEFB 253,125,235,239,239,247,191,254,254,126,221,123,222,123,189,126
 51328 DEFB 0,254,253,191,126,253,126,239,235,223,215,189,222,123,222,187
 51344 DEFB 1,95,255,255,255,238,185,222,251,224,115,254,248,135,126,215
 51360 DEFB 232,143,238,217,237,190,255,254,254,239,223,233,223,191,254,239
 51376 DEFB 223,217,223,131,255,254,254,127,254,242,255,255,255,253,191,231
 51392 DEFB 255,253,250,255,255,247,255,47,247,255,127,47,211,255,179,239
 51408 DEFB 254,253,239,126,254,242,119,247,123,199,239,251,255,127,239,39
 51424 DEFB 127,239,23,191,252,126,143,227,251,158,119,127,47,255,255,130
 51440 DEFB 191,190,215,247,247,239,253,127,127,126,187,222,123,222,189,126

; Sprite graphic data for the teachers
;
; Used by the routine at #R24843. Tiles #b0 and #b128 are unused by design (and
; would appear completely blank if they were used).
b51456 DEFB 16,0,0,27,192,68,152,36,64,0,0,1,188,0,4,73
 51472 DEFB 128,1,68,0,18,32,2,82,0,4,27,1,100,0,0,0
 51488 DEFB 56,252,80,176,50,31,192,0,0,0,3,143,192,11,3,32
 51504 DEFB 3,222,0,63,80,1,252,8,56,224,0,0,60,252,94,198
 51520 DEFB 29,94,0,164,6,0,80,92,0,0,208,20,0,0,143,14
 51536 DEFB 228,0,231,12,128,228,62,156,11,0,0,240,228,0,72,238
 51552 DEFB 2,192,185,0,0,0,0,0,0,3,207,192,5,236,96,1
 51568 DEFB 181,224,29,94,0,5,60,126,0,0,0,7,26,160,74,0
 51584 DEFB 8,0,0,216,3,34,25,36,2,0,0,128,61,0,32,146
 51600 DEFB 1,128,34,0,72,4,64,74,0,32,216,128,38,0,0,0
 51616 DEFB 28,63,10,13,76,248,3,0,0,0,192,241,3,208,192,4
 51632 DEFB 192,123,0,252,10,128,63,16,28,7,0,0,60,63,122,99
 51648 DEFB 184,122,0,37,96,0,10,58,0,0,11,40,0,0,241,112
 51664 DEFB 39,0,231,48,1,39,124,57,208,0,0,15,39,0,18,119
 51680 DEFB 64,3,157,0,0,0,0,0,0,192,243,3,160,55,6,128
 51696 DEFB 173,7,184,122,0,160,60,126,0,0,0,224,88,5,82,0
 51712 DEFB 0,227,255,219,223,68,155,164,95,254,63,253,189,255,244,73
 51728 DEFB 191,253,69,255,210,47,250,82,255,229,155,253,100,224,127,255
 51744 DEFB 184,253,80,176,50,223,223,254,7,255,251,143,223,235,3,47
@bfix=DEFB 251,222,255,191,87,253,253,235,184,224,225,255,188,253,94,198
 51760 DEFB 251,222,255,191,87,253,253,139,184,224,225,255,188,253,94,198
 51776 DEFB 221,94,255,165,246,255,87,92,255,255,215,212,255,127,143,238
 51792 DEFB 228,255,231,236,191,228,190,157,235,63,252,247,228,254,75,238
 51808 DEFB 250,223,185,254,255,195,254,31,255,251,207,223,245,236,111,253
 51824 DEFB 181,239,221,94,255,245,60,126,255,255,255,247,90,175,74,255
 51840 DEFB 0,199,255,219,251,34,217,37,250,127,252,191,189,255,47,146
 51856 DEFB 253,191,162,255,75,244,95,74,255,167,217,191,38,7,254,255
 51872 DEFB 29,191,10,13,76,251,251,127,224,255,223,241,251,215,192,244
@bfix=DEFB 223,123,255,253,234,191,191,215,29,7,135,255,61,191,122,99
 51888 DEFB 223,123,255,253,234,191,191,209,29,7,135,255,61,191,122,99
 51904 DEFB 187,122,255,165,111,255,234,58,255,255,235,43,255,254,241,119
 51920 DEFB 39,255,231,55,253,39,125,185,215,252,63,239,39,127,210,119
 51936 DEFB 95,251,157,127,255,195,127,248,255,223,243,251,175,55,246,191
 51952 DEFB 173,247,187,122,255,175,60,126,255,255,255,239,90,245,82,255
 51968 DEFB 0,28,0,63,160,72,144,20,64,1,192,3,250,0,4,145
@bfix=DEFB 0,1,140,0,18,32,4,137,0,10,127,0,232,31,128,0
 51984 DEFB 0,1,140,0,18,32,4,137,0,10,127,0,228,31,128,0
 52000 DEFB 79,194,78,163,84,31,192,1,248,0,4,252,32,10,53,64
 52016 DEFB 3,207,0,31,80,0,252,20,79,59,30,0,125,244,125,46
 52032 DEFB 29,94,0,228,6,0,208,78,0,0,80,18,0,0,143,15
 52048 DEFB 244,0,243,12,128,232,38,254,15,192,3,112,228,0,136,110
 52064 DEFB 2,224,255,0,0,60,1,224,0,7,223,64,7,210,224,1
 52080 DEFB 151,224,25,94,0,4,253,29,0,0,0,4,144,224,69,0
 52096 DEFB 0,56,0,252,5,18,9,40,2,128,3,192,95,0,32,137
@bfix=DEFB 0,128,49,0,72,4,32,145,0,80,254,0,23,248,1,0
 52112 DEFB 0,128,49,0,72,4,32,145,0,80,254,0,39,248,1,0
 52128 DEFB 242,67,114,197,42,248,3,128,31,0,32,63,4,80,172,2
 52144 DEFB 192,243,0,248,10,0,63,40,242,220,120,0,190,47,190,116
 52160 DEFB 184,122,0,39,96,0,11,114,0,0,10,72,0,0,241,240
 52176 DEFB 47,0,207,48,1,23,100,127,240,3,192,14,39,0,17,118
 52192 DEFB 64,7,255,0,0,60,128,7,0,224,251,2,224,75,7,128
 52208 DEFB 233,7,152,122,0,32,191,184,0,0,0,32,9,7,162,0
 52224 DEFB 0,220,255,191,175,72,151,212,95,253,207,251,250,255,244,145
@bfix=DEFB 127,253,141,255,210,47,244,137,127,234,127,254,232,223,159,255
 52240 DEFB 127,253,141,255,210,47,244,137,127,234,127,254,228,223,159,255
 52256 DEFB 79,194,78,163,85,223,223,253,249,255,244,252,47,234,53,95
 52272 DEFB 251,207,127,223,87,254,253,213,79,59,222,255,125,245,125,46
 52288 DEFB 221,94,255,229,246,191,215,78,255,252,87,210,255,127,143,239
 52304 DEFB 244,248,243,236,191,232,166,254,239,223,251,119,228,254,139,110
 52320 DEFB 250,239,255,254,255,189,253,239,255,247,223,95,247,210,239,253
 52336 DEFB 151,239,217,94,255,244,253,157,255,255,255,244,144,239,69,255
 52352 DEFB 0,59,255,253,245,18,233,43,250,191,243,223,95,255,47,137
@bfix=DEFB 254,191,177,255,75,244,47,145,254,87,254,127,23,251,249,255
 52368 DEFB 254,191,177,255,75,244,47,145,254,87,254,127,39,251,249,255
 52384 DEFB 242,67,114,197,170,251,251,191,159,255,47,63,244,87,172,250
 52400 DEFB 223,243,254,251,234,127,191,171,242,220,123,255,190,175,190,116
 52416 DEFB 187,122,255,167,111,253,235,114,255,63,234,75,255,254,241,247
 52432 DEFB 47,31,207,55,253,23,101,127,247,251,223,238,39,127,209,118
 52448 DEFB 95,247,255,127,255,189,191,247,255,239,251,250,239,75,247,191
 52464 DEFB 233,247,155,122,255,47,191,185,255,255,255,47,9,247,162,255
 52480 DEFB 0,3,0,110,16,104,112,20,64,0,48,6,225,0,6,135
 52496 DEFB 0,0,142,0,18,32,4,136,128,9,142,0,40,15,224,0
 52512 DEFB 133,194,72,199,140,31,192,0,254,0,8,92,32,12,120,192
 52528 DEFB 7,207,128,31,32,0,126,18,133,35,33,0,126,244,126,30
 52544 DEFB 31,92,0,180,14,64,160,71,0,3,32,23,0,0,159,15
 52560 DEFB 244,7,241,9,64,239,30,237,20,32,4,112,228,0,244,238
 52576 DEFB 1,208,110,1,0,66,2,16,0,7,239,64,7,225,224,1
@bfix=DEFB 149,224,25,92,0,5,254,30,0,0,0,4,141,96,68,0
 52592 DEFB 149,224,25,92,0,5,254,28,0,0,0,4,141,96,68,0
 52608 DEFB 0,192,0,118,8,22,14,40,2,0,12,96,135,0,96,225
 52624 DEFB 0,0,113,0,72,4,32,17,1,144,113,0,20,240,7,0
 52640 DEFB 161,67,18,227,49,248,3,0,127,0,16,58,4,48,30,3
 52656 DEFB 224,243,1,248,4,0,126,72,161,196,132,0,126,47,126,120
 52672 DEFB 248,58,0,45,112,2,5,226,0,192,4,232,0,0,249,240
 52688 DEFB 47,224,143,144,2,247,120,183,40,4,32,14,39,0,47,119
 52704 DEFB 128,11,118,128,0,66,64,8,0,224,247,2,224,135,7,128
@bfix=DEFB 169,7,152,58,0,160,127,120,0,0,0,32,177,6,34,0
 52720 DEFB 169,7,152,58,0,160,127,56,0,0,0,32,177,6,34,0
 52736 DEFB 0,195,127,110,23,104,119,212,95,252,55,246,225,127,246,135
 52752 DEFB 127,254,142,255,210,47,244,168,191,233,142,255,40,239,239,254
 52768 DEFB 133,194,72,199,141,223,223,254,254,127,232,92,47,236,120,223
 52784 DEFB 247,207,191,223,47,255,126,210,133,163,161,127,126,245,126,30
 52800 DEFB 223,93,252,181,206,95,167,71,127,251,47,215,255,127,159,239
 52816 DEFB 244,247,241,233,95,239,222,237,212,47,244,119,228,254,245,238
 52832 DEFB 253,215,110,253,255,66,250,23,255,247,239,95,247,225,239,253
@bfix=DEFB 149,239,217,93,255,245,254,222,127,255,255,244,141,111,68,127
 52848 DEFB 149,239,217,93,255,245,254,220,127,255,255,244,141,111,68,127
 52864 DEFB 0,195,254,118,232,22,238,43,250,63,236,111,135,254,111,225
 52880 DEFB 254,127,113,255,75,244,47,21,253,151,113,255,20,247,247,127
 52896 DEFB 161,67,18,227,177,251,251,127,127,254,23,58,244,55,30,251
 52912 DEFB 239,243,253,251,244,255,126,75,161,197,133,254,126,175,126,120
 52928 DEFB 251,186,63,173,115,250,229,226,254,223,244,235,255,254,249,247
 52944 DEFB 47,239,143,151,250,247,123,183,43,244,47,238,39,127,175,119
 52960 DEFB 191,235,118,191,255,66,95,232,255,239,247,250,239,135,247,191
@bfix=DEFB 169,247,155,186,255,175,127,123,254,255,255,47,177,246,34,254
 52976 DEFB 169,247,155,186,255,175,127,59,254,255,255,47,177,246,34,254
 52992 DEFB 0,43,128,68,136,36,80,20,64,2,184,4,72,128,2,69
@bfix=DEFB 0,0,141,0,18,32,4,132,64,11,132,0,36,16,112,0
 53008 DEFB 0,0,141,0,18,32,4,132,64,11,132,0,40,16,112,0
 53024 DEFB 133,130,40,143,196,31,192,1,7,128,8,88,32,8,252,64
 53040 DEFB 7,135,128,31,240,0,255,22,133,35,67,128,114,228,29,254
 53056 DEFB 31,92,3,178,61,96,240,39,128,4,112,13,0,0,23,7
 53072 DEFB 116,8,120,9,64,31,15,237,22,112,4,112,110,0,244,241
 53088 DEFB 0,208,110,1,0,71,4,56,0,7,46,64,1,223,224,1
 53104 DEFB 149,144,25,92,0,3,114,29,128,0,0,3,72,112,39,128
 53120 DEFB 0,212,1,34,17,36,10,40,2,64,29,32,18,1,64,162
@bfix=DEFB 0,0,177,0,72,4,32,33,2,208,33,0,36,8,14,0
 53136 DEFB 0,0,177,0,72,4,32,33,2,208,33,0,20,8,14,0
 53152 DEFB 161,65,20,241,35,248,3,128,224,1,16,26,4,16,63,2
 53168 DEFB 224,225,1,248,15,0,255,104,161,196,194,1,78,39,184,127
 53184 DEFB 248,58,192,77,188,6,15,228,1,32,14,176,0,0,232,224
 53200 DEFB 46,16,30,144,2,248,240,183,104,14,32,14,118,0,47,143
 53216 DEFB 0,11,118,128,0,226,32,28,0,224,116,2,128,251,7,128
 53232 DEFB 169,9,152,58,0,192,78,184,1,0,0,192,18,14,228,1
 53248 DEFB 0,171,191,68,139,164,87,212,95,250,187,244,72,191,250,69
@bfix=DEFB 127,254,141,127,210,47,244,180,95,235,132,255,164,208,119,254
 53264 DEFB 127,254,141,127,210,47,244,180,95,235,132,255,168,208,119,254
 53280 DEFB 133,130,168,143,197,223,223,253,7,191,232,88,47,232,252,95
 53296 DEFB 247,183,191,223,247,254,255,214,133,163,67,191,114,229,157,254
 53312 DEFB 223,93,251,178,61,96,247,167,191,228,119,237,255,127,23,247
 53328 DEFB 116,232,120,233,95,31,239,237,214,119,244,119,110,255,245,241
 53344 DEFB 254,215,110,253,127,71,244,59,255,247,46,95,249,223,239,253
 53360 DEFB 149,151,217,93,255,251,114,221,191,255,255,251,72,119,167,191
 53376 DEFB 0,213,253,34,209,37,234,43,250,95,221,47,18,253,95,162
@bfix=DEFB 254,127,177,254,75,244,47,45,250,215,33,255,37,11,238,127
 53392 DEFB 254,127,177,254,75,244,47,45,250,215,33,255,21,11,238,127
 53408 DEFB 161,65,21,241,163,251,251,191,224,253,23,26,244,23,63,250
 53424 DEFB 239,237,253,251,239,127,255,107,161,197,194,253,78,167,185,127
 53440 DEFB 251,186,223,77,188,6,239,229,253,39,238,183,255,254,232,239
 53456 DEFB 46,23,30,151,250,248,247,183,107,238,47,238,118,255,175,143
 53472 DEFB 127,235,118,191,254,226,47,220,255,239,116,250,159,251,247,191
 53488 DEFB 169,233,155,186,255,223,78,187,253,255,255,223,18,238,229,253
 53504 DEFB 0,86,128,69,200,44,16,12,64,5,104,4,92,128,2,193
@bfix=DEFB 0,0,159,128,18,32,5,2,96,6,165,0,44,26,240,0
 53520 DEFB 0,0,159,128,18,32,5,2,96,6,165,0,36,26,240,0
 53536 DEFB 165,146,39,159,232,31,192,1,175,128,10,89,32,9,254,128
 53552 DEFB 7,131,64,15,144,0,255,29,133,35,106,128,120,230,29,94
 53568 DEFB 3,72,6,170,195,127,144,35,192,31,144,9,0,0,31,1
 53584 DEFB 12,31,4,9,0,15,14,109,22,240,6,64,36,0,240,224
 53600 DEFB 0,208,110,1,0,111,6,168,0,7,142,96,1,213,224,0
 53616 DEFB 148,144,9,72,0,1,56,29,64,0,0,3,95,144,34,128
 53632 DEFB 0,106,1,162,19,52,8,48,2,160,22,32,58,1,64,131
@bfix=DEFB 0,0,249,1,72,4,160,64,6,96,165,0,52,88,15,0
 53648 DEFB 0,0,249,1,72,4,160,64,6,96,165,0,36,88,15,0
 53664 DEFB 165,73,228,249,23,248,3,128,245,1,80,154,4,144,127,1
 53680 DEFB 224,193,2,240,9,0,255,184,161,196,86,1,30,103,184,122
 53696 DEFB 192,18,96,85,195,254,9,196,3,248,9,144,0,0,248,128
 53712 DEFB 48,248,32,144,0,240,112,182,104,15,96,2,36,0,15,7
 53728 DEFB 0,11,118,128,0,246,96,21,0,224,113,6,128,171,7,0
 53744 DEFB 41,9,144,18,0,128,28,184,2,0,0,192,250,9,68,1
 53760 DEFB 0,86,191,69,203,172,23,236,95,245,107,244,92,191,250,193
@bfix=DEFB 127,254,159,191,210,47,245,122,111,246,165,255,172,218,247,254
 53776 DEFB 127,254,159,191,210,47,245,122,111,246,165,255,164,218,247,254
 53792 DEFB 165,146,167,159,235,223,223,253,175,159,234,89,47,233,254,191
@bfix=DEFB 231,187,95,239,151,254,255,221,133,163,106,191,120,230,221,94
 53808 DEFB 231,187,79,239,151,254,255,221,133,163,106,191,120,230,221,94
 53824 DEFB 227,75,230,170,195,127,151,163,223,223,151,233,255,127,31,249
 53840 DEFB 140,223,4,233,31,15,238,109,214,247,246,79,164,255,243,224
@bfix=DEFB 254,215,110,253,127,111,246,171,255,247,142,111,253,213,239,254
 53856 DEFB 254,215,110,253,127,111,246,187,255,247,142,111,253,213,239,254
 53872 DEFB 148,151,233,75,255,253,56,221,95,248,127,251,95,151,162,191
 53888 DEFB 0,106,253,162,211,53,232,55,250,175,214,47,58,253,95,131
@bfix=DEFB 254,127,249,253,75,244,175,94,246,111,165,255,53,91,239,127
 53904 DEFB 254,127,249,253,75,244,175,94,246,111,165,255,37,91,239,127
 53920 DEFB 165,73,229,249,215,251,251,191,245,249,87,154,244,151,127,253
@bfix=DEFB 231,221,250,247,233,127,255,187,161,197,86,253,30,103,187,122
 53936 DEFB 231,221,242,247,233,127,255,187,161,197,86,253,30,103,187,122
 53952 DEFB 199,210,103,85,195,254,233,197,251,251,233,151,255,254,248,159
 53968 DEFB 49,251,32,151,248,240,119,182,107,239,111,242,37,255,207,7
@bfix=DEFB 127,235,118,191,254,246,111,213,255,239,113,246,191,171,247,127
 53984 DEFB 127,235,118,191,254,246,111,221,255,239,113,246,191,171,247,127
 54000 DEFB 41,233,151,210,255,191,28,187,250,31,254,223,250,233,69,253
 54016 DEFB 0,40,128,68,72,46,16,31,64,2,144,4,68,128,2,225
@bfix=DEFB 0,1,212,128,59,160,15,1,224,6,164,0,46,16,80,0
 54032 DEFB 0,1,212,128,59,160,15,1,224,6,164,0,44,16,80,0
 54048 DEFB 165,146,23,127,248,63,192,1,5,224,10,89,32,7,255,128
 54064 DEFB 31,129,64,31,8,1,246,4,133,47,67,128,120,230,29,94
 54080 DEFB 1,72,31,238,55,112,136,23,32,36,8,9,0,0,231,3
 54096 DEFB 29,47,2,30,0,79,14,173,22,112,4,192,61,0,240,228
 54112 DEFB 0,208,110,1,0,71,4,56,0,7,142,96,1,213,224,0
 54128 DEFB 148,112,9,72,0,0,152,29,32,7,128,5,47,136,19,128
 54144 DEFB 0,20,1,34,18,116,8,248,2,64,9,32,34,1,64,135
@bfix=DEFB 0,128,43,1,220,5,240,128,7,96,37,0,116,8,10,0
 54160 DEFB 0,128,43,1,220,5,240,128,7,96,37,0,52,8,10,0
 54176 DEFB 165,73,232,254,31,252,3,128,160,7,80,154,4,224,255,1
 54192 DEFB 248,129,2,248,16,128,111,32,161,244,194,1,30,103,184,122
 54208 DEFB 128,18,248,119,236,14,17,232,4,36,16,144,0,0,231,192
 54224 DEFB 184,244,64,120,0,242,112,181,104,14,32,3,188,0,15,39
 54240 DEFB 0,11,118,128,0,226,32,28,0,224,113,6,128,171,7,0
 54256 DEFB 41,14,144,18,0,0,25,184,4,224,1,160,244,17,200,1
 54272 DEFB 0,168,191,68,75,174,23,223,95,250,147,244,68,191,250,225
@bfix=DEFB 127,253,212,191,187,175,239,125,239,246,164,255,174,208,87,254
 54288 DEFB 127,253,212,191,187,175,239,125,239,246,164,255,172,208,87,254
 54304 DEFB 165,146,215,127,251,191,223,253,5,239,234,89,47,247,255,191
@bfix=DEFB 223,189,95,223,11,253,246,228,133,175,67,143,120,230,221,94
 54320 DEFB 223,189,79,223,11,253,246,228,133,175,67,143,120,230,221,94
 54336 DEFB 253,75,159,238,55,112,139,215,47,164,11,233,255,127,231,251
@bfix=DEFB 221,175,250,222,127,79,238,173,214,119,244,223,189,255,247,228
 54352 DEFB 221,175,250,222,127,79,238,173,214,119,244,223,189,255,247,238
 54368 DEFB 254,215,110,253,127,71,244,56,255,247,142,111,253,213,239,254
 54384 DEFB 148,119,233,75,255,254,152,221,175,247,191,245,47,139,211,159
 54400 DEFB 0,21,253,34,210,117,232,251,250,95,201,47,34,253,95,135
@bfix=DEFB 254,191,43,253,221,245,247,190,247,111,37,255,117,11,234,127
 54416 DEFB 254,191,43,253,221,245,247,190,247,111,37,255,53,11,234,127
 54432 DEFB 165,73,235,254,223,253,251,191,160,247,87,154,244,239,255,253
@bfix=DEFB 251,189,250,251,208,191,111,39,161,245,194,241,30,103,187,122
 54448 DEFB 251,189,242,251,208,191,111,39,161,245,194,241,30,103,187,122
 54464 DEFB 191,210,249,119,236,14,209,235,244,37,208,151,255,254,231,223
@bfix=DEFB 187,245,95,123,254,242,119,181,107,238,47,251,189,255,239,39
 54480 DEFB 187,245,95,123,254,242,119,181,107,238,47,251,189,255,239,119
 54496 DEFB 127,235,118,191,254,226,47,28,255,239,113,246,191,171,247,127
 54512 DEFB 41,238,151,210,255,127,25,187,245,239,253,175,244,209,203,249
 54528 DEFB 0,33,0,76,104,54,16,53,192,2,16,4,198,128,3,193
@bfix=DEFB 0,1,117,0,110,224,25,1,96,2,44,0,54,30,80,0
 54544 DEFB 0,1,117,0,110,224,25,1,96,2,44,0,46,30,80,0
 54560 DEFB 165,146,15,63,224,66,32,1,229,112,10,89,32,3,254,0
 54576 DEFB 48,130,192,36,72,2,20,2,5,63,53,240,124,230,29,94
 54592 DEFB 1,120,100,233,255,112,200,14,112,68,72,4,0,0,198,7
 54608 DEFB 63,80,3,62,0,79,14,205,22,240,6,192,127,0,240,228
 54624 DEFB 0,208,6,1,0,111,3,95,0,7,206,96,1,213,224,1
 54640 DEFB 244,224,31,112,0,0,156,29,16,8,64,0,142,200,15,96
 54656 DEFB 0,132,0,50,22,108,8,172,3,64,8,32,99,1,192,131
@bfix=DEFB 0,128,174,0,118,7,152,128,6,64,52,0,108,120,10,0
 54672 DEFB 0,128,174,0,118,7,152,128,6,64,52,0,116,120,10,0
 54688 DEFB 165,73,240,252,7,66,4,128,167,14,80,154,4,192,127,0
 54704 DEFB 12,65,3,36,18,64,40,64,160,252,172,15,62,103,184,122
 54720 DEFB 128,30,38,151,255,14,19,112,14,34,18,32,0,0,99,224
 54736 DEFB 252,10,192,124,0,242,112,179,104,15,96,3,254,0,15,39
 54752 DEFB 0,11,96,128,0,246,192,250,0,224,115,6,128,171,7,128
 54768 DEFB 47,7,248,14,0,0,57,184,8,16,2,0,113,19,240,6
 54784 DEFB 0,161,127,76,107,182,23,181,223,250,23,244,198,191,251,193
@bfix=DEFB 127,253,117,127,110,239,217,125,111,250,44,255,182,222,87,254
 54800 DEFB 127,253,117,127,110,239,217,125,111,250,44,255,174,222,87,254
 54816 DEFB 165,146,239,191,231,66,47,253,229,119,234,89,47,251,254,127
@bfix=DEFB 176,186,223,164,75,250,20,250,5,191,181,247,124,230,221,94
 54832 DEFB 176,186,207,164,75,226,20,250,5,191,181,247,124,230,221,94
 54848 DEFB 253,123,100,233,255,112,203,238,119,68,75,244,247,255,198,247
 54864 DEFB 191,80,251,190,127,79,238,205,214,247,246,223,127,255,247,228
 54880 DEFB 254,215,6,253,127,111,251,95,127,247,206,111,253,213,239,253
 54896 DEFB 244,239,223,119,253,254,156,221,215,232,95,250,142,203,239,111
 54912 DEFB 0,133,254,50,214,109,232,173,251,95,232,47,99,253,223,131
@bfix=DEFB 254,191,174,254,118,247,155,190,246,95,52,255,109,123,234,127
 54928 DEFB 254,191,174,254,118,247,155,190,246,95,52,255,117,123,234,127
 54944 DEFB 165,73,247,253,231,66,244,191,167,238,87,154,244,223,127,254
@bfix=DEFB 13,93,251,37,210,95,40,95,160,253,173,239,62,103,187,122
 54960 DEFB 13,93,243,37,210,71,40,95,160,253,173,239,62,103,187,122
 54976 DEFB 191,222,38,151,255,14,211,119,238,34,210,47,239,255,99,239
 54992 DEFB 253,10,223,125,254,242,119,179,107,239,111,251,254,255,239,39
 55008 DEFB 127,235,96,191,254,246,223,250,254,239,115,246,191,171,247,191
 55024 DEFB 47,247,251,238,191,127,57,187,235,23,250,95,113,211,247,246
 55040 DEFB 0,61,128,101,72,53,224,72,64,3,216,6,84,128,3,94
@bfix=DEFB 0,2,30,0,68,32,17,2,32,2,37,0,53,8,32,0
 55056 DEFB 0,2,30,0,68,32,17,2,32,2,37,0,54,8,32,0
 55072 DEFB 163,122,15,63,224,127,224,0,130,240,10,55,160,3,254,0
 55088 DEFB 15,135,128,127,104,7,247,1,35,63,33,248,92,230,29,94
 55104 DEFB 3,120,69,222,255,127,232,14,240,78,200,4,8,0,204,7
 55120 DEFB 127,90,7,126,0,79,14,239,30,224,7,192,255,0,240,228
 55136 DEFB 0,240,232,1,0,126,2,31,128,5,206,96,1,213,224,3
 55152 DEFB 245,192,63,112,2,0,92,29,8,16,224,0,126,232,15,112
 55168 DEFB 0,188,1,166,18,172,7,18,2,192,27,96,42,1,192,122
@bfix=DEFB 0,64,120,0,34,4,136,64,4,64,164,0,172,16,4,0
 55184 DEFB 0,64,120,0,34,4,136,64,4,64,164,0,108,16,4,0
 55200 DEFB 197,94,240,252,7,254,7,0,65,15,80,236,5,192,127,0
 55216 DEFB 240,225,1,254,22,224,239,128,196,252,132,31,58,103,184,122
 55232 DEFB 192,30,162,123,255,254,23,112,15,114,19,32,16,0,51,224
 55248 DEFB 254,90,224,126,0,242,112,247,120,7,224,3,255,0,15,39
 55264 DEFB 0,15,23,128,0,126,64,248,1,160,115,6,128,171,7,192
 55280 DEFB 175,3,252,14,64,0,58,184,16,8,7,0,126,23,240,14
 55296 DEFB 0,189,191,101,75,181,239,72,95,251,219,246,84,191,251,94
@bfix=DEFB 255,250,30,255,68,47,209,122,47,250,37,255,181,200,35,254
 55312 DEFB 255,250,30,255,68,47,209,122,47,250,37,255,182,200,35,254
 55328 DEFB 163,122,239,191,239,127,239,252,130,247,234,55,175,251,254,255
 55344 DEFB 143,183,191,127,107,247,247,253,35,191,161,251,92,230,221,94
 55360 DEFB 251,123,69,222,255,127,235,238,247,78,203,244,203,255,205,247
 55376 DEFB 127,90,247,126,127,79,238,239,222,227,247,223,255,254,247,228
 55392 DEFB 254,247,232,253,63,126,250,31,191,245,206,111,253,213,239,251
 55408 DEFB 245,223,191,119,242,255,92,221,232,208,239,255,126,235,239,119
 55424 DEFB 0,189,253,166,210,173,247,18,250,223,219,111,42,253,223,122
@bfix=DEFB 255,95,120,255,34,244,139,94,244,95,164,255,173,19,196,127
 55440 DEFB 255,95,120,255,34,244,139,94,244,95,164,255,109,19,196,127
 55456 DEFB 197,94,247,253,247,254,247,63,65,239,87,236,245,223,127,255
 55472 DEFB 241,237,253,254,214,239,239,191,196,253,133,223,58,103,187,122
 55488 DEFB 223,222,162,123,255,254,215,119,239,114,211,47,211,255,179,239
 55504 DEFB 254,90,239,126,254,242,119,247,123,199,239,251,255,127,239,39
 55520 DEFB 127,239,23,191,252,126,95,248,253,175,115,246,191,171,247,223
 55536 DEFB 175,251,253,238,79,255,58,187,23,11,247,255,126,215,247,238

; Number string and graphic buffer
;
; Used by the routine at #R30278.
@label=NBUF
b55552 DEFS 11 ; The ASCII codes of the digits of the number are stored here
@label=NBUFG
 55563 DEFS 21 ; The corresponding graphic data is generated and stored here

; Font character bitmap widths for CHR$(32-127)
;
; Used by the routines at #R28994 and #R30042.
b55584 DEFB 3,1,3,5,5,3,5,2,2,2,5,5,2,4,2,3
 55600 DEFB 4,3,4,4,4,4,4,4,4,4,2,2,4,4,4,4
 55616 DEFB 5,4,4,4,4,4,4,4,4,3,4,4,4,5,4,4
 55632 DEFB 4,5,4,4,5,4,5,5,5,5,5,2,3,2,5,5
 55648 DEFB 4,4,4,4,4,4,4,4,4,1,3,4,1,5,4,4
 55664 DEFB 4,4,4,4,3,4,3,5,5,4,4,3,1,3,4,5

; 'ERIC'
;
; Used by the routines at #R28882, #R30208 and #R45544.
@label=M_ERIC
t55680 DEFM "ERIC"
 55684 DEFB 0 ; End marker
 55685 DEFS 9

; 'BOY WANDER'
;
; Used by the routines at #R28882, #R30208 and #R45544.
@label=M_BOYWANDER
t55694 DEFM "BOY WANDER"
 55704 DEFB 0 ; End marker
 55705 DEFS 3

; 'ANGELFACE'
;
; Used by the routines at #R28882, #R30208 and #R45544.
@label=M_ANGELFACE
t55708 DEFM "ANGELFACE"
 55717 DEFB 0 ; End marker
 55718 DEFS 4

; 'EINSTEIN'
;
; Used by the routines at #R28882, #R30208 and #R45544.
@label=M_EINSTEIN
t55722 DEFM "EINSTEIN"
 55730 DEFB 0 ; End marker
 55731 DEFS 5

; 'MR WACKER'
;
; Used by the routines at #R28882, #R31040 and #R45544.
@label=M_WACKER
t55736 DEFM "MR WACKER"
 55745 DEFB 0 ; End marker
 55746 DEFS 4

; 'MR ROCKITT'
;
; Used by the routines at #R28882, #R31040 and #R45544.
@label=M_ROCKITT
t55750 DEFM "MR ROCKITT"
 55760 DEFB 0 ; End marker
 55761 DEFS 3

; 'MR WITHIT'
;
; Used by the routines at #R28882, #R31040 and #R45544.
@label=M_WITHIT
t55764 DEFM "MR WITHIT"
 55773 DEFB 0 ; End marker
 55774 DEFS 4

; 'MR CREAK'
;
; Used by the routines at #R28882, #R31040 and #R45544.
@label=M_CREAK
t55778 DEFM "MR CREAK"
 55786 DEFB 0 ; End marker
 55787 DEFS 5

; 'Please Sir - I cannot tell a lie . . '
;
; Used by the routine at #R28882.
@label=M_PLEASESIR
t55792 DEFM "Please Sir - I cannot tell a lie . . "
 55829 DEFB 0 ; End marker

; '#SPACE8' (8 spaces)
;
; Used by the routine at #R29706, and as a suffix to several other messages.
@label=M_SPACE8
t55830 DEFM "        "
 55838 DEFB 0 ; End marker

; Unused
s55839 DEFB 0

; Font graphic data for CHR$(32-127) (pixel column 1)
;
; Used by the routines at #R28994 and #R30042.
b55840 DEFB 0,250,192,40,18,78,108,64,124,130,16,8,1,8,3,7
 55856 DEFB 124,66,70,130,56,242,124,128,108,98,54,49,8,20,34,64
 55872 DEFB 76,126,254,124,254,254,254,126,254,130,4,254,254,254,254,124
 55888 DEFB 254,124,254,98,128,252,224,252,198,192,134,255,192,129,32,1
 55904 DEFB 2,28,254,28,28,28,16,24,254,94,1,254,254,62,62,28
 55920 DEFB 63,24,62,18,16,60,56,56,34,56,38,24,255,129,8,124

; 'REVISION'
;
; Used in conjunction with 'LIBRARY' (at #R56016) by the routine at #R31040.
@label=M_REVISION
t55936 DEFM "REVISION"
 55944 DEFB 0 ; End marker

; ' ' (single space)
;
; Used by the routine at #R31040.
@label=M_SPACE_2
t55945 DEFM " "
 55946 DEFB 0 ; End marker

; Unused
s55947 DEFS 5

; 'READING ROOM'
;
; Used by the routine at #R31040.
@label=M_READINGRM
t55952 DEFM "READING ROOM"
 55964 DEFB 0 ; End marker
 55965 DEFS 3

; 'MAP ROOM'
;
; Used by the routine at #R31040.
@label=M_MAPROOM
t55968 DEFM "MAP ROOM"
 55976 DEFB 0 ; End marker
 55977 DEFS 7

; 'WHITE ROOM'
;
; Used by the routine at #R31040.
@label=M_WHITEROOM
t55984 DEFM "WHITE ROOM"
 55994 DEFB 0 ; End marker
 55995 DEFS 5

; 'EXAM ROOM'
;
; Used by the routine at #R31040.
@label=M_EXAMROOM
t56000 DEFM "EXAM ROOM"
 56009 DEFB 0 ; End marker
 56010 DEFS 6

; 'LIBRARY'
;
; Used in conjunction with 'REVISION' (at #R55936) by the routine at #R31040.
@label=M_LIBRARY
t56016 DEFM "LIBRARY"
 56023 DEFB 0 ; End marker
 56024 DEFS 8

; 'DINNER'
;
; Used by the routine at #R31040.
@label=M_DINNER
t56032 DEFM "DINNER"
 56038 DEFB 0 ; End marker
 56039 DEFS 9

; 'PLAYTIME'
;
; Used by the routine at #R31040.
@label=M_PLAYTIME
t56048 DEFM "PLAYTIME"
 56056 DEFB 0 ; End marker
 56057 DEFS 7

; Initial animatory states of the characters
;
; Used by the routine at #R26880.
@label=INITIALAS
b56064 DEFB 64  ; #AS64=little boy (facing left)
 56065 DEFB 192 ; #AS192=little boy (facing right)
 56066 DEFB 64  ; #AS64=little boy (facing left)
 56067 DEFB 192 ; #AS192=little boy (facing right)
 56068 DEFB 64  ; #AS64=little boy (facing left)
 56069 DEFB 192 ; #AS192=little boy (facing right)
 56070 DEFB 64  ; #AS64=little boy (facing left)
 56071 DEFB 192 ; #AS192=little boy (facing right)
 56072 DEFB 64  ; #AS64=little boy (facing left)
 56073 DEFB 192 ; #AS192=little boy (facing right)
 56074 DEFB 64  ; #AS64=little boy (facing left)
 56075 DEFB 80  ; #AS80=MR WACKER
 56076 DEFB 88  ; #AS88=MR ROCKITT
 56077 DEFB 96  ; #AS96=MR WITHIT
 56078 DEFB 72  ; #AS72=MR CREAK
 56079 DEFB 48  ; #AS48=BOY WANDER
 56080 DEFB 32  ; #AS32=ANGELFACE
 56081 DEFB 16  ; #AS16=EINSTEIN
 56082 DEFB 127 ; #AS127=catapult pellet (BOY WANDER's)
 56083 DEFB 127 ; #AS127=catapult pellet (ERIC's)
 56084 DEFB 0   ; #AS0=ERIC

; Unused
s56085 DEFS 11

; Font graphic data for CHR$(32-127) (pixel column 2)
;
@ignoreua
; Used by the routines at #R28994 and #R30042. The following addresses are
; unused, because the corresponding font character bitmaps are less than 2
; pixels wide:
; .
; #TABLE(default,centre,centre)
; { =h ASCII code | =h Address }
; { #b33 [!]      | #w56097 }
; { #b105 [i]     | #w56169 }
; { #b108 [l]     | #w56172 }
; { #b124 [|]     | #w56188 }
; TABLE#
b56096 DEFB 0,0,0,254,42,16,146,128,130,124,124,8,2,8,3,56
 56112 DEFB 138,254,138,146,72,146,146,134,146,146,54,50,20,20,20,138
 56128 DEFB 82,144,146,130,130,146,144,130,16,254,2,16,2,64,96,130
 56144 DEFB 144,130,144,146,128,2,28,2,40,32,138,129,56,255,64,1
 56160 DEFB 126,34,34,34,34,42,126,37,32,0,1,16,0,32,16,34
 56176 DEFB 36,36,16,42,126,2,6,6,20,5,42,102,0,102,16,146

; 'DON'T SIT ON THE STAIRS'
;
; Used by the routine at #R30156.
@label=M_LINES0
t56192 DEFM "DON'T SIT ON"
 56204 DEFB 0 ; End marker
 56205 DEFS 3
 56208 DEFM "THE STAIRS"
 56218 DEFB 0 ; End marker
 56219 DEFS 5

; 'THE ROOM IS PRIVATE'
;
; Used by the routine at #R30156.
@label=M_LINES1
t56224 DEFM "THE ROOM IS"
 56235 DEFB 0 ; End marker
 56236 DEFS 4
 56240 DEFM "PRIVATE"
 56247 DEFB 0 ; End marker
 56248 DEFS 8

; 'GET TO WHERE YOU SHOULD BE'
;
; Used by the routine at #R30156.
@label=M_LINES2
t56256 DEFM "GET TO WHERE"
 56268 DEFB 0 ; End marker
 56269 DEFS 3
 56272 DEFM "YOU SHOULD BE"
 56285 DEFB 0 ; End marker
 56286 DEFS 2

; 'NOW FIND A SEAT'
;
; Used by the routine at #R30156.
@label=M_LINES3
t56288 DEFM "NOW FIND"
 56296 DEFB 0 ; End marker
 56297 DEFS 7
 56304 DEFM "A SEAT"
 56310 DEFB 0 ; End marker
 56311 DEFS 9

; Initial x-coordinates of the characters
;
; Used by the routine at #R26880.
@label=INITIALX
b56320 DEFB 43  ; {The 11 little boys stand one next to another at
 56321 DEFB 44  ; x-coordinates 43-53
 56322 DEFB 45  ;
 56323 DEFB 46  ;
 56324 DEFB 47  ;
 56325 DEFB 48  ;
 56326 DEFB 49  ;
 56327 DEFB 50  ;
 56328 DEFB 51  ;
 56329 DEFB 52  ;
 56330 DEFB 53  ; }
 56331 DEFB 10  ; {MR WACKER, MR ROCKITT, MR WITHIT and MR CREAK all stand at
 56332 DEFB 10  ; x-coordinate 10
 56333 DEFB 10  ;
 56334 DEFB 10  ; }
 56335 DEFB 25  ; BOY WANDER is on his own at x-coordinate 25
 56336 DEFB 70  ; {ANGELFACE and EINSTEIN stand one behind the other at
 56337 DEFB 70  ; x-coordinate 70}
 56338 DEFB 160 ; {BOY WANDER's and ERIC's catapult pellets begin life
 56339 DEFB 160 ; off-screen at x-coordinate 160}
 56340 DEFB 48  ; ERIC stands in the middle of the crowd of little boys at
                ; x-coordinate 48

; Unused
s56341 DEFS 11

; Font graphic data for CHR$(32-127) (pixel column 3)
;
@ignoreua
; Used by the routines at #R28994 and #R30042. The following addresses are
; unused, because the corresponding font character bitmaps are less than 3
; pixels wide:
; .
; #TABLE(default,centre,centre)
; { =h ASCII code(s) | =h Address(es) }
; { #b33 [!]         | #w56353 }
; { #b39-#b41 ['()]  | #w56359-#w56361 }
; { #b44 [,]         | #w56364 }
; { #b46 [.]         | #w56366 }
; { #b58-#b59 [:;]   | #w56378-#w56379 }
; { #b91 [[]         | #w56411 }
; { #b93 []]         | #w56413 }
; { #b105 [i]        | #w56425 }
; { #b108 [l]        | #w56428 }
; { #b124 [|]        | #w56444 }
; TABLE#
b56352 DEFB 0,0,192,40,127,228,146,0,0,0,56,62,0,8,0,192
 56368 DEFB 146,2,146,178,254,146,146,152,146,146,0,0,20,20,20,144
 56384 DEFB 94,144,146,130,130,146,144,138,16,130,2,40,2,48,24,130
 56400 DEFB 144,134,152,146,254,2,2,28,16,30,146,0,3,0,191,1
 56416 DEFB 146,34,34,34,34,42,144,37,32,0,94,40,0,30,32,34
 56432 DEFB 36,36,32,42,16,2,56,56,8,5,50,129,0,24,8,170

; 'GET OFF THE FLOOR'
;
; Used by the routine at #R30156.
@label=M_LINES4
t56448 DEFM "GET OFF"
 56455 DEFB 0 ; End marker
 56456 DEFS 8
 56464 DEFM "THE FLOOR"
 56473 DEFB 0 ; End marker
 56474 DEFS 6

; 'COME ALONG WITH ME BOY'
;
; Used by the routine at #R30156.
@label=M_LINES5
t56480 DEFM "COME ALONG"
 56490 DEFB 0 ; End marker
 56491 DEFS 5
 56496 DEFM "WITH ME BOY"
 56507 DEFB 0 ; End marker
 56508 DEFS 4

; 'HURRY UP YOU HORROR'
;
; Used by the routine at #R30156.
@label=M_LINES6
t56512 DEFM "HURRY UP YOU"
 56524 DEFB 0 ; End marker
 56525 DEFS 3
 56528 DEFM "HORROR"
 56534 DEFB 0 ; End marker
 56535 DEFS 9

; 'DON'T TRY MY PATIENCE BOY'
;
; Used by the routine at #R30156.
@label=M_LINES7
t56544 DEFM "DON'T TRY MY"
 56556 DEFB 0 ; End marker
 56557 DEFS 3
 56560 DEFM "PATIENCE BOY"
 56572 DEFB 0 ; End marker
 56573 DEFS 3

; Initial byte #b122 of the character buffers
;
; Used by the routine at #R26880. See the #LINK:CharacterBuffers(character
; buffer documentation) for descriptions of the individual bits in byte #b122.
@label=INITIAL122
b56576 DEFB 0   ; {Initial value of byte #b122 for the little boys
 56577 DEFB 0   ;
 56578 DEFB 0   ;
 56579 DEFB 0   ;
 56580 DEFB 0   ;
 56581 DEFB 0   ;
 56582 DEFB 0   ;
 56583 DEFB 0   ;
 56584 DEFB 0   ;
 56585 DEFB 0   ;
 56586 DEFB 0   ; }
@bfix=DEFB 144
 56587 DEFB 16  ; {MR WACKER, MR ROCKITT, MR WITHIT and MR CREAK have bit 4 set
@bfix=DEFB 144  ; to indicate that they are teachers, and bit 7 set to make
 56588 DEFB 16  ; to indicate that they are teachers; note that bit 7 is reset,
@bfix=DEFB 144  ; them walk instead of run
 56589 DEFB 16  ; making them run at the start of the game (which is a
@bfix=DEFB 144  ; }
 56590 DEFB 16  ; #BUG#runningTeachers(bug))}
 56591 DEFB 0   ; {Initial value of byte #b122 for BOY WANDER, ANGELFACE and
 56592 DEFB 0   ; EINSTEIN
 56593 DEFB 0   ; }
 56594 DEFB 32  ; {BOY WANDER's and ERIC's catapult pellets have bit 5 set,
 56595 DEFB 32  ; making them fly at top speed always}
 56596 DEFB 255 ; End marker

; Unused
s56597 DEFS 11

; Font graphic data for CHR$(32-127) (pixel column 4)
;
@ignoreua
; Used by the routines at #R28994 and #R30042. The following addresses are
; unused, because the corresponding font character bitmaps are less than 4
; pixels wide:
; .
; #TABLE(default,centre,centre)
; { =h ASCII code(s)  | =h Address(es) }
; { #b32-#b34 [ !"]   | #w56608-#w56610 }
; { #b37 [%]          | #w56613 }
; { #b39-#b41 ['()]   | #w56615-#w56617 }
; { #b44 [,]          | #w56620 }
; { #b46-#b47 [./]    | #w56622-#w56623 }
; { #b49 [1]          | #w56625 }
; { #b58-#b59 [:;]    | #w56634-#w56635 }
; { #b73 [I]          | #w56649 }
; { #b91-#b93 [[\]]   | #w56667-#w56669 }
; { #b105-#b106 [ij]  | #w56681-#w56682 }
; { #b108 [l]         | #w56684 }
; { #b116 [t]         | #w56692 }
; { #b118 [v]         | #w56694 }
; { #b123-#b125 [{|}] | #w56699-#w56701 }
; TABLE#
b56608 DEFB 0,0,0,254,42,0,109,0,0,0,124,8,0,8,0,0
 56624 DEFB 124,0,98,204,8,140,140,224,108,124,0,0,34,20,8,96
 56640 DEFB 66,126,108,130,124,130,128,78,254,0,252,198,2,64,254,124
 56656 DEFB 96,124,102,140,128,252,28,2,40,32,162,0,0,0,64,1
 56672 DEFB 130,62,28,34,254,24,64,62,30,0,0,6,0,32,30,28
 56688 DEFB 24,63,16,36,0,62,0,6,20,62,34,0,0,0,16,130

; 'NOW DON'T DO IT AGAIN'
;
; Used by the routine at #R30156.
@label=M_LINES8
t56704 DEFM "NOW DON'T"
 56713 DEFB 0 ; End marker
 56714 DEFS 6
 56720 DEFM "DO IT AGAIN"
 56731 DEFB 0 ; End marker
 56732 DEFS 4

; 'DON'T TELL TALES'
;
; Used by the routine at #R30156.
@label=M_LINES9
t56736 DEFM "DON'T TELL"
 56746 DEFB 0 ; End marker
 56747 DEFS 5
 56752 DEFM "TALES"
 56757 DEFB 0 ; End marker
 56758 DEFS 10

; 'NEVER BE LATE AGAIN'
;
; Used by the routine at #R30156.
@label=M_LINES10
t56768 DEFM "NEVER BE"
 56776 DEFB 0 ; End marker
 56777 DEFS 7
 56784 DEFM "LATE AGAIN"
 56794 DEFB 0 ; End marker
 56795 DEFS 5

; 'AND STAY THIS TIME'
;
; Used by the routine at #R30156.
@label=M_LINES11
t56800 DEFM "AND STAY"
 56808 DEFB 0 ; End marker
 56809 DEFS 7
 56816 DEFM "THIS TIME"
 56825 DEFB 0 ; End marker
 56826 DEFS 6

; 'TAKE 2000 LINES YOU NASTY BOY{8 spaces}'
;
; Used by the routine at #R63456.
@label=M_LINES2K
t56832 DEFM "TAKE 2000 LINES YOU NASTY BOY"
 56861 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; Unused
s56862 DEFS 2

; Font graphic data for CHR$(32-127) (pixel column 5)
;
@ignoreua
; Used by the routines at #R28994 and #R30042. The following addresses are
; unused, because the corresponding font character bitmaps are less than 5
; pixels wide:
; .
; #TABLE(default,centre,centre)
; { =h ASCII code(s)                 | =h Address(es) }
; { #b32-#b34 [ !"]                  | #w56864-#w56866 }
; { #b37 [%]                         | #w56869 }
; { #b39-#b41 ['()]                  | #w56871-#w56873 }
; { #b44-#b63 [,-./0123456789:;<=>?] | #w56876-#w56895 }
; { #b65-#b76 [ABCDEFGHIJKL]         | #w56897-#w56908 }
; { #b78-#b80 [NOP]                  | #w56910-#w56912 }
; { #b82-#b83 [RS]                   | #w56914-#w56915 }
; { #b85 [U]                         | #w56917 }
; { #b91-#b93 [[\]]                  | #w56923-#w56925 }
; { #b96-#b108 [`abcdefghijkl]       | #w56928-#w56940 }
; { #b110-#b118 [nopqrstuv]          | #w56942-#w56950 }
; { #b121-#b126 [yz{|}~]             | #w56953-#w56958 }
; TABLE#
b56864 DEFB 0,0,0,40,36,0,2,0,0,0,16,8,0,0,0,0
 56880 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 56896 DEFB 60,0,0,0,0,0,0,0,0,0,0,0,0,254,0,0
 56912 DEFB 0,2,0,0,128,0,224,252,198,192,194,0,0,0,32,1
 56928 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0
 56944 DEFB 0,0,0,0,0,0,0,56,34,0,0,0,0,0,0,124

; 'DON'T TOUCH BLACKBOARDS'
;
; Used by the routine at #R30156.
@label=M_LINES12
t56960 DEFM "DON'T TOUCH"
 56971 DEFB 0 ; End marker
 56972 DEFS 4
 56976 DEFM "BLACKBOARDS"
 56987 DEFB 0 ; End marker
 56988 DEFS 4

; 'CATAPULTS ARE FORBIDDEN'
;
; Used by the routine at #R30156.
@label=M_LINES13
t56992 DEFM "CATAPULTS"
 57001 DEFB 0 ; End marker
 57002 DEFS 6
 57008 DEFM "ARE FORBIDDEN"
 57021 DEFB 0 ; End marker
 57022 DEFS 2

; 'DON'T HIT YOUR MATES'
;
; Used by the routine at #R30156.
@label=M_LINES14
t57024 DEFM "DON'T HIT"
 57033 DEFB 0 ; End marker
 57034 DEFS 6
 57040 DEFM "YOUR MATES"
 57050 DEFB 0 ; End marker
 57051 DEFS 5

; 'YOU ARE NOT A KANGAROO'
;
; Used by the routine at #R30156.
@label=M_LINES15
t57056 DEFM "YOU ARE NOT"
 57067 DEFB 0 ; End marker
 57068 DEFS 4
 57072 DEFM "A KANGAROO"
 57082 DEFB 0 ; End marker
 57083 DEFS 5

; 'Sn'
;
; Question/answer word no. #b128 for MR ROCKITT. The corresponding
; question/answer word (no. #b129) is located at #R57100. Used by the routine
; at #R31282.
@label=M_SYMBOL00
t57088 DEFM "Sn"
 57090 DEFB 0 ; End marker
 57091 DEFM "Ug Ug"
 57096 DEFS 4

; 'Tin'
;
; Question/answer word no. #b129 for MR ROCKITT. The corresponding
; question/answer word (no. #b128) is located at #R57088. Used by the routine
; at #R31282.
@label=M_ELEMENT00
t57100 DEFM "Tin"
 57103 DEFB 0 ; End marker
 57104 DEFS 8

; 'Hg'
;
; Question/answer word no. #b130 for MR ROCKITT. The corresponding
; question/answer word (no. #b131) is located at #R57124. Used by the routine
; at #R31282.
@label=M_SYMBOL01
t57112 DEFM "Hg"
 57114 DEFB 0 ; End marker
 57115 DEFS 9

; 'Mercury'
;
; Question/answer word no. #b131 for MR ROCKITT. The corresponding
; question/answer word (no. #b130) is located at #R57112. Used by the routine
; at #R31282.
@label=M_ELEMENT01
t57124 DEFM "Mercury"
 57131 DEFB 0 ; End marker
 57132 DEFS 4

; 'Au'
;
; Question/answer word no. #b132 for MR ROCKITT. The corresponding
; question/answer word (no. #b133) is located at #R57148. Used by the routine
; at #R31282.
@label=M_SYMBOL02
t57136 DEFM "Au"
 57138 DEFB 0 ; End marker
 57139 DEFS 9

; 'Gold'
;
; Question/answer word no. #b133 for MR ROCKITT. The corresponding
; question/answer word (no. #b132) is located at #R57136. Used by the routine
; at #R31282.
@label=M_ELEMENT02
t57148 DEFM "Gold"
 57152 DEFB 0 ; End marker
 57153 DEFS 7

; 'Ag'
;
; Question/answer word no. #b134 for MR ROCKITT. The corresponding
; question/answer word (no. #b135) is located at #R57172. Used by the routine
; at #R31282.
@label=M_SYMBOL03
t57160 DEFM "Ag"
 57162 DEFB 0 ; End marker
 57163 DEFS 9

; 'Silver'
;
; Question/answer word no. #b135 for MR ROCKITT. The corresponding
; question/answer word (no. #b134) is located at #R57160. Used by the routine
; at #R31282.
@label=M_ELEMENT03
t57172 DEFM "Silver"
 57178 DEFB 0 ; End marker
 57179 DEFS 5

; 'Pt'
;
; Question/answer word no. #b136 for MR ROCKITT. The corresponding
; question/answer word (no. #b137) is located at #R57196. Used by the routine
; at #R31282.
@label=M_SYMBOL04
t57184 DEFM "Pt"
 57186 DEFB 0 ; End marker
 57187 DEFS 9

; 'Platinum'
;
; Question/answer word no. #b137 for MR ROCKITT. The corresponding
; question/answer word (no. #b136) is located at #R57184. Used by the routine
; at #R31282.
@label=M_ELEMENT04
t57196 DEFM "Platinum"
 57204 DEFB 0 ; End marker
 57205 DEFS 3

; 'Cu'
;
; Question/answer word no. #b138 for MR ROCKITT. The corresponding
; question/answer word (no. #b139) is located at #R57220. Used by the routine
; at #R31282.
@label=M_SYMBOL05
t57208 DEFM "Cu"
 57210 DEFB 0 ; End marker
 57211 DEFS 9

; 'Copper'
;
; Question/answer word no. #b139 for MR ROCKITT. The corresponding
; question/answer word (no. #b138) is located at #R57208. Used by the routine
; at #R31282.
@label=M_ELEMENT05
t57220 DEFM "Copper"
 57226 DEFB 0 ; End marker
 57227 DEFS 5

; 'Mg'
;
; Question/answer word no. #b140 for MR ROCKITT. The corresponding
; question/answer word (no. #b141) is located at #R57244. Used by the routine
; at #R31282.
@label=M_SYMBOL06
t57232 DEFM "Mg"
 57234 DEFB 0 ; End marker
 57235 DEFS 9

; 'Magnesium'
;
; Question/answer word no. #b141 for MR ROCKITT. The corresponding
; question/answer word (no. #b140) is located at #R57232. Used by the routine
; at #R31282.
@label=M_ELEMENT06
t57244 DEFM "Magnesium"
 57253 DEFB 0 ; End marker
 57254 DEFS 2

; 'Pb'
;
; Question/answer word no. #b142 for MR ROCKITT. The corresponding
; question/answer word (no. #b143) is located at #R57268. Used by the routine
; at #R31282.
@label=M_SYMBOL07
t57256 DEFM "Pb"
 57258 DEFB 0 ; End marker
 57259 DEFS 9

; 'Lead'
;
; Question/answer word no. #b143 for MR ROCKITT. The corresponding
; question/answer word (no. #b142) is located at #R57256. Used by the routine
; at #R31282.
@label=M_ELEMENT07
t57268 DEFM "Lead"
 57272 DEFB 0 ; End marker
 57273 DEFS 7

; 'Mn'
;
; Question/answer word no. #b144 for MR ROCKITT. The corresponding
; question/answer word (no. #b145) is located at #R57292. Used by the routine
; at #R31282.
@label=M_SYMBOL08
t57280 DEFM "Mn"
 57282 DEFB 0 ; End marker
 57283 DEFS 9

; 'Manganese'
;
; Question/answer word no. #b145 for MR ROCKITT. The corresponding
; question/answer word (no. #b144) is located at #R57280. Used by the routine
; at #R31282.
@label=M_ELEMENT08
t57292 DEFM "Manganese"
 57301 DEFB 0 ; End marker
 57302 DEFS 2

; 'Sb'
;
; Question/answer word no. #b146 for MR ROCKITT. The corresponding
; question/answer word (no. #b147) is located at #R57316. Used by the routine
; at #R31282.
@label=M_SYMBOL09
t57304 DEFM "Sb"
 57306 DEFB 0 ; End marker
 57307 DEFS 9

; 'Antimony'
;
; Question/answer word no. #b147 for MR ROCKITT. The corresponding
; question/answer word (no. #b146) is located at #R57304. Used by the routine
; at #R31282.
@label=M_ELEMENT09
t57316 DEFM "Antimony"
 57324 DEFB 0 ; End marker
 57325 DEFS 3

; 'As'
;
; Question/answer word no. #b148 for MR ROCKITT. The corresponding
; question/answer word (no. #b149) is located at #R57340. Used by the routine
; at #R31282.
@label=M_SYMBOL10
t57328 DEFM "As"
 57330 DEFB 0 ; End marker
 57331 DEFS 9

; 'Arsenic'
;
; Question/answer word no. #b149 for MR ROCKITT. The corresponding
; question/answer word (no. #b148) is located at #R57328. Used by the routine
; at #R31282.
@label=M_ELEMENT10
t57340 DEFM "Arsenic"
 57347 DEFB 0 ; End marker
 57348 DEFS 4

; 'K'
;
; Question/answer word no. #b150 for MR ROCKITT. The corresponding
; question/answer word (no. #b151) is located at #R57364. Used by the routine
; at #R31282.
@label=M_SYMBOL11
t57352 DEFM "K"
 57353 DEFB 0 ; End marker
 57354 DEFS 10

; 'Potassium'
;
; Question/answer word no. #b151 for MR ROCKITT. The corresponding
; question/answer word (no. #b150) is located at #R57352. Used by the routine
; at #R31282.
@label=M_ELEMENT11
t57364 DEFM "Potassium"
 57373 DEFB 0 ; End marker
 57374 DEFS 2

; 'Na'
;
; Question/answer word no. #b152 for MR ROCKITT. The corresponding
; question/answer word (no. #b153) is located at #R57388. Used by the routine
; at #R31282.
@label=M_SYMBOL12
t57376 DEFM "Na"
 57378 DEFB 0 ; End marker
 57379 DEFS 9

; 'Sodium'
;
; Question/answer word no. #b153 for MR ROCKITT. The corresponding
; question/answer word (no. #b152) is located at #R57376. Used by the routine
; at #R31282.
@label=M_ELEMENT12
t57388 DEFM "Sodium"
 57394 DEFB 0 ; End marker
 57395 DEFS 5

; 'Cl'
;
; Question/answer word no. #b154 for MR ROCKITT. The corresponding
; question/answer word (no. #b155) is located at #R57412. Used by the routine
; at #R31282.
@label=M_SYMBOL13
t57400 DEFM "Cl"
 57402 DEFB 0 ; End marker
 57403 DEFS 9

; 'Chlorine'
;
; Question/answer word no. #b155 for MR ROCKITT. The corresponding
; question/answer word (no. #b154) is located at #R57400. Used by the routine
; at #R31282.
@label=M_ELEMENT13
t57412 DEFM "Chlorine"
 57420 DEFB 0 ; End marker
 57421 DEFS 3

; 'Zn'
;
; Question/answer word no. #b156 for MR ROCKITT. The corresponding
; question/answer word (no. #b157) is located at #R57436. Used by the routine
; at #R31282.
@label=M_SYMBOL14
t57424 DEFM "Zn"
 57426 DEFB 0 ; End marker
 57427 DEFS 9

; 'Zinc'
;
; Question/answer word no. #b157 for MR ROCKITT. The corresponding
; question/answer word (no. #b156) is located at #R57424. Used by the routine
; at #R31282.
@label=M_ELEMENT14
t57436 DEFM "Zinc"
 57440 DEFB 0 ; End marker
 57441 DEFS 7

; 'W'
;
; Question/answer word no. #b158 for MR ROCKITT. The corresponding
; question/answer word (no. #b159) is located at #R57460. Used by the routine
; at #R31282.
@label=M_SYMBOL15
t57448 DEFM "W"
 57449 DEFB 0 ; End marker
 57450 DEFS 10

; 'Tungsten'
;
; Question/answer word no. #b159 for MR ROCKITT. The corresponding
; question/answer word (no. #b158) is located at #R57448. Used by the routine
; at #R31282.
@label=M_ELEMENT15
t57460 DEFM "Tungsten"
 57468 DEFB 0 ; End marker
 57469 DEFS 3

; 'Cs'
;
; Question/answer word no. #b160 for MR ROCKITT. The corresponding
; question/answer word (no. #b161) is located at #R57484. Used by the routine
; at #R31282.
@label=M_SYMBOL16
t57472 DEFM "Cs"
 57474 DEFB 0 ; End marker
 57475 DEFS 9

; 'Caesium'
;
; Question/answer word no. #b161 for MR ROCKITT. The corresponding
; question/answer word (no. #b160) is located at #R57472. Used by the routine
; at #R31282.
@label=M_ELEMENT16
t57484 DEFM "Caesium"
 57491 DEFB 0 ; End marker
 57492 DEFS 4

; 'Si'
;
; Question/answer word no. #b162 for MR ROCKITT. The corresponding
; question/answer word (no. #b163) is located at #R57508. Used by the routine
; at #R31282.
@label=M_SYMBOL17
t57496 DEFM "Si"
 57498 DEFB 0 ; End marker
 57499 DEFS 9

; 'Silicon'
;
; Question/answer word no. #b163 for MR ROCKITT. The corresponding
; question/answer word (no. #b162) is located at #R57496. Used by the routine
; at #R31282.
@label=M_ELEMENT17
t57508 DEFM "Silicon"
 57515 DEFB 0 ; End marker
 57516 DEFS 4

; 'P'
;
; Question/answer word no. #b164 for MR ROCKITT. The corresponding
; question/answer word (no. #b165) is located at #R57532. Used by the routine
; at #R31282.
@label=M_SYMBOL18
t57520 DEFM "P"
 57521 DEFB 0 ; End marker
 57522 DEFS 10

; 'Phosphorous'
;
; Question/answer word no. #b165 for MR ROCKITT. The corresponding
; question/answer word (no. #b164) is located at #R57520. Used by the routine
; at #R31282.
@label=M_ELEMENT18
@bfix=DEFM "Phosphorus"
@bfix=DEFB 0  ; End marker
@bfix=DEFB 0
t57532 DEFM "Phosphorous"
 57543 DEFB 0 ; End marker

; 'Br'
;
; Question/answer word no. #b166 for MR ROCKITT. The corresponding
; question/answer word (no. #b167) is located at #R57556. Used by the routine
; at #R31282.
@label=M_SYMBOL19
t57544 DEFM "Br"
 57546 DEFB 0 ; End marker
 57547 DEFS 9

; 'Bromine'
;
; Question/answer word no. #b167 for MR ROCKITT. The corresponding
; question/answer word (no. #b166) is located at #R57544. Used by the routine
; at #R31282.
@label=M_ELEMENT19
t57556 DEFM "Bromine"
 57563 DEFB 0 ; End marker
 57564 DEFS 4

; 'H'
;
; Question/answer word no. #b168 for MR ROCKITT. The corresponding
; question/answer word (no. #b169) is located at #R57580. Used by the routine
; at #R31282.
@label=M_SYMBOL20
t57568 DEFM "H"
 57569 DEFB 0 ; End marker
 57570 DEFS 10

; 'Hydrogen'
;
; Question/answer word no. #b169 for MR ROCKITT. The corresponding
; question/answer word (no. #b168) is located at #R57568. Used by the routine
; at #R31282.
@label=M_ELEMENT20
t57580 DEFM "Hydrogen"
 57588 DEFB 0 ; End marker
 57589 DEFS 3

; 'Berne'
;
; Question/answer word no. #b170 for MR WITHIT. The corresponding
; question/answer word (no. #b171) is located at #R57604. Used by the routine
; at #R31282.
@label=M_CAPITAL00
t57592 DEFM "Berne"
 57597 DEFB 0 ; End marker
 57598 DEFS 6

; 'Switzerland'
;
; Question/answer word no. #b171 for MR WITHIT. The corresponding
; question/answer word (no. #b170) is located at #R57592. Used by the routine
; at #R31282.
@label=M_COUNTRY00
t57604 DEFM "Switzerland"
 57615 DEFB 0 ; End marker

; 'Helsinki'
;
; Question/answer word no. #b172 for MR WITHIT. The corresponding
; question/answer word (no. #b173) is located at #R57628. Used by the routine
; at #R31282.
@label=M_CAPITAL01
t57616 DEFM "Helsinki"
 57624 DEFB 0 ; End marker
 57625 DEFS 3

; 'Finland'
;
; Question/answer word no. #b173 for MR WITHIT. The corresponding
; question/answer word (no. #b172) is located at #R57616. Used by the routine
; at #R31282.
@label=M_COUNTRY01
t57628 DEFM "Finland"
 57635 DEFB 0 ; End marker
 57636 DEFS 4

; 'Reykjavik'
;
; Question/answer word no. #b174 for MR WITHIT. The corresponding
; question/answer word (no. #b175) is located at #R57652. Used by the routine
; at #R31282.
@label=M_CAPITAL02
t57640 DEFM "Reykjavik"
 57649 DEFB 0 ; End marker
 57650 DEFS 2

; 'Iceland'
;
; Question/answer word no. #b175 for MR WITHIT. The corresponding
; question/answer word (no. #b174) is located at #R57640. Used by the routine
; at #R31282.
@label=M_COUNTRY02
t57652 DEFM "Iceland"
 57659 DEFB 0 ; End marker
 57660 DEFS 4

; 'Budapest'
;
; Question/answer word no. #b176 for MR WITHIT. The corresponding
; question/answer word (no. #b177) is located at #R57676. Used by the routine
; at #R31282.
@label=M_CAPITAL03
t57664 DEFM "Budapest"
 57672 DEFB 0 ; End marker
 57673 DEFS 3

; 'Hungary'
;
; Question/answer word no. #b177 for MR WITHIT. The corresponding
; question/answer word (no. #b176) is located at #R57664. Used by the routine
; at #R31282.
@label=M_COUNTRY03
t57676 DEFM "Hungary"
 57683 DEFB 0 ; End marker
 57684 DEFS 4

; 'Bucharest'
;
; Question/answer word no. #b178 for MR WITHIT. The corresponding
; question/answer word (no. #b179) is located at #R57700. Used by the routine
; at #R31282.
@label=M_CAPITAL04
t57688 DEFM "Bucharest"
 57697 DEFB 0 ; End marker
 57698 DEFS 2

; 'Romania'
;
; Question/answer word no. #b179 for MR WITHIT. The corresponding
; question/answer word (no. #b178) is located at #R57688. Used by the routine
; at #R31282.
@label=M_COUNTRY04
t57700 DEFM "Romania"
 57707 DEFB 0 ; End marker
 57708 DEFS 4

; 'Tirana'
;
; Question/answer word no. #b180 for MR WITHIT. The corresponding
; question/answer word (no. #b181) is located at #R57724. Used by the routine
; at #R31282.
@label=M_CAPITAL05
t57712 DEFM "Tirana"
 57718 DEFB 0 ; End marker
 57719 DEFS 5

; 'Albania'
;
; Question/answer word no. #b181 for MR WITHIT. The corresponding
; question/answer word (no. #b180) is located at #R57712. Used by the routine
; at #R31282.
@label=M_COUNTRY05
t57724 DEFM "Albania"
 57731 DEFB 0 ; End marker
 57732 DEFS 4

; 'Jakarta'
;
; Question/answer word no. #b182 for MR WITHIT. The corresponding
; question/answer word (no. #b183) is located at #R57748. Used by the routine
; at #R31282.
@label=M_CAPITAL06
t57736 DEFM "Jakarta"
 57743 DEFB 0 ; End marker
 57744 DEFS 4

; 'Indonesia'
;
; Question/answer word no. #b183 for MR WITHIT. The corresponding
; question/answer word (no. #b182) is located at #R57736. Used by the routine
; at #R31282.
@label=M_COUNTRY06
t57748 DEFM "Indonesia"
 57757 DEFB 0 ; End marker
 57758 DEFS 2

; 'Pyongyang'
;
; Question/answer word no. #b184 for MR WITHIT. The corresponding
; question/answer word (no. #b185) is located at #R57772. Used by the routine
; at #R31282.
@label=M_CAPITAL07
t57760 DEFM "Pyongyang"
 57769 DEFB 0 ; End marker
 57770 DEFS 2

; 'North Korea'
;
; Question/answer word no. #b185 for MR WITHIT. The corresponding
; question/answer word (no. #b184) is located at #R57760. Used by the routine
; at #R31282.
@label=M_COUNTRY07
t57772 DEFM "North Korea"
 57783 DEFB 0 ; End marker

; 'Vientiane'
;
; Question/answer word no. #b186 for MR WITHIT. The corresponding
; question/answer word (no. #b187) is located at #R57796. Used by the routine
; at #R31282.
@label=M_CAPITAL08
t57784 DEFM "Vientiane"
 57793 DEFB 0 ; End marker
 57794 DEFS 2

; 'Laos'
;
; Question/answer word no. #b187 for MR WITHIT. The corresponding
; question/answer word (no. #b186) is located at #R57784. Used by the routine
; at #R31282.
@label=M_COUNTRY08
t57796 DEFM "Laos"
 57800 DEFB 0 ; End marker
 57801 DEFS 7

; 'Islamabad'
;
; Question/answer word no. #b188 for MR WITHIT. The corresponding
; question/answer word (no. #b189) is located at #R57820. Used by the routine
; at #R31282.
@label=M_CAPITAL09
t57808 DEFM "Islamabad"
 57817 DEFB 0 ; End marker
 57818 DEFS 2

; 'Pakistan'
;
; Question/answer word no. #b189 for MR WITHIT. The corresponding
; question/answer word (no. #b188) is located at #R57808. Used by the routine
; at #R31282.
@label=M_COUNTRY09
t57820 DEFM "Pakistan"
 57828 DEFB 0 ; End marker
 57829 DEFS 3

; 'Rangoon'
;
; Question/answer word no. #b190 for MR WITHIT. The corresponding
; question/answer word (no. #b191) is located at #R57844. Used by the routine
; at #R31282.
@label=M_CAPITAL10
t57832 DEFM "Rangoon"
 57839 DEFB 0 ; End marker
 57840 DEFS 4

; 'Burma'
;
; Question/answer word no. #b191 for MR WITHIT. The corresponding
; question/answer word (no. #b190) is located at #R57832. Used by the routine
; at #R31282.
@label=M_COUNTRY10
t57844 DEFM "Burma"
 57849 DEFB 0 ; End marker
 57850 DEFS 6

; 'Ankara'
;
; Question/answer word no. #b192 for MR WITHIT. The corresponding
; question/answer word (no. #b193) is located at #R57868. Used by the routine
; at #R31282.
@label=M_CAPITAL11
t57856 DEFM "Ankara"
 57862 DEFB 0 ; End marker
 57863 DEFS 5

; 'Turkey'
;
; Question/answer word no. #b193 for MR WITHIT. The corresponding
; question/answer word (no. #b192) is located at #R57856. Used by the routine
; at #R31282.
@label=M_COUNTRY11
t57868 DEFM "Turkey"
 57874 DEFB 0 ; End marker
 57875 DEFS 5

; 'Amman'
;
; Question/answer word no. #b194 for MR WITHIT. The corresponding
; question/answer word (no. #b195) is located at #R57892. Used by the routine
; at #R31282.
@label=M_CAPITAL12
t57880 DEFM "Amman"
 57885 DEFB 0 ; End marker
 57886 DEFS 6

; 'Jordan'
;
; Question/answer word no. #b195 for MR WITHIT. The corresponding
; question/answer word (no. #b194) is located at #R57880. Used by the routine
; at #R31282.
@label=M_COUNTRY12
t57892 DEFM "Jordan"
 57898 DEFB 0 ; End marker
 57899 DEFS 5

; 'Gabarone'
;
; Question/answer word no. #b196 for MR WITHIT. The corresponding
; question/answer word (no. #b197) is located at #R57916. Used by the routine
; at #R31282.
@label=M_CAPITAL13
t57904 DEFM "Gabarone"
 57912 DEFB 0 ; End marker
 57913 DEFS 3

; 'Botswana'
;
; Question/answer word no. #b197 for MR WITHIT. The corresponding
; question/answer word (no. #b196) is located at #R57904. Used by the routine
; at #R31282.
@label=M_COUNTRY13
t57916 DEFM "Botswana"
 57924 DEFB 0 ; End marker
 57925 DEFS 3

; 'Lusaka'
;
; Question/answer word no. #b198 for MR WITHIT. The corresponding
; question/answer word (no. #b199) is located at #R57940. Used by the routine
; at #R31282.
@label=M_CAPITAL14
t57928 DEFM "Lusaka"
 57934 DEFB 0 ; End marker
 57935 DEFS 5

; 'Zambia'
;
; Question/answer word no. #b199 for MR WITHIT. The corresponding
; question/answer word (no. #b198) is located at #R57928. Used by the routine
; at #R31282.
@label=M_COUNTRY14
t57940 DEFM "Zambia"
 57946 DEFB 0 ; End marker
 57947 DEFS 5

; 'Monrovia'
;
; Question/answer word no. #b200 for MR WITHIT. The corresponding
; question/answer word (no. #b201) is located at #R57964. Used by the routine
; at #R31282.
@label=M_CAPITAL15
t57952 DEFM "Monrovia"
 57960 DEFB 0 ; End marker
 57961 DEFS 3

; 'Liberia'
;
; Question/answer word no. #b201 for MR WITHIT. The corresponding
; question/answer word (no. #b200) is located at #R57952. Used by the routine
; at #R31282.
@label=M_COUNTRY15
t57964 DEFM "Liberia"
 57971 DEFB 0 ; End marker
 57972 DEFS 4

; 'La Paz'
;
; Question/answer word no. #b202 for MR WITHIT. The corresponding
; question/answer word (no. #b203) is located at #R57988. Used by the routine
; at #R31282.
@label=M_CAPITAL16
t57976 DEFM "La Paz"
 57982 DEFB 0 ; End marker
 57983 DEFS 5

; 'Bolivia'
;
; Question/answer word no. #b203 for MR WITHIT. The corresponding
; question/answer word (no. #b202) is located at #R57976. Used by the routine
; at #R31282.
@label=M_COUNTRY16
t57988 DEFM "Bolivia"
 57995 DEFB 0 ; End marker
 57996 DEFS 4

; 'Caracas'
;
; Question/answer word no. #b204 for MR WITHIT. The corresponding
; question/answer word (no. #b205) is located at #R58012. Used by the routine
; at #R31282.
@label=M_CAPITAL17
t58000 DEFM "Caracas"
 58007 DEFB 0 ; End marker
 58008 DEFS 4

; 'Venezuela'
;
; Question/answer word no. #b205 for MR WITHIT. The corresponding
; question/answer word (no. #b204) is located at #R58000. Used by the routine
; at #R31282.
@label=M_COUNTRY17
t58012 DEFM "Venezuela"
 58021 DEFB 0 ; End marker
 58022 DEFS 2

; 'Quito'
;
; Question/answer word no. #b206 for MR WITHIT. The corresponding
; question/answer word (no. #b207) is located at #R58036. Used by the routine
; at #R31282.
@label=M_CAPITAL18
t58024 DEFM "Quito"
 58029 DEFB 0 ; End marker
 58030 DEFS 6

; 'Ecuador'
;
; Question/answer word no. #b207 for MR WITHIT. The corresponding
; question/answer word (no. #b206) is located at #R58024. Used by the routine
; at #R31282.
@label=M_COUNTRY18
t58036 DEFM "Ecuador"
 58043 DEFB 0 ; End marker
 58044 DEFS 4

; 'Paramaribo'
;
; Question/answer word no. #b208 for MR WITHIT. The corresponding
; question/answer word (no. #b209) is located at #R58060. Used by the routine
; at #R31282.
@label=M_CAPITAL19
t58048 DEFM "Paramaribo"
 58058 DEFB 0 ; End marker
 58059 DEFB 0

; 'Surinam'
;
; Question/answer word no. #b209 for MR WITHIT. The corresponding
; question/answer word (no. #b208) is located at #R58048. Used by the routine
; at #R31282.
@label=M_COUNTRY19
t58060 DEFM "Surinam"
 58067 DEFB 0 ; End marker
 58068 DEFS 4

; 'Santiago'
;
; Question/answer word no. #b210 for MR WITHIT. The corresponding
; question/answer word (no. #b211) is located at #R58084. Used by the routine
; at #R31282.
@label=M_CAPITAL20
t58072 DEFM "Santiago"
 58080 DEFB 0 ; End marker
 58081 DEFS 3

; 'Chile'
;
; Question/answer word no. #b211 for MR WITHIT. The corresponding
; question/answer word (no. #b210) is located at #R58072. Used by the routine
; at #R31282.
@label=M_COUNTRY20
t58084 DEFM "Chile"
 58089 DEFB 0 ; End marker
 58090 DEFS 6

; '1066'
;
; Question/answer word no. #b212 for MR CREAK. The corresponding
; question/answer word (no. #b213) is located at #R58108. Used by the routine
; at #R31282.
@label=M_YEAR00
t58096 DEFM "1066"
 58100 DEFB 0 ; End marker
 58101 DEFS 7

; 'Hastings'
;
; Question/answer word no. #b213 for MR CREAK. The corresponding
; question/answer word (no. #b212) is located at #R58096. Used by the routine
; at #R31282.
@label=M_BATTLE00
t58108 DEFM "Hastings"
 58116 DEFB 0 ; End marker
 58117 DEFS 3

; '1265'
;
; Question/answer word no. #b214 for MR CREAK. The corresponding
; question/answer word (no. #b215) is located at #R58132. Used by the routine
; at #R31282.
@label=M_YEAR01
t58120 DEFM "1265"
 58124 DEFB 0 ; End marker
 58125 DEFS 7

; 'Evesham'
;
; Question/answer word no. #b215 for MR CREAK. The corresponding
; question/answer word (no. #b214) is located at #R58120. Used by the routine
; at #R31282.
@label=M_BATTLE01
t58132 DEFM "Evesham"
 58139 DEFB 0 ; End marker
 58140 DEFS 4

; '1314'
;
; Question/answer word no. #b216 for MR CREAK. The corresponding
; question/answer word (no. #b217) is located at #R58156. Used by the routine
; at #R31282.
@label=M_YEAR02
t58144 DEFM "1314"
 58148 DEFB 0 ; End marker
 58149 DEFS 7

; 'Bannockburn'
;
; Question/answer word no. #b217 for MR CREAK. The corresponding
; question/answer word (no. #b216) is located at #R58144. Used by the routine
; at #R31282.
@label=M_BATTLE02
t58156 DEFM "Bannockburn"
 58167 DEFB 0 ; End marker

; '1346'
;
; Question/answer word no. #b218 for MR CREAK. The corresponding
; question/answer word (no. #b219) is located at #R58180. Used by the routine
; at #R31282.
@label=M_YEAR03
t58168 DEFM "1346"
 58172 DEFB 0 ; End marker
 58173 DEFS 7

; 'Crecy'
;
; Question/answer word no. #b219 for MR CREAK. The corresponding
; question/answer word (no. #b218) is located at #R58168. Used by the routine
; at #R31282.
@label=M_BATTLE03
t58180 DEFM "Crecy"
 58185 DEFB 0 ; End marker
 58186 DEFS 6

; '1356'
;
; Question/answer word no. #b220 for MR CREAK. The corresponding
; question/answer word (no. #b221) is located at #R58204. Used by the routine
; at #R31282.
@label=M_YEAR04
t58192 DEFM "1356"
 58196 DEFB 0 ; End marker
 58197 DEFS 7

; 'Poitiers'
;
; Question/answer word no. #b221 for MR CREAK. The corresponding
; question/answer word (no. #b220) is located at #R58192. Used by the routine
; at #R31282.
@label=M_BATTLE04
t58204 DEFM "Poitiers"
 58212 DEFB 0 ; End marker
 58213 DEFS 3

; '1403'
;
; Question/answer word no. #b222 for MR CREAK. The corresponding
; question/answer word (no. #b223) is located at #R58228. Used by the routine
; at #R31282.
@label=M_YEAR05
t58216 DEFM "1403"
 58220 DEFB 0 ; End marker
 58221 DEFS 7

; 'Shrewsbury'
;
; Question/answer word no. #b223 for MR CREAK. The corresponding
; question/answer word (no. #b222) is located at #R58216. Used by the routine
; at #R31282.
@label=M_BATTLE05
t58228 DEFM "Shrewsbury"
 58238 DEFB 0 ; End marker
 58239 DEFB 0

; '1415'
;
; Question/answer word no. #b224 for MR CREAK. The corresponding
; question/answer word (no. #b225) is located at #R58252. Used by the routine
; at #R31282.
@label=M_YEAR06
t58240 DEFM "1415"
 58244 DEFB 0 ; End marker
 58245 DEFS 7

; 'Agincourt'
;
; Question/answer word no. #b225 for MR CREAK. The corresponding
; question/answer word (no. #b224) is located at #R58240. Used by the routine
; at #R31282.
@label=M_BATTLE06
t58252 DEFM "Agincourt"
 58261 DEFB 0 ; End marker
 58262 DEFS 2

; '1485'
;
; Question/answer word no. #b226 for MR CREAK. The corresponding
; question/answer word (no. #b227) is located at #R58276. Used by the routine
; at #R31282.
@label=M_YEAR07
t58264 DEFM "1485"
 58268 DEFB 0 ; End marker
 58269 DEFS 7

; 'Bosworth'
;
; Question/answer word no. #b227 for MR CREAK. The corresponding
; question/answer word (no. #b226) is located at #R58264. Used by the routine
; at #R31282.
@label=M_BATTLE07
t58276 DEFM "Bosworth"
 58284 DEFB 0 ; End marker
 58285 DEFS 3

; '1513'
;
; Question/answer word no. #b228 for MR CREAK. The corresponding
; question/answer word (no. #b229) is located at #R58300. Used by the routine
; at #R31282.
@label=M_YEAR08
t58288 DEFM "1513"
 58292 DEFB 0 ; End marker
 58293 DEFS 7

; 'Flodden'
;
; Question/answer word no. #b229 for MR CREAK. The corresponding
; question/answer word (no. #b228) is located at #R58288. Used by the routine
; at #R31282.
@label=M_BATTLE08
t58300 DEFM "Flodden"
 58307 DEFB 0 ; End marker
 58308 DEFS 4

; '1571'
;
; Question/answer word no. #b230 for MR CREAK. The corresponding
; question/answer word (no. #b231) is located at #R58324. Used by the routine
; at #R31282.
@label=M_YEAR09
t58312 DEFM "1571"
 58316 DEFB 0 ; End marker
 58317 DEFS 7

; 'Lepanto'
;
; Question/answer word no. #b231 for MR CREAK. The corresponding
; question/answer word (no. #b230) is located at #R58312. Used by the routine
; at #R31282.
@label=M_BATTLE09
t58324 DEFM "Lepanto"
 58331 DEFB 0 ; End marker
 58332 DEFS 4

; '1014'
;
; Question/answer word no. #b232 for MR CREAK. The corresponding
; question/answer word (no. #b233) is located at #R58348. Used by the routine
; at #R31282.
@label=M_YEAR10
t58336 DEFM "1014"
 58340 DEFB 0 ; End marker
 58341 DEFS 7

; 'Clontarf'
;
; Question/answer word no. #b233 for MR CREAK. The corresponding
; question/answer word (no. #b232) is located at #R58336. Used by the routine
; at #R31282.
@label=M_BATTLE10
t58348 DEFM "Clontarf"
 58356 DEFB 0 ; End marker
 58357 DEFM "oor"

; '1685'
;
; Question/answer word no. #b234 for MR CREAK. The corresponding
; question/answer word (no. #b235) is located at #R58372. Used by the routine
; at #R31282.
@label=M_YEAR11
t58360 DEFM "1685"
 58364 DEFB 0 ; End marker
 58365 DEFS 7

; 'Sedgemoor'
;
; Question/answer word no. #b235 for MR CREAK. The corresponding
; question/answer word (no. #b234) is located at #R58360. Used by the routine
; at #R31282.
@label=M_BATTLE11
t58372 DEFM "Sedgemoor"
 58381 DEFB 0 ; End marker
 58382 DEFS 2

; '1746'
;
; Question/answer word no. #b236 for MR CREAK. The corresponding
; question/answer word (no. #b237) is located at #R58396. Used by the routine
; at #R31282.
@label=M_YEAR12
t58384 DEFM "1746"
 58388 DEFB 0 ; End marker
 58389 DEFS 7

; 'Culloden'
;
; Question/answer word no. #b237 for MR CREAK. The corresponding
; question/answer word (no. #b236) is located at #R58384. Used by the routine
; at #R31282.
@label=M_BATTLE12
t58396 DEFM "Culloden"
 58404 DEFB 0 ; End marker
 58405 DEFS 3

; '1775'
;
; Question/answer word no. #b238 for MR CREAK. The corresponding
; question/answer word (no. #b239) is located at #R58420. Used by the routine
; at #R31282.
@label=M_YEAR13
t58408 DEFM "1775"
 58412 DEFB 0 ; End marker
 58413 DEFS 7

; 'Lexington'
;
; Question/answer word no. #b239 for MR CREAK. The corresponding
; question/answer word (no. #b238) is located at #R58408. Used by the routine
; at #R31282.
@label=M_BATTLE13
t58420 DEFM "Lexington"
 58429 DEFB 0 ; End marker
 58430 DEFS 2

; '1781'
;
; Question/answer word no. #b240 for MR CREAK. The corresponding
; question/answer word (no. #b241) is located at #R58444. Used by the routine
; at #R31282.
@label=M_YEAR14
t58432 DEFM "1781"
 58436 DEFB 0 ; End marker
 58437 DEFS 7

; 'Yorktown'
;
; Question/answer word no. #b241 for MR CREAK. The corresponding
; question/answer word (no. #b240) is located at #R58432. Used by the routine
; at #R31282.
@label=M_BATTLE14
t58444 DEFM "Yorktown"
 58452 DEFB 0 ; End marker
 58453 DEFS 3

; '1805'
;
; Question/answer word no. #b242 for MR CREAK. The corresponding
; question/answer word (no. #b243) is located at #R58468. Used by the routine
; at #R31282.
@label=M_YEAR15
t58456 DEFM "1805"
 58460 DEFB 0 ; End marker
 58461 DEFS 7

; 'Trafalgar'
;
; Question/answer word no. #b243 for MR CREAK. The corresponding
; question/answer word (no. #b242) is located at #R58456. Used by the routine
; at #R31282.
@label=M_BATTLE15
t58468 DEFM "Trafalgar"
 58477 DEFB 0 ; End marker
 58478 DEFS 2

; '1815'
;
; Question/answer word no. #b244 for MR CREAK. The corresponding
; question/answer word (no. #b245) is located at #R58492. Used by the routine
; at #R31282.
@label=M_YEAR16
t58480 DEFM "1815"
 58484 DEFB 0 ; End marker
 58485 DEFS 7

; 'Waterloo'
;
; Question/answer word no. #b245 for MR CREAK. The corresponding
; question/answer word (no. #b244) is located at #R58480. Used by the routine
; at #R31282.
@label=M_BATTLE16
t58492 DEFM "Waterloo"
 58500 DEFB 0 ; End marker
 58501 DEFS 3

; '1812'
;
; Question/answer word no. #b246 for MR CREAK. The corresponding
; question/answer word (no. #b247) is located at #R58516. Used by the routine
; at #R31282.
@label=M_YEAR17
t58504 DEFM "1812"
 58508 DEFB 0 ; End marker
 58509 DEFS 7

; 'Borodino'
;
; Question/answer word no. #b247 for MR CREAK. The corresponding
; question/answer word (no. #b246) is located at #R58504. Used by the routine
; at #R31282.
@label=M_BATTLE17
t58516 DEFM "Borodino"
 58524 DEFB 0 ; End marker
 58525 DEFS 3

; '1836'
;
; Question/answer word no. #b248 for MR CREAK. The corresponding
; question/answer word (no. #b249) is located at #R58540. Used by the routine
; at #R31282.
@label=M_YEAR18
t58528 DEFM "1836"
 58532 DEFB 0 ; End marker
 58533 DEFS 7

; 'San Jacinto'
;
; Question/answer word no. #b249 for MR CREAK. The corresponding
; question/answer word (no. #b248) is located at #R58528. Used by the routine
; at #R31282.
@label=M_BATTLE18
t58540 DEFM "San Jacinto"
 58551 DEFB 0 ; End marker

; '1863'
;
; Question/answer word no. #b250 for MR CREAK. The corresponding
; question/answer word (no. #b251) is located at #R58564. Used by the routine
; at #R31282.
@label=M_YEAR19
t58552 DEFM "1863"
 58556 DEFB 0 ; End marker
 58557 DEFS 7

; 'Gettysburg'
;
; Question/answer word no. #b251 for MR CREAK. The corresponding
; question/answer word (no. #b250) is located at #R58552. Used by the routine
; at #R31282.
@label=M_BATTLE19
t58564 DEFM "Gettysburg"
 58574 DEFB 0 ; End marker
 58575 DEFB 0

; '1854'
;
; Question/answer word no. #b252 for MR CREAK. The corresponding
; question/answer word (no. #b253) is located at #R58588. Used by the routine
; at #R31282.
@label=M_YEAR20
t58576 DEFM "1854"
 58580 DEFB 0 ; End marker
 58581 DEFS 7

; 'Balaclava'
;
; Question/answer word no. #b253 for MR CREAK. The corresponding
; question/answer word (no. #b252) is located at #R58576. Used by the routine
; at #R31282.
@label=M_BATTLE20
t58588 DEFM "Balaclava"
 58597 DEFB 0 ; End marker
 58598 DEFS 2

; Unused
;
; Perhaps this unused date was once coupled with 'Marengo'.
u58600 DEFM "1800"

; Play the 'hit a shield' sound effect
;
; Used by the routine at #R28143.
@label=SHIELDSND
c58604 DI            ; Disable interrupts
 58605 LD C,16       ; There are 16 mini-sound effects in a row
@keep
*58607 LD HL,65047   ; {#REGa=#b1 (initial border colour: blue), #REGh=#b254
 58610 LD A,1        ; (pitch adjustment), #REGl=#b23 (border alternates
 58612 LD DE,16384   ; blue/yellow), #REGd=#b64 (duration), #REGe=#b0 (initial
                     ; pitch)}
 58615 CALL 65122    ; Play one mini-sound effect with these parameters
 58618 DEC C         ; Next mini-sound effect
 58619 JR NZ,58607   ; Jump back until all 16 have been done
 58621 EI            ; Re-enable interrupts
 58622 RET           ;

; Unused
s58623 DEFB 0

; 'i hate^fizziks'
;
; Used by the routine at #R29284.
@label=M_WANDERBRD0
t58624 DEFM "i hate"
 58630 DEFB 2 ; Newline
 58631 DEFM "fizziks"
 58638 DEFB 0 ; End marker
 58639 DEFS 17

; 'i hate sums'
;
; Used by the routine at #R29284.
@label=M_WANDERBRD1
t58656 DEFM "i hate sums"
 58667 DEFB 0 ; End marker
 58668 DEFS 20

; 'skool rools^o k'
;
; Used by the routine at #R29284.
@label=M_WANDERBRD2
t58688 DEFM "skool rools"
 58699 DEFB 2 ; Newline
 58700 DEFM "o k"
 58703 DEFB 0 ; End marker
 58704 DEFS 16

; 'i hate skool'
;
; Used by the routine at #R29284.
@label=M_WANDERBRD3
t58720 DEFM "i hate skool"
 58732 DEFB 0 ; End marker
 58733 DEFS 19

; 'speling iz^boaring'
;
; Used by the routine at #R29284.
@label=M_WANDERBRD4
t58752 DEFM "speling iz"
 58762 DEFB 2 ; Newline
 58763 DEFM "boaring"
 58770 DEFB 0 ; End marker
 58771 DEFS 13

; 'i love^WHEELIE'
;
; Used by the routine at #R29284.
@label=M_WANDERBRD5
t58784 DEFM "i love"
 58790 DEFB 2 ; Newline
 58791 DEFM "WHEELIE"
 58798 DEFB 0 ; End marker
 58799 DEFS 17

; 'SKYRANGER^is grate'
;
; Used by the routine at #R29284.
@label=M_WANDERBRD6
t58816 DEFM "SKYRANGER"
 58825 DEFB 2 ; Newline
 58826 DEFM "is grate"
 58834 DEFB 0 ; End marker
 58835 DEFS 13

; 'skool dinners^are orrible'
;
; Used by the routine at #R29284.
@label=M_WANDERBRD7
t58848 DEFM "skool dinners"
 58861 DEFB 2 ; Newline
 58862 DEFM "are orrible"
 58873 DEFB 0 ; End marker
 58874 DEFS 6

; 'THE 47 TIMES^TABLE'
;
; Used by the routine at #R29284.
@label=M_WACKERBRD0
t58880 DEFM "THE 47 TIMES"
 58892 DEFB 2 ; Newline
 58893 DEFM "TABLE"
 58898 DEFB 0 ; End marker
 58899 DEFS 13

; 'QUADRATIC^EQUATIONS'
;
; Used by the routine at #R29284.
@label=M_WACKERBRD1
t58912 DEFM "QUADRATIC"
 58921 DEFB 2 ; Newline
 58922 DEFM "EQUATIONS"
 58931 DEFB 0 ; End marker
 58932 DEFS 12

; 'WHY SUMS ARE^FUN'
;
; Used by the routine at #R29284.
@label=M_WACKERBRD2
t58944 DEFM "WHY SUMS ARE"
 58956 DEFB 2 ; Newline
 58957 DEFM "FUN"
 58960 DEFB 0 ; End marker
 58961 DEFS 15

; 'VECTORS AND^MATRICES'
;
; Used by the routine at #R29284.
@label=M_WACKERBRD3
t58976 DEFM "VECTORS AND"
 58987 DEFB 2 ; Newline
 58988 DEFM "MATRICES"
 58996 DEFB 0 ; End marker
 58997 DEFS 11

; 'ISOSCELES^TRIANGLES'
;
; Used by the routine at #R29284.
@label=M_WACKERBRD4
t59008 DEFM "ISOSCELES"
 59017 DEFB 2 ; Newline
 59018 DEFM "TRIANGLES"
 59027 DEFB 0 ; End marker
 59028 DEFS 12

; 'PYTHAGORAS^THEOREM'
;
; Used by the routine at #R29284.
@label=M_WACKERBRD5
t59040 DEFM "PYTHAGORAS"
 59050 DEFB 2 ; Newline
 59051 DEFM "THEOREM"
 59058 DEFB 0 ; End marker
 59059 DEFS 13

; 'FACTORS'
;
; Used by the routine at #R29284.
@label=M_WACKERBRD6
t59072 DEFM "FACTORS"
 59079 DEFB 0 ; End marker
 59080 DEFS 24

; 'THE AREA OF^A CIRCLE'
;
; Used by the routine at #R29284.
@label=M_WACKERBRD7
t59104 DEFM "THE AREA OF"
 59115 DEFB 2 ; Newline
 59116 DEFM "A CIRCLE"
 59124 DEFB 0 ; End marker
 59125 DEFS 11

; 'The Periodic^Table'
;
; Used by the routine at #R29284.
@label=M_ROCKITTBRD0
t59136 DEFM "The Periodic"
 59148 DEFB 2 ; Newline
 59149 DEFM "Table"
 59154 DEFB 0 ; End marker
 59155 DEFS 13

; 'Splitting^The Atom'
;
; Used by the routine at #R29284.
@label=M_ROCKITTBRD1
t59168 DEFM "Splitting"
 59177 DEFB 2 ; Newline
 59178 DEFM "The Atom"
 59186 DEFB 0 ; End marker
 59187 DEFS 13

; 'Explosions I^have known'
;
; Used by the routine at #R29284.
@label=M_ROCKITTBRD2
t59200 DEFM "Explosions I"
 59212 DEFB 2 ; Newline
 59213 DEFM "have known"
 59223 DEFB 0 ; End marker
 59224 DEFS 8

; 'How to blow^yourself up'
;
; Used by the routine at #R29284.
@label=M_ROCKITTBRD3
t59232 DEFM "How to blow"
 59243 DEFB 2 ; Newline
 59244 DEFM "yourself up"
 59255 DEFB 0 ; End marker
 59256 DEFS 8

; 'Things to do^with TNT'
;
; Used by the routine at #R29284.
@label=M_ROCKITTBRD4
t59264 DEFM "Things to do"
 59276 DEFB 2 ; Newline
 59277 DEFM "with TNT"
 59285 DEFB 0 ; End marker
 59286 DEFS 10

; 'Chemistry^of dynamite'
;
; Used by the routine at #R29284.
@label=M_ROCKITTBRD5
t59296 DEFM "Chemistry"
 59305 DEFB 2 ; Newline
 59306 DEFM "of dynamite"
 59317 DEFB 0 ; End marker
 59318 DEFS 10

; 'First aid^for chemists'
;
; Used by the routine at #R29284.
@label=M_ROCKITTBRD6
t59328 DEFM "First aid"
 59337 DEFB 2 ; Newline
 59338 DEFM "for chemists"
 59350 DEFB 0 ; End marker
 59351 DEFS 9

; 'Fast ways to^open doors'
;
; Used by the routine at #R29284.
@label=M_ROCKITTBRD7
t59360 DEFM "Fast ways to"
 59372 DEFB 2 ; Newline
 59373 DEFM "open doors"
 59383 DEFB 0 ; End marker
 59384 DEFS 8

; 'MANCHESTER^MONSOONS'
;
; Used by the routine at #R29284.
@label=M_WITHITBRD0
t59392 DEFM "MANCHESTER"
 59402 DEFB 2 ; Newline
 59403 DEFM "MONSOONS"
 59411 DEFB 0 ; End marker
 59412 DEFS 2
 59414 DEFM "STER" ; This blackboard message probably used to be 'WHY IT RAINS
                   ; IN MANCHESTER' (as it is in the re-release of Skool Daze
                   ; by #FACT#alternativeDifferences(Alternative Software Ltd))
 59418 DEFS 6

; 'THE CLIMATE^OF CLAPHAM'
;
; Used by the routine at #R29284.
@label=M_WITHITBRD1
t59424 DEFM "THE CLIMATE"
 59435 DEFB 2 ; Newline
 59436 DEFM "OF CLAPHAM"
 59446 DEFB 0 ; End marker
 59447 DEFS 9

; 'THE PEAKS^OF PERU'
;
; Used by the routine at #R29284.
@label=M_WITHITBRD2
t59456 DEFM "THE PEAKS"
 59465 DEFB 2 ; Newline
 59466 DEFM "OF PERU"
 59473 DEFB 0 ; End marker
 59474 DEFM "ERU"
 59477 DEFS 11

; 'THE GLASGOW^RAIN-FOREST'
;
; Used by the routine at #R29284.
@label=M_WITHITBRD3
t59488 DEFM "THE GLASGOW"
 59499 DEFB 2 ; Newline
 59500 DEFM "RAIN-FOREST"
 59511 DEFB 0 ; End marker
 59512 DEFM "T"
 59513 DEFS 7

; 'THE EXPORTS^OF FIJI'
;
; Used by the routine at #R29284.
@label=M_WITHITBRD4
t59520 DEFM "THE EXPORTS"
 59531 DEFB 2 ; Newline
 59532 DEFM "OF FIJI"
 59539 DEFB 0 ; End marker
 59540 DEFS 12

; 'ACTIVE^VOLCANOES'
;
; Used by the routine at #R29284.
@label=M_WITHITBRD5
t59552 DEFM "ACTIVE"
 59558 DEFB 2 ; Newline
 59559 DEFM "VOLCANOES"
 59568 DEFB 0 ; End marker
 59569 DEFS 15

; 'POP MUSIC IN^ANTARCTICA'
;
; Used by the routine at #R29284.
@label=M_WITHITBRD6
t59584 DEFM "POP MUSIC IN"
 59596 DEFB 2 ; Newline
 59597 DEFM "ANTARCTICA"
 59607 DEFB 0 ; End marker
 59608 DEFS 8

; 'THE UPLANDS^OF RUTLAND'
;
; Used by the routine at #R29284.
@label=M_WITHITBRD7
t59616 DEFM "THE UPLANDS"
 59627 DEFB 2 ; Newline
 59628 DEFM "OF RUTLAND"
 59638 DEFB 0 ; End marker
 59639 DEFS 9

; 'Industrial^Revolution'
;
; Used by the routine at #R29284.
@label=M_CREAKBRD0
t59648 DEFM "Industrial"
 59658 DEFB 2 ; Newline
 59659 DEFM "Revolution"
 59669 DEFB 0 ; End marker
 59670 DEFS 10

; 'The Norman^Conquest'
;
; Used by the routine at #R29284.
@label=M_CREAKBRD1
t59680 DEFM "The Norman"
 59690 DEFB 2 ; Newline
 59691 DEFM "Conquest"
 59699 DEFB 0 ; End marker
 59700 DEFS 12

; 'The Wars of^the Roses'
;
; Used by the routine at #R29284.
@label=M_CREAKBRD2
t59712 DEFM "The Wars of"
 59723 DEFB 2 ; Newline
 59724 DEFM "the Roses"
 59733 DEFB 0 ; End marker
 59734 DEFS 10

; 'The Spanish^Armada'
;
; Used by the routine at #R29284.
@label=M_CREAKBRD3
t59744 DEFM "The Spanish"
 59755 DEFB 2 ; Newline
 59756 DEFM "Armada"
 59762 DEFB 0 ; End marker
 59763 DEFS 13

; 'The First^Crusade'
;
; Used by the routine at #R29284.
@label=M_CREAKBRD4
t59776 DEFM "The First"
 59785 DEFB 2 ; Newline
 59786 DEFM "Crusade"
 59793 DEFB 0 ; End marker
 59794 DEFS 14

; 'Magna Carta'
;
; Used by the routine at #R29284.
@label=M_CREAKBRD5
t59808 DEFM "Magna Carta"
 59819 DEFB 0 ; End marker
 59820 DEFS 20

; 'The Boston^Tea Party'
;
; Used by the routine at #R29284.
@label=M_CREAKBRD6
t59840 DEFM "The Boston"
 59850 DEFB 2 ; Newline
 59851 DEFM "Tea Party"
 59860 DEFB 0 ; End marker
 59861 DEFS 11

; 'The Black^Death'
;
; Used by the routine at #R29284.
@label=M_CREAKBRD7
t59872 DEFM "The Black"
 59881 DEFB 2 ; Newline
 59882 DEFM "Death"
 59887 DEFB 0 ; End marker
 59888 DEFS 16

; Temporary store for the part of the screen overwritten by a lines bubble
;
; Used by the routine at #R29871.
@label=OVERBUF
b59904 DEFS 24  ; The attribute bytes are stored here
@label=OVERBUFG
 59928 DEFS 192 ; The display file bytes are stored here

; Unused
s60120 DEFS 8

; Make a hitting sound effect
;
; Used by the routine at #R62628.
@label=HITSOUND
c60128 CALL 65088    ; {A hitting sound effect is two walking sound effects
 60131 CALL 65088    ; close together}
 60134 LD A,1        ; {Restore the border colour (blue)
 60136 OUT (254),A   ; }
 60138 RET           ;

; Make a jumping sound effect
;
; Used by the routine at #R62771.
@label=JUMPSOUND
@ofix-begin
@ignoreua
c60139 LD HL,784     ; {These parameters were meant for the routine at #R65122;
 60142 LD DE,12896   ; however, the #S/CALL/ below is to #w62818 (98,245)
 60145 LD A,1        ; instead of #R65122 (98,254), which is a
                     ; #BUG#jumpSound(bug)}
@nowarn
@ignoreua
 60147 CALL 62818    ; #w62818 holds the operand of a #S/JR NZ/ instruction, so
                     ; in effect this is #S/CALL/ #R62819; anyway, this call
                     ; does nothing significant
@ofix+else
c60139 LD HL,784     ; {Initialise the jumping sound effect parameters
 60142 LD DE,12896   ;
 60145 LD A,1        ; }
 60147 CALL 65122    ; Make the jumping sound effect
@ofix+end
 60150 JP 65106      ; Make a walking sound effect

; Unused
s60153 DEFS 7

; Lines bubble graphic template 1
;
; Used by the routines at #R30208 and #R30432. Lines bubble graphic template 2
; can be found at #R60416.
; .
; #UDGTABLE
; { #UDGARRAY8,23,,8;60184-60191;60248-60255;60312-60319(lines_bubble) }
; TABLE#
; .
; The attribute bytes will be one of the following depending on who's getting
; lines:
; .
; #TABLE(default)
; { =h Attribute          | =h Lines recipient }
; { #b23 (INK 7: PAPER 2) | ERIC }
; { #b31 (INK 7: PAPER 3) | BOY WANDER }
; { #b39 (INK 7: PAPER 4) | EINSTEIN or ANGELFACE }
; TABLE#
@label=BUBBLE1
b60160 DEFB 0,0,0,0,0,0,0,0             ; {The attribute bytes are filled in
 60168 DEFB 0,0,0,0,0,0,0,0             ; here
 60176 DEFB 0,0,0,0,0,0,0,0             ; }
 60184 DEFB 63,252,63,252,63,252,63,252 ; {Graphic data
 60192 DEFB 7,224,7,224,7,224,7,224     ;
 60200 DEFB 0,0,0,0,0,0,0,0             ;
 60208 DEFB 0,0,0,0,0,0,0,0             ;
 60216 DEFB 128,0,0,48,64,0,0,1         ;
 60224 DEFB 192,0,0,72,80,0,0,3         ;
 60232 DEFB 224,0,0,72,69,24,224,7      ;
 60240 DEFB 240,0,0,88,86,165,0,15      ;
 60248 DEFB 240,0,0,104,84,189,192,15   ;
 60256 DEFB 224,0,0,72,84,160,32,7      ;
 60264 DEFB 192,0,0,48,84,153,192,3     ;
 60272 DEFB 128,0,0,0,0,0,0,1           ;
@label=BUBBLE1L2
 60280 DEFB 128,0,0,0,0,0,0,1           ;
 60288 DEFB 192,0,0,0,0,0,0,3           ;
 60296 DEFB 224,0,0,0,0,0,0,7           ;
 60304 DEFB 240,0,0,0,0,0,0,15          ;
 60312 DEFB 240,0,0,0,0,0,0,15          ;
 60320 DEFB 224,0,0,0,0,0,0,7           ;
 60328 DEFB 192,0,0,0,0,0,0,3           ;
 60336 DEFB 128,0,0,0,0,0,0,1           ;
 60344 DEFB 0,0,0,0,0,0,0,0             ;
 60352 DEFB 0,0,0,0,0,0,0,0             ;
 60360 DEFB 7,224,7,224,7,224,7,224     ;
 60368 DEFB 63,252,63,252,63,252,63,252 ; }

; Unused
s60376 DEFS 8

; 'DEMO. - PRESS A KEY TO PLAY'
;
; Used by the routine at #R63909.
@label=M_DEMOMODE
t60384 DEFM "DEMO. - PRESS"
 60397 DEFB 0 ; End marker
 60398 DEFS 2
@label=M_DEMOMODEL2
 60400 DEFM "A KEY TO PLAY"
 60413 DEFB 0 ; End marker
 60414 DEFS 2

; Lines bubble graphic template 2
;
; Used by the routines at #R30156 and #R63829. The initial contents of this
; buffer are almost the same as lines bubble graphic template 1 at #R60160,
; except that the '0' does not have a line through it. The '0 lines' text in
; this buffer is overwritten by the lines reprimand message (or the safe
; combination letter) before the bubble is displayed for the first time.
; .
; #UDGTABLE
; { #UDGARRAY8,23,,8;60440-60447;60504-60511;60568-60575(lines_bubble2) }
; TABLE#
; .
; The attribute bytes will be 7 (INK 7: PAPER 0) for the safe combination
; letter bubble, or one of the following depending on who's getting lines:
; .
; #TABLE(default)
; { =h Attribute          | =h Lines recipient }
; { #b23 (INK 7: PAPER 2) | ERIC }
; { #b31 (INK 7: PAPER 3) | BOY WANDER }
; { #b39 (INK 7: PAPER 4) | EINSTEIN or ANGELFACE }
; TABLE#
@label=BUBBLE2
b60416 DEFB 0,0,0,0,0,0,0,0             ; {The attribute bytes are filled in
 60424 DEFB 0,0,0,0,0,0,0,0             ; here
 60432 DEFB 0,0,0,0,0,0,0,0             ; }
@label=BUBBLE2GR
 60440 DEFB 63,252,63,252,63,252,63,252 ; {Graphic data
 60448 DEFB 7,224,7,224,7,224,7,224     ;
 60456 DEFB 0,0,0,0,0,0,0,0             ;
@label=BUBBLE2L1
 60464 DEFB 0,0,0,0,0,0,0,0             ;
 60472 DEFB 128,0,0,48,64,0,0,1         ;
 60480 DEFB 192,0,0,72,80,0,0,3         ;
 60488 DEFB 224,0,0,72,69,24,224,7      ;
 60496 DEFB 240,0,0,72,86,165,0,15      ;
 60504 DEFB 240,0,0,72,84,189,192,15    ;
 60512 DEFB 224,0,0,72,84,160,32,7      ;
 60520 DEFB 192,0,0,48,84,153,192,3     ;
@label=BUBBLE2L2
 60528 DEFB 128,0,0,0,0,0,0,1           ;
 60536 DEFB 128,0,0,0,0,0,0,1           ;
 60544 DEFB 192,0,0,0,0,0,0,3           ;
 60552 DEFB 224,0,0,0,0,0,0,7           ;
 60560 DEFB 240,0,0,0,0,0,0,15          ;
 60568 DEFB 240,0,0,0,0,0,0,15          ;
 60576 DEFB 224,0,0,0,0,0,0,7           ;
 60584 DEFB 192,0,0,0,0,0,0,3           ;
 60592 DEFB 128,0,0,0,0,0,0,1           ;
 60600 DEFB 0,0,0,0,0,0,0,0             ;
 60608 DEFB 0,0,0,0,0,0,0,0             ;
 60616 DEFB 7,224,7,224,7,224,7,224     ;
 60624 DEFB 63,252,63,252,63,252,63,252 ; }

; Unused
s60632 DEFS 8

; 'Press 'U' if you understood{8 spaces}'
;
; Used by the routine at #R63488.
@label=M_PRESSU
t60640 DEFM "Press 'U' if you understood"
 60667 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; Unused
s60668 DEFS 4

; Lesson box graphic buffer
;
; Used by the routine at #R31040.
@label=LESSONBOX
b60672 DEFB 5,5,5,5,5,5,5,5 ; {Attributes (PAPER 0: INK 5)
 60680 DEFB 5,5,5,5,5,5,5,5 ;
 60688 DEFB 5,5,5,5,5,5,5,5 ; }
 60696 DEFS 192             ; The graphic data is filled in here

; Unused
s60888 DEFS 8

; Prepare for a new game
;
; Used by the routine at #R26880. Clears the screen and asks whether the
; characters' names should be changed; returns to the caller if the answer is
; no, or proceeds into the routine at #R61152 if the answer is yes.
@label=PREPGAME
c60896 LD A,6        ; {BORDER 6
 60898 OUT (254),A   ; }
 60900 LD HL,16384   ; {Blank the entire display
*60903 LD (HL),0     ;
 60905 INC HL        ;
 60906 LD A,H        ;
 60907 CP 88         ;
 60909 JR NZ,60903   ; }
*60911 LD (HL),48    ; {PAPER 6: INK 0
 60913 INC HL        ;
 60914 LD A,H        ;
 60915 CP 91         ;
 60917 JR NZ,60911   ; }
 60919 CALL 64073    ; Ask whether the characters' names should be changed, and
                     ; return here only if the answer is yes
@label=CHGNAMES
 60922 LD B,32       ; Prepare #REGb for drawing the catwalk
 60924 JP 61152      ;

; Unused
s60927 DEFB 0

; 'Score - 0 Lines - 0 Hi-Sc - 0' box graphic
;
; Used by the routine at #R27406.
; .
; #UDGTABLE
; { #UDGARRAY8,6,,8;60952-60959;61016-61023;61080-61087(score_box) }
; TABLE#
@label=SCOREBOX
b60928 DEFB 6,6,6,6,6,6,6,6         ; {Attributes (PAPER 0: INK 6)
 60936 DEFB 6,6,6,6,6,6,6,6         ;
 60944 DEFB 6,6,6,6,6,6,6,6         ; }
 60952 DEFB 0,0,0,0,0,0,0,0         ; {Graphic data
 60960 DEFB 56,0,0,0,0,0,0,48       ;
 60968 DEFB 64,0,0,0,0,0,0,72       ;
 60976 DEFB 65,204,163,0,0,0,0,72   ;
 60984 DEFB 50,18,212,128,0,0,0,88  ;
 60992 DEFB 10,18,135,158,0,0,0,104 ;
 61000 DEFB 10,18,132,0,0,0,0,72    ;
@bfix=DEFB 113,204,131,0,0,0,0,48
 61008 DEFB 113,216,131,0,0,0,0,48  ;
 61016 DEFB 0,0,0,0,0,0,0,0         ;
 61024 DEFB 64,0,0,0,0,0,0,48       ;
 61032 DEFB 66,0,0,0,0,0,0,72       ;
 61040 DEFB 64,163,28,0,0,0,0,72    ;
 61048 DEFB 66,212,160,0,0,0,0,88   ;
 61056 DEFB 66,151,152,30,0,0,0,104 ;
 61064 DEFB 66,148,4,0,0,0,0,72     ;
 61072 DEFB 122,147,56,0,0,0,0,48   ;
 61080 DEFB 0,0,0,0,0,0,0,0         ;
 61088 DEFB 72,7,0,0,0,0,0,48       ;
 61096 DEFB 74,8,0,0,0,0,0,72       ;
 61104 DEFB 72,8,56,0,0,0,0,72      ;
 61112 DEFB 122,6,64,0,0,0,0,88     ;
 61120 DEFB 74,225,64,30,0,0,0,104  ;
 61128 DEFB 74,1,64,0,0,0,0,72      ;
 61136 DEFB 74,14,56,0,0,0,0,48     ; }

; Unused
s61144 DEFS 8

; Prepare to change the names of the characters
;
; Continues from #R60896. Sets the scene for changing the main characters'
; names.
;
; B #b32
; HL #w20480
@label=GETNAMES
c61152 LD (HL),255   ; {Draw a solid line across the screen (the catwalk)
 61154 INC HL        ;
 61155 DJNZ 61152    ; }
 61157 LD HL,44392   ; #R44392: 'CAST OF CHARACTERS'
 61160 LD DE,16448   ; Set #REGde to the display file address at which to print
                     ; this message
 61163 CALL 45032    ; Print this message
@nowarn
 61166 LD HL,24859   ; {Change the instruction at #R24859 in the routine at
 61169 LD (HL),175   ; #R24843 to #S/XOR A/, so that the skool is not drawn in
                     ; the background}
@ssub=LD HL,39008+2
 61171 LD HL,39010   ; {Set the x-coordinate of every character to 150
 61174 LD B,21       ; (entirely off-screen)
*61176 LD (HL),150   ;
 61178 INC H         ;
 61179 DJNZ 61176    ; }
 61181 JP 61408      ;

; Skool Daze logo
;
; Used by the routine at #R27406.
@label=LOGO
b61184 DEFB 6,6,6,6,6,6,6,6              ; {Attributes (PAPER 0: INK 6)
 61192 DEFB 6,6,6,6,6,6,6,6              ;
 61200 DEFB 6,6,6,6,6,6,6,6              ; }
 61208 DEFB 0,0,0,12,0,0,0,0             ; {Graphic data
 61216 DEFB 0,0,0,12,0,0,0,0             ;
 61224 DEFB 0,0,0,12,0,0,0,0             ;
 61232 DEFB 0,0,0,12,0,0,0,0             ;
 61240 DEFB 0,0,0,6,0,0,0,0              ;
 61248 DEFB 0,0,0,6,6,0,0,0              ;
 61256 DEFB 0,0,0,6,6,0,0,56             ;
 61264 DEFB 3,0,0,3,6,0,0,108            ;
 61272 DEFB 3,0,0,227,3,0,28,204         ;
 61280 DEFB 3,0,1,179,3,1,30,216         ;
 61288 DEFB 3,0,227,25,131,15,162,240    ;
 61296 DEFB 1,129,179,73,129,153,130,96  ;
 61304 DEFB 1,139,31,25,129,153,132,102  ;
 61312 DEFB 13,155,73,145,143,152,198,60 ;
 61320 DEFB 28,243,24,240,25,144,195,152 ;
 61328 DEFB 48,225,144,96,25,221,225,192 ;
 61336 DEFB 32,248,240,0,24,198,1,128    ;
 61344 DEFB 56,206,96,0,16,192,1,128     ;
 61352 DEFB 30,99,0,0,29,224,3,0         ;
 61360 DEFB 3,96,0,0,6,0,6,0             ;
 61368 DEFB 6,0,0,0,0,0,12,0             ;
 61376 DEFB 28,0,0,0,0,0,8,0             ;
 61384 DEFB 112,0,0,0,0,0,0,0            ;
 61392 DEFB 32,0,0,0,0,0,0,0             ; }

; Unused
s61400 DEFS 8

; Display the cast of characters and change their names
;
; Continues from #R61152. Walks each character onto the screen, changes his
; name (if desired), and walks him off again.
@label=GETNAMES2
c61408 LD HL,32512   ; #R32512 holds the leftmost column of the skool on screen
                     ; (0-64)
 61411 LD B,8        ; There are 8 main characters to consider
 61413 LD (HL),B     ; Set the leftmost column to 8, so that the character can
                     ; start off-screen (at x=3) and walk on from the left
*61414 PUSH BC       ; Save the character counter
 61415 CALL 45288    ; Print the character's title and name, and walk him onto
                     ; the screen
 61418 PUSH HL       ; Save the message address for the character's name
 61419 CALL 46824    ; Print 'PRESS'C'TO CHANGE NAME' and wait for a keypress
 61422 POP HL        ; Restore the message address for the character's name
*61423 CALL Z,47208  ; Change the character's name if 'c' was pressed
 61426 JR Z,61423    ; Change the character's name if 'c' was pressed again
 61428 CALL 46568    ; Walk the character off the screen
 61431 POP BC        ; Restore the character counter to #REGb
 61432 DJNZ 61414    ; Jump back until all 8 main characters have been done
@nowarn
 61434 LD HL,24859   ; {Set the instruction at #R24859 in the routine at
 61437 LD (HL),126   ; #R24843 back to #S/LD A,(HL)/}
 61439 RET           ;

; 'WHAT IS 12 x 34?{8 spaces}'
;
; Used by the routine at #R31282.
@label=M_WACKERQ
t61440 DEFM "WHAT IS "
@label=M_WACKERQN1
 61448 DEFM "12"
 61450 DEFM " x "
@label=M_WACKERQN2
 61453 DEFM "34?"
 61456 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; '{Please Sir I cannot tell a lie . . }It's 1234{8 spaces}'
;
; Used by the routine at #R31282.
@label=M_WACKERA
t61457 DEFB 24 ; #R55792: 'Please Sir - I cannot tell a lie . . '
 61458 DEFM "It's "
@label=M_WACKERAN
 61463 DEFM "1234"
 61467 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; 'WHAT ELEMENT HAS THE SYMBOL Q?{8 spaces}'
;
; Used by the routine at #R31282.
@label=M_ROCKITTQ1
t61468 DEFM "WHAT ELEMENT HAS THE SYMBOL "
@label=M_ROCKITTQ1Q
 61496 DEFM "Q?"
 61498 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; '{Please Sir I cannot tell a lie . . }It is Q{8 spaces}'
;
; Used by the routine at #R31282.
@label=M_ANSWER
t61499 DEFB 24 ; #R55792: 'Please Sir - I cannot tell a lie . . '
 61500 DEFM "It is "
@label=M_ANSWERQ
 61506 DEFM "Q"
 61507 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; 'WHAT IS THE CHEMICAL SYMBOL FOR Q?{8 spaces}'
;
; Used by the routine at #R31282.
@label=M_ROCKITTQ2
t61508 DEFM "WHAT IS THE CHEMICAL SYMBOL FOR "
@label=M_ROCKITTQ2Q
 61540 DEFM "Q?"
 61542 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; 'WHAT'S THE CAPITAL OF Q?{8 spaces}'
;
; Used by the routine at #R31282.
@label=M_WITHITQ1
t61543 DEFM "WHAT'S THE CAPITAL OF "
@label=M_WITHITQ1Q
 61565 DEFM "Q?"
 61567 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; 'WHICH COUNTRY'S CAPITAL IS Q?{8 spaces}'
;
; Used by the routine at #R31282.
@label=M_WITHITQ2
t61568 DEFM "WHICH COUNTRY'S CAPITAL IS "
@label=M_WITHITQ2Q
 61595 DEFM "Q?"
 61597 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; 'WHEN WAS THE BATTLE OF Q?{8 spaces}'
;
; Used by the routine at #R31282.
@label=M_CREAKQ1
t61598 DEFM "WHEN WAS THE BATTLE OF "
@label=M_CREAKQ1Q
 61621 DEFM "Q?"
 61623 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; 'WHICH BATTLE OCCURRED IN Q?{8 spaces}'
;
; Used by the routine at #R31282.
@label=M_CREAKQ2
t61624 DEFM "WHICH BATTLE OCCURRED IN "
@label=M_CREAKQ2Q
 61649 DEFM "Q?"
 61651 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; '{Please Sir I cannot tell a lie . . }It was in Q{8 spaces}'
;
; Used by the routine at #R31282.
@label=M_CREAKA1
t61652 DEFB 24 ; #R55792: 'Please Sir - I cannot tell a lie . . '
 61653 DEFM "It was in "
@label=M_CREAKA1Q
 61663 DEFM "Q"
 61664 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; '{Please Sir I cannot tell a lie . . }It was the BATTLE OF Q{8 spaces}'
;
; Used by the routine at #R31282.
@label=M_CREAKA2
t61665 DEFB 24 ; #R55792: 'Please Sir - I cannot tell a lie . . '
 61666 DEFM "It was the BATTLE OF "
@label=M_CREAKA2Q
 61687 DEFM "Q"
 61688 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; '{Please Sir I cannot tell a lie . . }{ERIC} hit me{8 spaces}'
;
; Used by the routine at #R62208.
@label=M_TALEHIT
t61689 DEFB 24 ; #R55792: 'Please Sir - I cannot tell a lie . . '
 61690 DEFB 16 ; #R55680: 'ERIC'
 61691 DEFM " hit me"
 61698 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; '{Please Sir I cannot tell a lie . . }{ERIC} is not here{8 spaces}'
;
; Used by the routine at #R62208.
@label=M_TALEABSENT
t61699 DEFB 24 ; #R55792: 'Please Sir - I cannot tell a lie . . '
 61700 DEFB 16 ; #R55680: 'ERIC'
 61701 DEFM " is not here"
 61713 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; '{Please Sir I cannot tell a lie . . }{ERIC} wrote on the blackboard{8
; spaces}'
;
; Used by the routine at #R62208.
@label=M_TALEWROTE
t61714 DEFB 24 ; #R55792: 'Please Sir - I cannot tell a lie . . '
 61715 DEFB 16 ; #R55680: 'ERIC'; the routine at #R62208 may change this to
               ; #b17 (#R55694: 'BOY WANDER') as the occasion demands
 61716 DEFM " wrote on the blackboard"
 61740 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; 'WHAT HAPPENED IN THE YEAR THAT I WAS BORN{8 spaces}'
;
; Used by the routine at #R63779.
@label=M_BIRTHQ
t61741 DEFM "WHAT HAPPENED IN THE YEAR THAT I WAS BORN"
 61782 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; Unused
u61783 DEFM "e"
 61784 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; 'RIGHT! SIT DOWN MY LITTLE CHERUBS{8 spaces}'
;
; Used by the routine at #R32132.
@label=M_ROCKITTSIT
t61785 DEFM "RIGHT! SIT DOWN MY LITTLE CHERUBS"
 61818 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; 'COME ON CHAPS - SETTLE DOWN{8 spaces}'
;
; Used by the routine at #R32132.
@label=M_WITHITSIT
t61819 DEFM "COME ON CHAPS - SETTLE DOWN"
 61846 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; 'BE QUIET AND SEATED YOU NASTY LITTLE BOYS{8 spaces}'
;
; Used by the routine at #R32132.
@label=M_CREAKSIT
t61847 DEFM "BE QUIET AND SEATED YOU NASTY LITTLE BOYS"
 61888 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; 'SILENCE! OR I'LL CANE THE LOT OF YOU{8 spaces}'
;
; Used by the routine at #R32132.
@label=M_WACKERSIT
t61889 DEFM "SILENCE! OR I'LL CANE THE LOT OF YOU"
 61925 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; 'YOU HAVE OVER 10000 LINES TO WRITE {ERIC}. DON'T COME BACK TO SCHOOL TILL
; YOU HAVE DONE THEM ALL. . . .PRESS A KEY TO PLAY AGAIN{8 spaces}'
;
; Used by the routine at #R63231.
@label=M_LINES10K
t61926 DEFM "YOU HAVE OVER 10000 LINES TO WRITE "
 61961 DEFB 16 ; #R55680: 'ERIC'
 61962 DEFM ". DON'T COME BACK TO SCHOOL TILL YOU HAVE DONE THEM ALL. . . ."
 62024 DEFM "PRESS A KEY TO PLAY AGAIN"
 62049 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; 'TURN TO PAGE 123 OF YOUR BOOKS,BE SILENT AND START READING{8 spaces}'
;
; Used by the routine at #R31996.
@label=M_CLASSDO1
t62050 DEFM "TURN TO PAGE "
@label=M_CLASSDO1P
 62063 DEFM "123 OF YOUR BOOKS,BE SILENT AND START READING"
 62108 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; 'ANSWER THE QUESTIONS ON PAGE 123 OF YOUR LOVELY TEXTBOOK{8 spaces}'
;
; Used by the routine at #R31996.
@label=M_CLASSDO2
t62109 DEFM "ANSWER THE QUESTIONS ON PAGE "
@label=M_CLASSDO2P
 62138 DEFM "123 OF YOUR LOVELY TEXTBOOK"
 62165 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; 'WRITE AN ESSAY WITH THIS TITLE{8 spaces}'
;
; Used by the routines at #R32048 and #R62208.
@label=M_CLASSDO3
t62166 DEFM "WRITE AN ESSAY WITH THIS TITLE"
 62196 DEFB 3 ; #R55830: '#SPACE8' (8 spaces)

; Unused
u62197 DEFM "           " ; 11 spaces

; Make a teacher conduct a class with ERIC
;
; Continues from the routine at #R32178. Makes a teacher conduct a class with
; ERIC, from the point of reaching the left edge of the blackboard or map
; (where the teacher waits for EINSTEIN to show up) until the end of the
; lesson.
;
; H Teacher's character number (#b163-#b166)
@label=TEACHERIC
c62208 CALL 31952    ; Make the teacher wait for EINSTEIN to sit down
 62211 JR Z,62252    ; Jump if ERIC is in the room
; This entry point is used by the routine at #R62464.
*62213 LD BC,61699   ; #R61699: 'Please Sir...ERIC is not here'
 62216 CALL 31919    ; Make EINSTEIN say this
 62219 CALL 31968    ; Make the teacher give lines to EINSTEIN for telling
                     ; tales (if he's in the mood)
 62222 CALL 31996    ; Make the teacher tell the kids to read their books
 62225 CALL 31188    ; Set the zero flag if ERIC is in class
 62228 LD A,(32712)  ; Collect the lesson status flags from #R32712
 62231 JR Z,62241    ; Jump if ERIC is in class
 62233 SET 7,A       ; {Set bit 7 at #R32712, indicating that the next lines
 62235 LD (32712),A  ; message for absence (if any) should be no. #R56800(#b11)
                     ; (AND STAY THIS TIME)}
 62238 JP 31867      ; Make the teacher track down ERIC
*62241 RLCA          ; Set the carry flag if the absence lines reprimand should
                     ; be...
 62242 LD B,11       ; ...#R56800(#b11): AND STAY THIS TIME
 62244 JR C,62247    ; Jump if this is the appropriate lines reprimand
 62246 DEC B         ; #REGb=#R56768(#b10): NEVER BE LATE AGAIN
*62247 LD A,172      ; #b172=ERIC
 62249 CALL 31908    ; Give lines to ERIC
; ERIC is in class now.
*62252 LD A,(32712)  ; {Set bit 7 (indicating that the next absence lines
 62255 OR 192        ; message should be 'AND STAY THIS TIME') and bit 6
 62257 LD (32712),A  ; (indicating that the lesson has started) at #R32712}
 62260 CALL 31952    ; Is ERIC in class?
 62263 JR NZ,62213   ; Jump if not
; This is EINSTEIN's opportunity to tell tales about hitting and blackboard
; defacement.
 62265 CALL 24993    ; #REGa=random number
 62268 CP 226        ; Should EINSTEIN tell the teacher that ERIC hit him?
 62270 JR C,62302    ; Jump if not (226 times out of 256)
 62272 LD BC,61689   ; #R61689: 'Please Sir...ERIC hit me'
@rsub-begin
 62275 CP C          ; The result of this comparison is ignored
 62276 JR 62281      ;
 62278 LD BC,61741   ; This instruction is never executed; anyway,
                     ; #R61741='WHAT HAPPENED IN THE YEAR THAT I WAS BORN'
@rsub-end
*62281 CALL 31919    ; Make EINSTEIN tell the teacher that ERIC hit him
 62284 CALL 31968    ; Make the teacher give lines to EINSTEIN for telling
                     ; tales (if he's in the mood)
 62287 INC L         ; Did the teacher give lines to EINSTEIN?
 62288 JR NZ,62297   ; Jump if so
 62290 LD B,8        ; Lines reprimand #R56704(#b8): NOW DON'T DO IT AGAIN
 62292 LD A,172      ; #b172=ERIC
 62294 CALL 31908    ; Give ERIC lines
*62297 CALL 31952    ; Is ERIC in class?
 62300 JR NZ,62213   ; Jump if not
*62302 CALL 28968    ; #REGa=identifier of the blackboard closest to the
                     ; teacher
 62305 LD C,A        ; Transfer this to #REGc
 62306 CP 236        ; Are we on the top floor?
 62308 JR NZ,62316   ; Jump if not
 62310 INC L         ; #REGl=#b98
 62311 LD A,(HL)     ; #REGa=teacher's x-coordinate
 62312 CP 58         ; Are we in the Map Room?
 62314 JR NC,62419   ; Jump if so (no blackboard in there)
*62316 INC C         ; {#REGbc=#R32749 (Reading Room blackboard), #R32751
 62317 LD B,127      ; (White Room blackboard) or #R32753 (Exam Room
                     ; blackboard)}
 62319 LD A,(BC)     ; #REGa=number of the character who last wrote on the
                     ; board
 62320 AND A         ; Is the board clean?
 62321 JR Z,62369    ; Jump if so
 62323 CP 167        ; Did a teacher write on the board?
 62325 JR C,62369    ; Jump if so
 62327 JR NZ,62338   ; Jump unless BOY WANDER wrote on the board
 62329 CALL 24993    ; #REGa=random number
 62332 CP 200        ; Set the carry flag 200 times out of 256
 62334 LD A,17       ; #R55694(#b17)='BOY WANDER'
 62336 JR C,62340    ; Jump if EINSTEIN is going to blame BOY WANDER
*62338 LD A,16       ; #R55680(#b16)='ERIC'
@ssub=LD BC,61714+1
@nowarn
*62340 LD BC,61715   ; {Insert ERIC's or BOY WANDER's name into the 'X wrote on
 62343 LD (BC),A     ; the blackboard' message at #R61714}
 62344 DEC C         ; Point #REGbc at the start of the message
 62345 CALL 31919    ; Make EINSTEIN tell a tale about ERIC or BOY WANDER
                     ; writing on the blackboard
 62348 CALL 31968    ; Make the teacher give lines to EINSTEIN for telling
                     ; tales (if he's in the mood)
 62351 INC L         ; Did the teacher give lines to EINSTEIN?
 62352 JR NZ,62369   ; Jump if so
@ssub=LD A,(61714+1)
@nowarn
 62354 LD A,(61715)  ; #REGa=#R55680(#b16) ('ERIC') or #R55694(#b17) ('BOY
                     ; WANDER')
 62357 RRCA          ; Set the carry flag if EINSTEIN blamed BOY WANDER
 62358 LD A,167      ; #b167=BOY WANDER
 62360 JR C,62364    ; Jump if EINSTEIN blamed BOY WANDER for writing on the
                     ; board
 62362 LD A,172      ; #b172=ERIC
*62364 LD B,12       ; Lines reprimand #R56960(#b12): DON'T TOUCH BLACKBOARDS
 62366 CALL 31908    ; Make the teacher give lines to ERIC or BOY WANDER
; With EINSTEIN's tales now safely told, it's time to wipe the blackboard.
@nowarn
*62369 LD BC,29148   ; {Hand over control to the routine at #R29148, making the
 62372 CALL 31985    ; teacher wipe the blackboard}
; Control returns here after the teacher has wiped the blackboard.
 62375 LD L,98       ; {#REGa=teacher's x-coordinate (equal to that of the left
 62377 LD A,(HL)     ; edge of the blackboard)}
 62378 ADD A,3       ; {Place the x-coordinate of the middle of the blackboard
 62380 LD L,107      ; into byte #b107 of the teacher's buffer, and the same
 62382 LD (HL),A     ; value into byte #b108 (which ensures that the routine at
 62383 INC L         ; #R25404 will not relinquish control before the teacher
 62384 LD (HL),A     ; has reached the middle of the blackboard)}
@nowarn
 62385 LD BC,25404   ; {Hand over control to the routine at #R25404, making the
 62388 CALL 31985    ; teacher walk to the middle of the blackboard}
; Control returns here when the teacher has walked to the middle of the
; blackboard.
 62391 CALL 24993    ; #REGa=random number
 62394 CP 180        ; Should the teacher write on the blackboard?
 62396 JR C,62419    ; Jump if not (180 times out of 256)
@nowarn
 62398 LD BC,29284   ; {Hand over control to the routine at #R29284, making the
 62401 CALL 31985    ; teacher write on the blackboard}
; Control returns here when the teacher has finished writing on the blackboard.
 62404 CALL 24993    ; #REGa=random number
 62407 CP 160        ; Should the teacher tell the kids to write an essay?
 62409 JR C,62419    ; Jump if not (10 times out of 16)
 62411 LD BC,62166   ; #R62166: 'WRITE AN ESSAY WITH THIS TITLE'
 62414 CALL 32038    ; Make the teacher tell the kids to write an essay
 62417 JR 62429      ;
*62419 CALL 24993    ; #REGa=random number
 62422 CP 240        ; Is this going to be a questions-and-answers lesson?
 62424 JR C,62464    ; Jump if so (15 times out of 16)
 62426 CALL 31996    ; Make the teacher tell the kids to go to a page in their
                     ; books
; Now we enter a loop that makes the teacher walk up and down next to the
; blackboard (or the map), checking periodically whether ERIC has gone AWOL.
*62429 CALL 31952    ; Is ERIC in class?
 62432 JP NZ,62213   ; Jump if not
 62435 LD L,98       ; {Collect the teacher's x-coordinate from byte #b98 of
 62437 LD A,(HL)     ; his buffer}
 62438 XOR 3         ; Now #REGa holds the x-coordinate of the location 1 or 3
                     ; spaces behind the teacher
 62440 LD L,107      ; {Place this into byte #b107 of his buffer, and the same
 62442 LD (HL),A     ; value into byte #b108 (which ensures that the routine at
 62443 INC L         ; #R25404 will not relinquish control before the teacher
 62444 LD (HL),A     ; has reached that destination)}
@nowarn
 62445 LD BC,25404   ; {Hand over control to the routine at #R25404, making the
 62448 CALL 31985    ; teacher turn round and walk 1 or 3 paces}
 62451 JR 62429      ; Make the teacher turn round and walk 1 or 3 paces again

@rsub-begin
; Unused
s62453 DEFS 11
@rsub-end

; Make a teacher conduct a question-and-answer session
;
; Used by the routine at #R62208. Controls the teacher during a
; question-and-answer session, but hands control back to the routine at #R62208
; if ERIC goes missing.
;
; H Teacher's character number (#b163-#b166)
@label=QALESSON
c62464 LD L,100      ; {Replace the primary command routine address in bytes
@ssub=LD (HL),62464/256
 62466 LD (HL),244   ; #b99 and #b100 of the teacher's buffer with #R62464
                     ; (this routine)
@rsub+begin
       DEC L
       LD (HL),62464%256
@rsub+end
                     ; }
*62468 CALL 31952    ; Is ERIC in the room?
 62471 JR Z,62480    ; Jump if so
; ERIC is absent.
 62473 LD L,100      ; {Replace the address of this primary command routine in
@ssub=LD (HL),62208/256
 62475 LD (HL),243   ; bytes #b99 and #b100 of the teacher's buffer with that
                     ; of #R62208
@rsub+begin
       DEC L
       LD (HL),62208%256
@rsub+end
                     ; }
 62477 JP 62213      ; Make EINSTEIN tell the teacher that ERIC is not in class
; ERIC is in class, so fire off a question and answer.
*62480 CALL 31282    ; Prepare a question and the answer
@nowarn
 62483 LD BC,31110   ; {Hand over control to the routine at #R31110, making the
 62486 CALL 31985    ; teacher ask the question}
; Control returns here when the teacher has finished asking the question.
 62489 EX DE,HL      ; Transfer the teacher's character number to #REGd
 62490 CALL 31926    ; Make the teacher wait for EINSTEIN to answer the
                     ; question
 62493 JR 62468      ;

; Deal with ERIC when he's firing the catapult
;
; Used by the routine at #R27353 when bit 0 of ERIC's status flags at #R32763
; is set (by the routine at #R62574).
@label=FIRING
c62495 LD HL,32758   ; #R32758 holds the catapult-firing action timer
                     ; (initially #b24)
 62498 DEC (HL)      ; Has ERIC finished firing the catapult?
 62499 JR NZ,62516   ; Jump if not
; This entry point is used by the routines at #R62628 and #R62771 to restore
; ERIC's animatory state to what it was before he jumped or threw a punch.
*62501 XOR A         ; {Clear all of ERIC's status flags at #R32763
 62502 LD (32763),A  ; }
 62505 LD H,172      ; #b172=ERIC
 62507 CALL 25108    ; Update the SRB for ERIC's current animatory state
 62510 LD L,102      ; {Restore ERIC's animatory state to what it was before he
 62512 LD A,(HL)     ; fired the catapult, jumped, or threw the punch}
 62513 JP 25008      ; Update ERIC's animatory state and location and update
                     ; the SRB
; ERIC hasn't finished firing the catapult. Check which phase of the firing
; action we're at.
*62516 LD A,(HL)     ; Pick up the current value of the action timer in #REGa
 62517 LD H,172      ; #b172=ERIC
 62519 CP 18         ; Is it time to raise the catapult to eye level?
 62521 JP Z,28737    ; Jump if so
 62524 CP 6          ; Is it time to start lowering the catapult?
 62526 JP Z,28779    ; Jump if so
 62529 CP 12         ; Is it time to launch the pellet?
 62531 RET NZ        ; Return if not
; It's time to launch the catapult pellet.
 62532 LD L,96       ; Byte #b96 of ERIC's buffer holds his animatory state
 62534 LD A,(HL)     ; Pick this up in #REGa
 62535 OR 127        ; #REGa=#AS127(#b127 or #b255) (catapult pellet)
 62537 INC L         ; {Pick up ERIC's coordinates in #REGde; they will be the
 62538 LD D,(HL)     ; initial coordinates of the catapult pellet
 62539 INC L         ;
 62540 LD E,(HL)     ; }
 62541 DEC H         ; #REGh=#b171 (ERIC's catapult pellet)
 62542 CALL 28759    ; Launch the catapult pellet
 62545 CALL 65141    ; Play the catapult sound effect
 62548 LD B,13       ; Reprimand message #R56992(#b13): CATAPULTS ARE FORBIDDEN
; This entry point is used by the routines at #R62628 (with
; #REGb=#R57024(#b14): DON'T HIT YOUR MATES) and #R62771 (with
; #REGb=#R57056(#b15): YOU ARE NOT A KANGAROO).
*62550 LD H,172      ; #b172=ERIC
 62552 PUSH BC       ; Save the reprimand message identifier
 62553 CALL 28220    ; Check whether any teachers saw ERIC throw a punch, fire
                     ; his catapult, or jump
 62556 POP BC        ; Restore the reprimand message identifier to #REGb
 62557 RET NC        ; Return if ERIC wasn't seen by a teacher
 62558 EXX           ;
 62559 LD L,97       ; Byte #b97 of the teacher's buffer holds his y-coordinate
 62561 LD D,(HL)     ; {Pick up the coordinates of the teacher who saw ERIC in
 62562 INC L         ; #REGde'
 62563 LD E,(HL)     ; }
 62564 PUSH DE       ;
 62565 EXX           ;
 62566 POP DE        ; Now #REGde holds the coordinates of the teacher who saw
                     ; ERIC
 62567 LD A,H        ; #REGa=#b172 (ERIC)
 62568 JP 30464      ; Make the teacher give ERIC lines

@rsub-begin
; Unused
s62571 DEFS 3
@rsub-end

; 'F' pressed - fire catapult
;
; The address of this routine is found in the table of keypress handling
; routines at #R26752. It is called from the main loop at #R26471 when 'F', 'C'
; or '0' (zero) is pressed.
;
; DE ERIC's coordinates
@label=FIRE
@ssub=LD A,(43872+2)
c62574 LD A,(43874)  ; #REGa=x-coordinate of ERIC's catapult pellet
 62577 RLCA          ; Is ERIC's catapult pellet already airborne?
 62578 RET NC        ; Return if so
 62579 LD BC,2049    ; #REGb=#AS8 (ERIC raising catapult), #REGc=#b1 (bit 0
                     ; set)
 62582 LD A,24       ; This will initialise the catapult-firing action timer at
                     ; #R32758 to #b24
; This entry point is used by the routine at #R62610 with #REGa=#b18,
; #REGb=#AS10 (ERIC raising fist), #REGc=#b2 (bit 1 set); and by the routine at
; #R62617 with #REGa=#b16, #REGb=#AS12 (ERIC with arm raised), #REGc=#b4 (bit 2
; set).
*62584 LD HL,32763   ; #R32763 holds ERIC's status flags
 62587 BIT 7,(HL)    ; Is ERIC sitting or lying down?
 62589 RET NZ        ; Return if so (ERIC can't fire, jump or hit while sitting
                     ; or lying down)
 62590 LD (HL),C     ; Otherwise set the appropriate bit in #R32763
 62591 LD L,246      ; {Initialise the action timer at #R32758
 62593 LD (HL),A     ; }
 62594 PUSH BC       ; Save ERIC's next animatory state temporarily
 62595 LD H,172      ; #b172=ERIC
 62597 CALL 25108    ; Update the SRB for ERIC's current animatory state
 62600 POP BC        ; Restore ERIC's next animatory state to #REGb
 62601 LD L,102      ; {Store ERIC's current animatory state in byte #b102 of
 62603 LD (HL),A     ; his buffer}
 62604 AND 128       ; {#REGa=ERIC's next animatory state (phase 1 of firing,
 62606 ADD A,B       ; hitting or jumping)}
 62607 JP 25008      ; Update ERIC's animatory state and update the SRB

; 'H' pressed - hit
;
; The address of this routine is found in the table of keypress handling
; routines at #R26752. It is called from the main loop at #R26471 when 'H' is
; pressed.
@label=HIT
c62610 LD BC,2562    ; #REGb=#AS10 (ERIC raising fist), #REGc=#b2 (bit 1 set)
 62613 LD A,18       ; This will initialise the hitting action timer at #R32758
                     ; to #b18
 62615 JR 62584      ; Start the punch

; 'J' pressed - jump
;
; The address of this routine is found in the table of keypress handling
; routines at #R26752. It is called from the main loop at #R26471 when 'J' or
; 'L' is pressed.
@label=JUMP
c62617 CALL 26184    ; Is ERIC on a staircase?
 62620 RET NZ        ; Return if so (ERIC can't jump while on a staircase)
 62621 LD BC,3076    ; #REGb=#AS12 (ERIC with arm raised), #REGc=#b4 (bit 2
                     ; set)
 62624 LD A,16       ; This will initialise the jumping action timer at #R32758
                     ; to #b16
 62626 JR 62584      ; Start the jump

; Deal with ERIC when he's hitting
;
; Used by the routine at #R27353 when bit 1 of ERIC's status flags at #R32763
; is set (by the routine at #R62574, via #R62610).
@label=HITTING
c62628 LD HL,32758   ; #R32758 holds the hitting action timer (initially #b18)
 62631 DEC (HL)      ; Has ERIC finished the punch?
 62632 JP Z,62501    ; Jump if so
 62635 LD A,(HL)     ; Pick up the current value of the action timer in #REGa
 62636 LD H,172      ; #b172=ERIC
 62638 CP 12         ; Is it time to raise the fist to eye level?
 62640 JP Z,28737    ; Jump if so
 62643 CP 11         ; Is it time to see if anyone was hit?
 62645 RET NZ        ; Return if not
; ERIC's fist is fully raised. Check whether it's in someone's face.
 62646 CALL 28569    ; Check whether ERIC managed to deck anyone
 62649 LD A,H        ; #REGa=character number of the decked boy (if any)
 62650 CP 163        ; Was anyone decked?
 62652 JR Z,62661    ; Jump if not
 62654 CP 168        ; #b168=ANGELFACE
 62656 LD A,3        ; {Add 30 the score and print it if ANGELFACE was decked
 62658 CALL Z,27389  ; }
*62661 CALL 60128    ; Make a hitting sound effect
 62664 LD B,14       ; Lines reprimand #R57024(#b14): DON'T HIT YOUR MATES
 62666 JP 62550      ; Make any nearby teacher give ERIC lines

@rsub-begin
; Unused
s62669 DEFS 5
@rsub-end

; Get the attribute file address of a pellet's potential target or the safe
;
; Used by the routines at #R28143 (to check whether a shield has been hit) and
; #R63270 (to make the safe flash). If the pellet's potential target or the
; safe is on-screen, this routine returns with the carry flag reset and #REGhl
; holding the attribute file address.
;
; D Target y-coordinate
; E 128 + target x-coordinate
@label=GETATTR
c62674 LD HL,32512   ; #R32512 holds the leftmost column of the skool on screen
                     ; (0-64)
 62677 LD A,E        ; {Set #REGa to the true x-coordinate of the potential
 62678 AND 127       ; target}
 62680 SUB (HL)      ; {Return with the carry flag set if the pellet is
 62681 RET C         ; off-screen to the left}
 62682 CP 32         ; The screen is 32 columns wide
 62684 CCF           ; {Return with carry flag set if the pellet is off-screen
 62685 RET C         ; to the right}
; The potential target is on-screen.
 62686 LD L,A        ; #REGl=screen x-coordinate (0-31) of the potential target
 62687 LD A,D        ; {#REGa=screen y-coordinate (2, 8 or 14) of the potential
 62688 SUB 152       ; target}
 62690 RRCA          ; {#REGa=#b64 (top floor), #b1 (middle floor), or #b193
 62691 RRCA          ; (bottom floor
 62692 RRCA          ; }
 62693 LD H,A        ; Save this floor indicator in #REGh for now
 62694 AND 224       ; #REGa=#b64 (top floor), #b0 (middle) or #b192 (bottom)
 62696 ADD A,L       ; Add the screen x-coordinate to get the LSB of the
                     ; attribute file address of the potential target
 62697 LD L,A        ; Copy the LSB to #REGl
 62698 LD A,H        ; {#REGa=#b0 (top floor) or #b1 (middle floor or bottom
 62699 AND 3         ; floor)}
 62701 ADD A,88      ; Add #b88 to get the MSB of the attribute file address of
                     ; the potential target
 62703 LD H,A        ; Copy the MSB to #REGh
 62704 RET           ; Return with the carry flag reset

; Set the new score and print it
;
; Used by the routine at #R63668 after ERIC has made the 15th shield flash,
; opened the safe, or gone up a year.
;
; HL New score
@label=SETSCORE
c62705 LD (32708),HL ; Save the new score in #R32708
 62708 LD DE,20924   ; Set #REGde to the display file address at which to print
                     ; the score
 62711 JP 30408      ; Print the new score

; Open the lip of the speech bubble
;
; Used by the routine at #R29518. Removes the solid line above the lip of the
; speech bubble, thus 'opening' it.
;
; DE Coordinates of the speech bubble lip
@label=OPENLIP
c62714 LD A,E        ; {UDG references #b248-#b255 correspond to the 8 UDGs
 62715 AND 7         ; that make up the bottom half of the speech bubble; set
 62717 ADD A,248     ; #REGe to the reference of the UDG that is above the lip
 62719 LD E,A        ; }
 62720 LD C,3        ; We need to adjust the UDGs for each third of the skool
 62722 LD H,127      ;
*62724 LD B,8        ; 8 UDGs make up the bottom half of the speech bubble
 62726 LD A,H        ; {Point #REGhl at the bottom pixel row of the UDG for the
 62727 ADD A,B       ; bottom-left corner of the speech bubble
 62728 LD H,A        ;
 62729 LD A,E        ;
 62730 LD L,248      ; }
*62732 LD (HL),126   ; {Open the bottom edge (#b129=10000001) of this speech
 62734 CP L          ; bubble UDG if the lip is underneath, or close it
 62735 JR NZ,62739   ; (#b126=01111110) otherwise
 62737 LD (HL),129   ; }
*62739 INC L         ; Move #REGhl to the next UDG along the bottom of the
                     ; speech bubble
 62740 DJNZ 62732    ; Jump back until the lip is open and the others are
                     ; closed
 62742 DEC C         ; Next third of the skool
 62743 JR NZ,62724   ; Jump back until the UDGs for each third of the skool
                     ; have been modified
 62745 JP 29394      ; Update the SRB for the middle 6 UDG columns of the
                     ; bubble

@rsub-begin
; Unused
s62748 DEFS 2
@rsub-end

; Check whether ERIC has jumped up to the safe or a shield (1)
;
; Used by the routine at #R62771.
;
; H #b172 (ERIC)
@label=CHECKJP
c62750 CALL 25108    ; Update the SRB for ERIC's current location
 62753 INC A         ; #REGa=ERIC's next animatory state
 62754 DEC D         ; {Get the coordinates of the spot above ERIC in #REGbc
 62755 LD B,D        ;
 62756 LD C,E        ; }
 62757 BIT 7,A       ; Is ERIC facing left?
 62759 JR Z,62763    ; Jump if so
 62761 INC C         ; {Add 2 to the x-coordinate in #REGc if ERIC is facing
 62762 INC C         ; right}
*62763 PUSH BC       ; Store the coordinates of ERIC's hand
 62764 CALL 25008    ; Update ERIC's animatory state and location and update
                     ; the SRB
 62767 POP DE        ; Restore the coordinates of ERIC's hand to #REGde
 62768 JP 63270      ;

; Deal with ERIC when he's jumping
;
; Used by the routine at #R27353 when bit 2 of ERIC's status flags at #R32763
; is set (by the routine at #R62574, via #R62617).
@label=JUMPING
c62771 LD HL,32758   ; Decrement the jumping action timer at #R32758 (which
                     ; starts at #b16)
 62774 DEC (HL)      ; Has ERIC completed the jump?
 62775 JP Z,62501    ; Jump if so
 62778 LD A,(HL)     ; Pick up the current value of the action timer in #REGa
*62779 CP 12         ;
 62781 LD B,15       ; Lines reprimand #R57056(#b15): YOU ARE NOT A KANGAROO
 62783 JP Z,62550    ; Jump if it's time to check whether any teachers can see
                     ; ERIC jumping
 62786 LD H,172      ; #b172=ERIC
 62788 CP 13         ; Is it time to check whether ERIC has touched a shield or
                     ; opened the safe?
 62790 JP Z,62750    ; Jump if so
 62793 CP 14         ; Is it time to make the jumping sound effect?
 62795 JP Z,60139    ; Jump if so
 62798 CP 9          ; Is it time to move ERIC's arm back?
 62800 JP Z,28779    ; Jump if so
 62803 CP 3          ; Is it time to bring ERIC back down to the floor?
 62805 JR NZ,62814   ; Jump if not
 62807 CALL 25108    ; Update the SRB for ERIC's current location
 62810 INC D         ; Move ERIC downwards
 62811 JP 25008      ; Update ERIC's location and update the SRB
*62814 CP 6          ; {Return if #REGa < #b6 (nothing to check or do)
 62816 RET C         ; }
; At this point #REGa=#b6 (which means it's time to check whether ERIC has
; jumped onto a boy, or ERIC is already standing on a boy), or #REGa is one of
; {#b7, #b8, #b10, #b11, #b15}, or #REGa>#b128 (which means ERIC has jumped
; while standing on a boy).
 62817 JR NZ,62891   ; Jump unless (a) it's time to check whether ERIC has
                     ; jumped on a boy, or (b) ERIC is already standing on a
                     ; boy
; This entry point is erroneously used by the routine at #R60139 with #REGh=#b3
; (which means (#REGd,#REGe) is set to (198,32) by the code that follows, and
; the routine exits at #R62841).
*62819 LD L,97       ; Byte #b97 of ERIC's buffer holds his y-coordinate
 62821 LD D,(HL)     ; Pick this up in #REGd
 62822 INC D         ; Down a level (where the boy that ERIC is standing on
                     ; would be, if any)
 62823 INC L         ; Byte #b98 holds ERIC's x-coordinate
 62824 LD E,(HL)     ; Pick this up in #REGe
 62825 LD B,11       ; There are 11 little boys
 62827 LD H,152      ; #b152=little boy no. 1
 62829 CALL 62905    ; Is ERIC standing on a little boy?
 62832 JR C,62842    ; Jump if so
 62834 LD H,167      ; #b167=BOY WANDER
 62836 LD B,3        ; There are three main kids besides ERIC
 62838 CALL 62911    ; Is ERIC standing on one of the three main kids?
@label=NOTONMKID
 62841 RET NC        ; Return if not
; ERIC is standing on a kid who's been knocked out.
*62842 CALL 26426    ; Check for keypresses
@label=ONKID
 62845 LD HL,32758   ; {Set the jumping action timer at #R32758 to #b7, so that
 62848 LD (HL),7     ; we keep returning to this section of code while ERIC is
                     ; standing on a boy}
 62850 RET Z         ; Return if no key of interest was pressed
 62851 SET 5,A       ; Convert the ASCII code of the keypress in #REGa to lower
                     ; case
 62853 CP 106        ; Was 'j' (jump) pressed?
 62855 JR NZ,62860   ; Jump if not
 62857 LD (HL),144   ; Set the jumping action timer at #R32758 to #b144 to
                     ; indicate that ERIC has jumped while standing on a boy
 62859 RET           ; Return to the main loop with the carry flag reset
; A key other than 'j' was pressed while ERIC was standing on a boy.
*62860 CP 111        ; #b111='o'
 62862 LD B,0        ; Set #REGb=#AS0 (ERIC facing left) for later comparison
 62864 JR Z,62871    ; Jump if 'o' (left) was pressed
 62866 LD B,128      ; Set #REGb=#AS128 (ERIC facing right) for later
                     ; comparison
 62868 CP 112        ; Was 'p' (right) pressed?
 62870 RET NZ        ; Return if not
@ssub=LD HL,44128+6
*62871 LD HL,44134   ; {#REGa=animatory state of ERIC before he jumped (stored
 62874 LD A,(HL)     ; in byte #b102 of his buffer)}
 62875 AND 128       ; Keep only the 'direction' bit
 62877 CP B          ; Should ERIC turn round?
 62878 RET Z         ; Return if not
 62879 LD A,(HL)     ; {Adjust ERIC's pre-jump animatory state to reflect his
 62880 XOR 128       ; turning round while standing on a boy
 62882 LD (HL),A     ; }
 62883 CALL 25108    ; Update the SRB for ERIC's current animatory state
 62886 XOR 128       ; #REGa=animatory state of ERIC facing the other way
 62888 JP 25008      ; Update ERIC's animatory state and update the SRB
; At this point #REGa is one of {#b7, #b8, #b10, #b11, #b15} (which means there
; is nothing to do), or #REGa=#b128-#b143 (which means ERIC has jumped while
; standing on a boy).
*62891 CP 134        ; {Return now if the #S/SUB/ #n128 instruction below would
 62893 RET Z         ; make #REGa=#b6}
 62894 SUB 128       ; {Return unless ERIC jumped while standing on a boy
 62896 RET C         ; }
; So ERIC has jumped while standing on a boy. Now either #REGa=#b0, meaning
; it's time to set the jumping action timer at #R32758 back to 7, so we can
; deal with ERIC while he's standing on a boy; or #REGa=#b1-#b15 (but not #b6,
; because that would lead us into the code at #R62819 to perform a redundant
; check on whether ERIC is standing on a boy), meaning we need to run the usual
; checks while ERIC is in mid-air.
 62897 JP NZ,62779   ; Run the usual checks while ERIC is in mid-air above a
                     ; supine boy
@ofix-begin
@nowarn
 62900 JR 62844      ; This should be #S/JR/ #R62845
@ofix+else
 62900 JR 62845      ; Set the jumping action timer at #R32758 back to #b7
@ofix+end

@rsub-begin
; Unused
s62902 DEFS 3
@rsub-end

; Check whether ERIC is standing on a boy who's been knocked out
;
; Used by the routine at #R62771. Returns with the carry flag set if ERIC is
; standing on a boy.
;
; B 11 (there are 11 little boys)
; D 1 + ERIC's y-coordinate
; E ERIC's x-coordinate
; H #b152 (little boy no. 1)
@label=BOYCHECK
c62905 LD C,E        ; {Set #REGe=x-1 and #REGc=x+2 where x is ERIC's
 62906 DEC E         ; x-coordinate; any boy with an x-coordinate in this range
 62907 INC C         ; is a potential step for ERIC
 62908 INC C         ; }
 62909 LD L,97       ; Byte #b97 of the boy's buffer holds his y-coordinate
; This entry point is also used by the routine at #R62771 with #REGh=#b167 (BOY
; WANDER) and #REGb=#b3 (and #REGe and #REGc already set as above).
*62911 LD A,D        ; #REGa=y+1 (y=ERIC's y-coordinate)
 62912 CP (HL)       ; Is there a boy at this y-coordinate?
 62913 JR NZ,62932   ; Jump if not
 62915 DEC L         ; {Collect the boy's animatory state from byte #b96 of his
 62916 LD A,(HL)     ; buffer}
 62917 INC L         ; #REGl=#b97
 62918 AND 15        ; Keep only bits 0-3 of the animatory state
 62920 CP 7          ; Is the boy lying flat on his back?
 62922 JR NZ,62932   ; Jump if not
 62924 INC L         ; {Collect the boy's x-coordinate from byte #b98 of his
 62925 LD A,(HL)     ; buffer}
 62926 DEC L         ; #REGl=#b97
 62927 CP E          ; {Return with the carry flag set if ERIC is standing on
 62928 JR C,62932    ; this boy; otherwise continue
 62930 CP C          ;
 62931 RET C         ; }
*62932 INC H         ; Next boy
 62933 DJNZ 62911    ; Jump back until all the boys have been checked
 62935 AND A         ; {Return with the carry flag reset to indicate that ERIC
 62936 RET           ; is not standing on a boy}

@rsub-begin
; Unused
s62937 DEFB 0
@rsub-end

; Collect a keypress during the game (or simulate one in demo mode)
;
; Called from the main loop at #R26471. Returns with #REGa holding the ASCII
; code of the last (actual or simulated) keypress, or the zero flag set if
; there was no (actual or simulated) keypress.
@label=GETINPUT
c62938 LD HL,32746   ; #R32746 holds the game mode indicator
 62941 LD A,(HL)     ; {Are we in demo mode?
 62942 AND A         ; }
 62943 JP NZ,26426   ; Collect a keypress if not
; We're in demo mode.
@ssub=LD L,32710%256+1
 62946 LD L,199      ; Point #REGhl at the MSB of the lines total
 62948 LD B,4        ; {Reset the score (stored at #R32708) and lines total
*62950 LD (HL),A     ; (stored at #R32710) to zero
 62951 DEC L         ;
 62952 DJNZ 62950    ; }
 62954 CALL 26426    ; Check for input from the keyboard or joystick
 62957 JP NZ,32250   ; Exit demo mode if there was input
; We're in demo mode and there was no keyboard or joystick input. Time to
; simulate a keypress to move ERIC.
 62960 LD A,(44128)  ; #REGa=ERIC's animatory state
 62963 CP 5          ; #AS5=ERIC sitting in a chair
 62965 LD HL,32705   ; #R32705 holds the stand-up delay counter
 62968 JR NZ,62996   ; Jump unless ERIC is sitting in a chair
 62970 LD A,(41568)  ; #REGa=animatory state of little boy no. 11
 62973 CP 69         ; #AS69=little boy sitting in a chair
 62975 JR Z,62993    ; Jump if little boy no. 11 is sitting in a chair
; ERIC is sitting in a chair, but little boy no. 11 isn't. ERIC should stand up
; now or soon.
 62977 LD A,(HL)     ; {The stand-up delay counter at #R32705 normally holds
 62978 AND A         ; #b0; if little boy no. 11 has just stood up, initialise
 62979 JR Z,62990    ; the delay counter to #b29}
 62981 DEC (HL)      ; Is it time for ERIC to stand up?
 62982 JR NZ,62988   ; Jump if not
*62984 LD A,115      ; Set #REGa to #b115 to simulate 's' (sit/stand) being
                     ; pressed
 62986 AND A         ; {Return with the zero flag reset to indicate input
 62987 RET           ; }
*62988 XOR A         ; {Return with the zero flag set to indicate no input
 62989 RET           ; }
*62990 LD (HL),29    ; Initialise the stand-up delay counter at #R32705 to #b29
 62992 RET           ; Return with the zero flag set to indicate no input
*62993 LD (HL),0     ; Set the stand-up delay counter at #R32705 to #b0
 62995 RET           ; Return with the zero flag set to indicate no input
; ERIC isn't sitting in a chair. Is he sitting on the floor or lying on his
; back?
*62996 LD (HL),0     ; Set the stand-up delay counter at #R32705 to #b0
@ssub=LD L,32763%256
 62998 LD L,251      ; #REGhl=#R32763 (ERIC's status flags)
 63000 BIT 7,(HL)    ; Is ERIC sitting on the floor or lying on his back?
 63002 JR NZ,62984   ; Simulate 's' to make ERIC stand up if so
; ERIC is upright. Seek little boy no. 11 for guidance on where to go next.
@ssub=LD HL,41568+1
 63004 LD HL,41569   ; {Pick up the coordinates of little boy no. 11 in #REGde
 63007 LD D,(HL)     ;
 63008 INC L         ;
 63009 LD E,(HL)     ; }
 63010 LD H,172      ; #b172=ERIC
 63012 CALL 31452    ; Determine ERIC's next move in his pursuit of little boy
                     ; no. 11
 63015 AND A         ; Are ERIC and this boy in the same location?
 63016 JR NZ,63033   ; Jump if not
; ERIC and little boy no. 11 are in the same location.
 63018 LD A,(41568)  ; #REGa=animatory state of little boy no. 11
 63021 CP 69         ; Is little boy no. 11 sitting in a chair?
 63023 JR NZ,62988   ; Jump if not (without simulating a keypress)
 63025 LD A,(44128)  ; #REGa=ERIC's animatory state
 63028 RLCA          ; Is ERIC facing left?
 63029 JR NC,62984   ; Simulate 's' (sit down) if so
 63031 LD A,3        ; Otherwise set #REGa=3: ERIC should go left (i.e. turn
                     ; round)
; Now #REGa=1 if ERIC should go up, 2 if down, 3 if left, or 4 if right (to
; follow little boy no. 11).
*63033 LD B,81       ; #b81=ASCII code for 'Q' (up)
 63035 DEC A         ; Should ERIC go up?
 63036 JR Z,63046    ; Jump if so
 63038 LD B,65       ; #b65=ASCII code for 'A' (down)
 63040 DEC A         ; Should ERIC go down?
 63041 JR Z,63046    ; Jump if so
 63043 ADD A,78      ; {#REGb=#b79 ('O') or #b80 ('P')
 63045 LD B,A        ; }
; Now #REGb holds the ASCII code of the simulated keypress: Q, A, O or P.
; Decide whether to switch to lower case (slow).
*63046 LD A,(23672)  ; #w23672=LSB of the FRAMES system variable
 63049 AND 128       ; {#REGa=#b32 (lower case, slow) or #b0 (upper case, fast)
 63051 RRCA          ;
 63052 RRCA          ; }
 63053 ADD A,B       ; #REGa=simulated keycode
 63054 RET           ; Return with the zero flag reset to indicate input

@rsub-begin
; Unused
s63055 DEFB 0
@rsub-end

; 'W' pressed - write on a blackboard
;
; The address of this routine is found in the table of keypress handling
; routines at #R26752. It is called from the main loop at #R26471 when 'W' is
; pressed.
@label=WRITE
c63056 LD HL,32763   ; #R32763 holds ERIC's status flags
 63059 BIT 7,(HL)    ; Is ERIC sitting or lying down?
 63061 RET NZ        ; Return if so
 63062 CALL 26184    ; Is ERIC on a staircase?
 63065 RET NZ        ; Return if so
 63066 CP 169        ; Is ERIC on the bottom floor?
 63068 RET Z         ; Return if so
 63069 CP 155        ; Set the zero flag if ERIC's on the top floor
 63071 LD BC,12332   ; #REGc=44, #REGb=48 (x-coordinates of the edges of the
                     ; 'writing zone' for the Reading Room blackboard)
 63074 LD A,E        ; #REGa=ERIC's x-coordinate
 63075 JR Z,63087    ; Jump if ERIC's on the top floor
 63077 LD BC,8220    ; #REGc=28, #REGb=32 (x-coordinates of the edges of the
                     ; writing zone for the White Room blackboard)
 63080 CP 40         ; Is ERIC to the left of the White Room wall?
 63082 JR C,63087    ; Jump if so
 63084 LD BC,12075   ; #REGc=43, #REGb=47 (x-coordinates of the edges of the
                     ; writing zone for the Exam Room blackboard)
; Now #REGc and #REGb hold the x-coordinates of the left and right edges of the
; writing zone for the blackboard closest to ERIC.
*63087 CP C          ; {Return if ERIC is not standing close enough to the
 63088 RET C         ; blackboard to write on it
 63089 CP B          ;
 63090 RET NC        ; }
 63091 SET 5,(HL)    ; Set bit 5 of ERIC's status flags at #R32763: ERIC is
                     ; writing on a blackboard
 63093 LD H,172      ; #b172=ERIC
 63095 CALL 28968    ; Get the blackboard identifier in #REGa
 63098 LD L,A        ; {#REGhl=#R32749 (Reading Room), #R32751 (White Room) or
@ssub=LD H,32512/256
 63099 LD H,127      ; #R32753 (Exam Room)
 63101 INC L         ; }
 63102 SUB 180       ; {#REGb=#b56 (Reading Room), #b58 (White Room) or #b60
 63104 LD B,A        ; (Exam Room)}
 63105 LD A,(HL)     ; #REGa=number of the character who last wrote on this
                     ; board
 63106 LD (HL),172   ; Signal that ERIC (#b172) wrote on this board
 63108 XOR 128       ; {#REGc=#b128 (bit 7 set) if the board is clean, <#b128
 63110 LD C,A        ; (bit 7 reset) if not}
 63111 LD A,B        ; {#REGhl=#R32680 (Reading Room blackboard), #R32686
 63112 ADD A,A       ; (White Room blackboard), or #R32692 (Exam Room
 63113 ADD A,B       ; blackboard)
 63114 LD L,A        ; }
 63115 LD B,4        ; {Prepare the 4 slots in the blackboard buffer that will
*63117 LD (HL),C     ; store the first 4 characters written on the board by
 63118 INC L         ; ERIC; each slot will have bit 7 set if the board was
 63119 DJNZ 63117    ; clean before ERIC started writing}
 63121 LD (HL),1     ; ERIC will start writing at pixel column 1
; This entry point is used by the routine at #R63146.
*63123 LD HL,44128   ; Point #REGhl at byte #b96 of ERIC's buffer
 63126 LD B,(HL)     ; {Pick up ERIC's animatory state in #REGb, and his
 63127 INC L         ; coordinates in #REGde
 63128 LD D,(HL)     ;
 63129 INC L         ;
 63130 LD E,(HL)     ; }
 63131 LD A,87       ; {Set #R32764 (which holds the ASCII code of the last
 63133 LD (32764),A  ; keypress) to 'W' (upper case, so ERIC can write fast)}
 63136 LD H,D        ; {Copy ERIC's coordinates to #REGhl
 63137 LD L,E        ; }
 63138 LD A,B        ; #REGa=ERIC's current animatory state
 63139 AND 128       ; {#REGa=#AS13(#b13 or #b141): ERIC with arm up, as if
 63141 ADD A,13      ; writing}
 63143 JP 25916      ; Raise ERIC's arm

; Deal with ERIC when he's writing on a blackboard
;
; Called from the main loop at #R26471 when bit 5 of ERIC's status flags at
; #R32763 is set (by the routine at #R63056).
;
; A ASCII code of the last keypress
; HL #R32763 (ERIC's status flags)
@label=WRITING
c63146 CP 13         ; Was ENTER pressed?
 63148 JR Z,63188    ; Jump if so
 63150 LD B,A        ; Store the keypress code in #REGb
 63151 LD H,172      ; #b172=ERIC
 63153 CALL 28968    ; {#REGc=#b171 (Reading Room blackboard), #b177 (White
 63156 SUB 179       ; Room blackboard) or #b183 (Exam Room blackboard)
 63158 LD C,A        ;
 63159 ADD A,A       ;
 63160 ADD A,C       ;
 63161 LD C,A        ; }
 63162 LD L,A        ; {Point #REGhl at byte 3 of the relevant blackboard
@ssub=LD H,32512/256
 63163 LD H,127      ; contents buffer)}
 63165 BIT 7,(HL)    ; {Jump if 4 or more characters have been written so far,
 63167 JR Z,63178    ; or the board was dirty before ERIC started writing}
 63169 SUB 4         ; {Point #REGhl at the byte preceding the first byte of
 63171 LD L,A        ; the relevant blackboard contents buffer}
*63172 INC L         ; {Find the next 'open' slot (which will have bit 7 set)
 63173 BIT 7,(HL)    ; in the blackboard contents buffer
 63175 JR Z,63172    ; }
 63177 LD (HL),B     ; Store the keypress code in the blackboard contents
                     ; buffer
*63178 INC C         ; {Restore the keypress code to #REGa; set #REGbc=#R32684
 63179 LD A,B        ; (Reading Room blackboard), #R32690 (White Room
@ssub=LD B,32684/256
 63180 LD B,127      ; blackboard), or #R32696 (Exam Room blackboard) (which
                     ; holds the pixel coordinates at which ERIC should write)}
 63182 CALL 29023    ; Write a single character on the blackboard
 63185 JP 63123      ; Move ERIC's arm
; ERIC has finished writing on the board (ENTER was pressed).
*63188 RES 5,(HL)    ; {Reset bit 5 of ERIC's status flags at #R32763 to
                     ; indicate that ERIC has finished writing on the board}
 63190 RET           ; Return to the main loop

; Make MR CREAK reveal his safe combination letter if appropriate
;
; Used by the routine at #R32132. A teacher is standing at the doorway of a
; classroom, ready to tell the kids to sit down; this routine checks whether
; the teacher is MR CREAK, and if it is, makes him reveal his safe combination
; letter if his birth year has been written on the blackboard by ERIC, and ERIC
; has not yet opened the safe.
;
; H Teacher's character number (#b163-#b166)
; L 122
@label=CREAKLTR
c63191 CALL 63734    ; {Return unless we're dealing with CREAK and ERIC has not
 63194 RET C         ; yet opened the safe}
 63195 CALL 64016    ; {Return unless CREAK is near a blackboard last written
 63198 RET NZ        ; on by ERIC}
 63199 LD A,E        ; {#REGa=#b56 (Reading Room blackboard) or #b58 (White
 63200 SUB 181       ; Room blackboard)}
 63202 PUSH HL       ; Save CREAK's character number
 63203 LD L,A        ; {#REGhl=#R32680 (Reading Room blackboard contents
 63204 ADD A,A       ; buffer) or #R32686 (White Room blackboard contents
 63205 ADD A,L       ; buffer)
@rsub-begin
 63206 NOP           ;
@rsub-end
 63207 LD L,A        ;
 63208 LD H,D        ; }
; Check whether CREAK's birth year has been written on the board.
@ssub=LD E,32667%256
 63209 LD E,155      ; #REGde=#R32667 (which holds CREAK's year of birth)
 63211 LD B,4        ; There are 4 digits in CREAK's year of birth
*63213 LD A,(DE)     ; #REGa=digit from CREAK's year of birth
 63214 INC E         ; Move #REGde along to the next digit
 63215 CP (HL)       ; Compare the digit with the character written on the
                     ; board
 63216 JR NZ,63226   ; Jump if they don't match
 63218 INC L         ; Move to the next character written on the board
 63219 DJNZ 63213    ; Jump back until all 4 digits have been checked
; The first four characters written on the board by ERIC match the digits in MR
; CREAK's year of birth.
 63221 POP HL        ; Restore CREAK's character number (#b166) to #REGh
 63222 PUSH HL       ; Save it again
 63223 CALL 63856    ; Reveal CREAK's safe combination letter
*63226 POP HL        ; Restore CREAK's character number (#b166) to #REGh
 63227 LD BC,61889   ; Set #REGbc to #R61889 (SILENCE! OR I'LL CANE THE LOT OF
                     ; YOU) before returning
 63230 RET           ;

; Get the address of the appropriate 'Go home' message
;
; Used by the routine at #R63964. Returns with the address of the appropriate
; message in #REGbc.
;
; H #b163 (MR WACKER) or #b164 (MR ROCKITT)
@label=GOHOMEMSG
c63231 LD A,H        ; #REGa=character number of the teacher sending ERIC home
 63232 CP 163        ; #b163=MR WACKER
 63234 LD BC,61926   ; #R61926: 'YOU HAVE OVER 10000 LINES...'
 63237 RET Z         ; Return if MR WACKER is sending ERIC home
 63238 LD BC,64150   ; #R64150: 'You have mumps...'
 63241 RET           ;

; Unflash the safe and all the shields
;
; Used by the routines at #R26880 (before starting a new game) and #R63668
; (after ERIC has gone up a year).
@label=UNFLASH
c63242 LD HL,23040   ; {Make anything that is currently flashing on-screen
*63245 RES 7,(HL)    ; (shields or the safe) not flash any more by directly
 63247 DEC HL        ; modifying the attribute file
 63248 LD A,H        ;
 63249 CP 87         ;
 63251 JR NZ,63245   ; }
 63253 LD H,154      ; {Reset bit 7 (i.e. turn off FLASH) of the graphic data
 63255 LD B,13       ; attribute bytes of everything in the skool from the
*63257 LD L,223      ; third row (#REGh=#b154, where the top floor shields are)
*63259 RES 7,(HL)    ; to the 15th row (#REGh=#b166, where the bottom floor
 63261 DEC HL        ; shields are)
 63262 BIT 7,L       ;
 63264 JR NZ,63259   ;
 63266 INC H         ;
 63267 DJNZ 63257    ; }
 63269 RET           ;

; Check whether ERIC has jumped up to the safe or a shield (2)
;
; Continues from #R62750. Checks whether ERIC has jumped up to the safe or a
; shield, and makes it flash or unflash as appropriate.
;
; DE Coordinates of ERIC's hand
@label=CHECKJP2
c63270 LD A,(32746)  ; Pick up the game mode indicator from #R32746
 63273 CP 2          ; Are all the shields flashing?
 63275 JP NZ,28130   ; Jump if not (to check whether ERIC touched a shield)
 63278 LD A,D        ; #REGa=y-coordinate of ERIC's hand
 63279 CP 161        ; This is the y-coordinate of the spot just under the safe
                     ; in the staff room
 63281 RET NZ        ; Return if ERIC is not on the middle floor
 63282 LD A,E        ; #REGa=x-coordinate of ERIC's hand
 63283 CP 10         ; Has ERIC jumped up to the safe?
 63285 RET NZ        ; Return if not
; ERIC has jumped up to the safe. Can he open it?
 63286 LD HL,32749   ; #R32749 holds the number of the character who last
                     ; wrote on the Reading Room blackboard
 63289 LD DE,32680   ; #R32680=Reading Room blackboard contents buffer
 63292 LD C,3        ; There are 3 blackboards
*63294 LD A,(HL)     ; #REGa=number of the character who last wrote on this
                     ; board
 63295 INC HL        ; {Move #REGhl along to the next blackboard
 63296 INC HL        ; }
 63297 CP 172        ; Did ERIC write on this blackboard?
 63299 JR NZ,63322   ; Jump if not
; ERIC wrote on this blackboard. Check whether he wrote the safe combination
; code.
 63301 PUSH HL       ;
@ssub=LD L,32671%256
 63302 LD L,159      ; #REGhl=#R32671 (which holds the safe combination code)
 63304 LD B,4        ; There are 4 characters in the safe combination code
 63306 PUSH DE       ; Save the pointer to the blackboard contents buffer
*63307 LD A,(DE)     ; #REGa=character written on the blackboard by ERIC
 63308 AND 95        ; Convert to upper case
 63310 INC E         ; Move #REGde along to the next character on the
                     ; blackboard
 63311 CP (HL)       ; Does the character on the blackboard match a safe
                     ; combination letter?
 63312 JR NZ,63318   ; Jump if not
 63314 INC L         ; Move to the next letter of the safe combination code
 63315 DJNZ 63307    ; Jump back until all four letters have been checked
 63317 XOR A         ; Set the zero flag to indicate a match
*63318 POP DE        ; Restore the blackboard contents buffer pointer to #REGde
 63319 POP HL        ;
 63320 JR Z,63330    ; Jump if ERIC got the right combination
*63322 LD A,E        ; {Point #REGde at the next blackboard contents buffer
 63323 ADD A,6       ; (#R32686 or #R32692)
 63325 LD E,A        ; }
 63326 DEC C         ; Decrease the blackboard counter
 63327 JR NZ,63294   ; Jump back until all three blackboards have been checked
 63329 RET           ;
; ERIC got the right combination.
*63330 CALL 63668    ; Add 1000 to the score and play a celebratory tune
@keep
 63333 LD HL,41354   ; Point #REGhl at the attribute byte for the safe
 63336 SET 7,(HL)    ; Alter the attribute byte of the safe in the skool
                     ; attribute data to make it flash
 63338 EX DE,HL      ; Point #REGde at the attribute byte for the safe
 63339 CALL 62674    ; Get the attribute file address of the safe in #REGhl
 63342 RET C         ; Return if the safe is off-screen (unlikely!)
 63343 SET 7,(HL)    ; Adjust the on-screen attribute byte of the safe to make
                     ; it flash
 63345 RET           ;

@rsub-begin
; Unused
s63346 DEFS 6
@rsub-end

; Deal with ERIC when he's being spoken to by a little boy
;
; Used by the routine at #R27353 when bit 3 of ERIC's status flags at #R32763
; is set (by the routine at #R63488).
@label=LISTEN
c63352 LD HL,32715   ; #R32715 holds the special playtime signal flags
 63355 BIT 0,(HL)    ; Is the little boy is still delivering the main message?
 63357 RET Z         ; Return if so
 63358 CALL 26426    ; Check the keyboard
 63361 RET Z         ; Return if no game keys were pressed
 63362 OR 32         ; Convert the keypress code to lower case
 63364 CP 117        ; Was 'u' pressed?
 63366 RET NZ        ; Return (to #R27351) if not
 63367 LD HL,32763   ; #R32763 holds ERIC's status flags
 63370 RES 3,(HL)    ; Signal: ERIC's conference with the little boy is over
 63372 RET           ; Return to #R27351

@rsub-begin
; Unused
s63373 DEFB 0
@rsub-end

; Make a character find ERIC
;
; Used by command lists #R64230(#b208), #R64240(#b210), #R64288(#b214),
; #R64341(#b218) and #R64219(#b222) to make little boy no. 10, MR WACKER or MR
; ROCKITT track down ERIC (to deliver a message).
;
; H Character number (#b161, #b163, #b164)
@label=FINDERIC
c63374 LD A,255      ; {Adjust the length of the lesson to allow the character
 63376 CALL 64004    ; enough time to find ERIC}
; This routine places #R63390 into bytes #b111 and #b112 of the character's
; buffer, but also uses byte #b105 (which normally holds the LSB of a routine
; address) for coordination. When byte #b105 holds #b160 (the LSB of the
; routine at #R31648), ERIC's coordinates are compared with those of the
; character looking for him, and the decision is made whether to keep moving.
; If the character does need to keep moving, #R31711 is called, which either
; (a) turns the character round, or (b) puts the character midstride, and
; places #b251 (the LSB of the routine at #R31739) into byte #b105. When byte
; #b105 holds #b251, this routine jumps to #R31739 to move the character from
; the midstride position, and set byte #b105 back to #b160.
 63379 LD L,105      ; {Initialise byte #b105 to #b160, so on this first pass
@ssub=LD (HL),31648%256
 63381 LD (HL),160   ; we compare ERIC's location with that of his chaser}
 63383 LD L,111      ; {Place #R63390 into bytes #b111 and #b112 of the
@ssub=LD (HL),63390%256
 63385 LD (HL),158   ; character's buffer (thus setting the character's
 63387 INC L         ; uninterruptible subcommand)
@ssub=LD (HL),63390/256
 63388 LD (HL),247   ; }
; Subsequent calls to this routine will enter at this point, by virtue of its
; address being placed into bytes #b111 and #b112 of the character's buffer.
@label=LOOKING
 63390 LD A,H        ; #REGa=number of the character looking for ERIC
@rfix+begin
       LD (32759+1),A ; Set the MSB of the lesson clock to a high number to
                      ; ensure that the bell doesn't ring before this routine
                      ; exits
@rfix+end
 63391 CP 163        ; Is MR WACKER looking for ERIC?
 63393 CALL Z,32234  ; If so, make him walk fast
 63396 LD L,105      ; {Is the character midstride?
 63398 LD A,(HL)     ;
@ssub=CP 31739%256
 63399 CP 251        ; }
 63401 JP Z,31739    ; Finish the stride if so
; The character looking for ERIC is not midstride at the moment. Decide which
; way (if any) he should go to find ERIC.
 63404 CALL 31229    ; Get ERIC's coordinates in #REGde
 63407 LD L,97       ; Byte #b97 of the character's buffer holds his
                     ; y-coordinate
 63409 LD A,(HL)     ; Pick this up in #REGa
 63410 CP D          ; Set the zero flag if ERIC is on same floor
 63411 CALL 63973    ; Compare this character's coordinates with ERIC's
 63414 JR NZ,63444   ; Jump if this character is on a staircase or more than 3
                     ; y-coordinates away from ERIC
 63416 INC L         ; #REGl=#b98
 63417 LD A,(HL)     ; #REGa=character's x-coordinate
 63418 SUB E         ; Does it match ERIC's x-coordinate?
 63419 JR NZ,63436   ; Jump if not
; The character looking for ERIC is within 3 x-coordinates and 3 y-coordinates
; of ERIC's location, and is not on a staircase. In other words, ERIC has been
; found.
*63421 LD A,(32763)  ; {Check ERIC's status flags at #R32763, and return if
 63424 AND 127       ; ERIC is firing, hitting, jumping, being spoken to by a
 63426 RET NZ        ; little boy, knocked out, or writing on a blackboard}
 63427 LD L,112      ; {Remove the address of the entry point at #R63390 from
 63429 LD (HL),A     ; bytes #b111 and #b112 of the character's buffer}
 63430 LD L,106      ; {Remove any interruptible subcommand routine address
 63432 LD (HL),A     ; from bytes #b105 and #b106 of the character's buffer}
 63433 JP 25256      ; Move to the next command in the command list
; The character looking for ERIC is within 3 y-coordinates of ERIC's location,
; but not at the same x-coordinate. Is he close enough, though?
*63436 JR NC,63440   ; Jump if the character is to the right of ERIC
 63438 NEG           ; Get the absolute x-coordinate distance between the
                     ; character and ERIC
*63440 CP 4          ; Is ERIC less than 4 x-coordinates away?
 63442 JR C,63421    ; Jump if so (that's close enough)
; The character has not yet found ERIC.
*63444 CALL 31452    ; Determine this character's next move
 63447 JP 31711      ; Set him off in the appropriate direction

@rsub-begin
; Unused
;
; Code remnants.
u63450 CALL 63668    ; Adjust the status of the shields and the safe
 63453 JP 25256      ; Move to the next command in the command list
@rsub-end

; Make MR WACKER give ERIC 2000 lines
;
; Used by command lists #R64288(#b214) (after EINSTEIN has told MR WACKER what
; ERIC's up to) and #R64341(#b218) (after MR WACKER has found the pea-shooter
; on the fire escape).
;
; H #b163 (MR WACKER)
@label=LINES2K
c63456 LD BC,56832   ; #R56832: 'TAKE 2000 LINES YOU NASTY BOY'
 63459 CALL 32038    ; Make MR WACKER say this
 63462 LD HL,(32710) ; {Add 2000 lines to ERIC's total (stored at #R32710)
 63465 LD DE,200     ;
 63468 ADD HL,DE     ;
 63469 LD (32710),HL ; }
 63472 LD DE,20956   ; {Print the new lines total
 63475 CALL 30408    ; }
 63478 LD A,1        ; {Set the MSB of the lesson clock to 1 so that the lesson
@ssub=LD (32759+1),A
 63480 LD (32760),A  ; will end soon}
 63483 JP 25256      ; Move to the next command in MR WACKER's command list

@rsub-begin
; Unused
s63486 DEFS 2
@rsub-end

; Make little boy no. 10 give ERIC a message
;
; Used by command lists #R64230(#b208) and #R64240(#b210). Makes little boy no.
; 10 tell ERIC about BOY WANDER having hidden a pea-shooter on the fire escape,
; EINSTEIN's intent to grass him up to MR WACKER, or ANGELFACE's medical
; condition.
;
; H #b161 (little boy no. 10)
@label=TELLERIC
c63488 LD A,(32763)  ; {Set bit 3 of ERIC's status flags at #R32763, indicating
 63491 SET 3,A       ; that ERIC is being spoken to
 63493 LD (32763),A  ; }
*63496 LD A,255      ; {Adjust the MSB of the lesson clock so that the lesson
@ssub=LD (32759+1),A
 63498 LD (32760),A  ; will not end until the drama has played out}
; Figure out which message the boy should deliver, depending on what MR ROCKITT
; and MR WACKER are up to.
@ssub=LD A,(42080+24)
 63501 LD A,(42104)  ; Collect byte #b120 of MR ROCKITT's buffer, which holds
                     ; the MSB of the command list start address
@ssub=CP 64219/256
 63504 CP 250        ; This is the MSB of #R64219 (command list #R64219(#b222))
 63506 LD BC,65280   ; #REGbc=#R65280: 'Don't let ANGELFACE touch you...'
 63509 JR Z,63522    ; Jump if MR ROCKITT is using command list #R64219(#b222)
@ssub=LD C,65333%256
@rsub=LD BC,65333
 63511 LD C,53       ; #REGbc=#R65333: 'EINSTEIN is going to tell MR WACKER...'
@ssub=LD A,(41824+21)
 63513 LD A,(41845)  ; Collect byte #b117 of MR WACKER's buffer, which holds
                     ; the LSB of the address reached in the command list
@ssub=CP +(64314+2)%256
 63516 CP 60         ; Is MR WACKER using command list #R64314(#b216)?
 63518 JR C,63522    ; Jump if not (he must be using command list
                     ; #R64288(#b214))
@ssub=LD C,65423%256
@rsub=LD BC,65423
 63520 LD C,143      ; #REGbc=#R65423: 'BOY WANDER has hidden a pea-shooter...'
; Now #REGbc holds the address of the message to be delivered.
*63522 CALL 32038    ; Make the little boy deliver his message
 63525 LD L,104      ; {Initialise the message repetition delay counter in byte
 63527 LD (HL),40    ; #b104 of the little boy's buffer to 40}
 63529 LD BC,60640   ; #R60640: 'Press 'U' if you understood'
 63532 LD A,(32715)  ; {Set bit 0 at #R32715, indicating that the little boy is
 63535 SET 0,A       ; now waiting for acknowledgment from ERIC
 63537 LD (32715),A  ; }
 63540 CALL 32038    ; Make the little boy say 'Press 'U' if you understood'
 63543 LD A,(32763)  ; Collect ERIC's status flags from #R32763
 63546 BIT 3,A       ; Has 'U' been pressed yet?
 63548 JR NZ,63558   ; Jump if not
; ERIC has acknowledged delivery of the message ('U' was pressed).
 63550 LD A,12       ; {Set the MSB of the lesson clock to #b12, giving enough
@ssub=LD (32759+1),A
 63552 LD (32760),A  ; time for the ensuing drama to play out}
 63555 JP 25256      ; Move to the next command in little boy no. 10's command
                     ; list
; ERIC has not yet acknowledged delivery of the message ('U' has not been
; pressed).
*63558 LD L,104      ; {Decrement the message repetition delay counter in byte
 63560 DEC (HL)      ; #b104 of the little boy's buffer and return unless it
 63561 RET NZ        ; has reached 0}
 63562 LD A,(32715)  ; {Reset bit 0 at #R32715, indicating that the little boy
 63565 RES 0,A       ; is no longer waiting for acknowledgment from ERIC
 63567 LD (32715),A  ; (because he's going to repeat the message first)}
 63570 JP 63496      ; Deliver the message to ERIC once again

; Generate a safe combination code and set MR CREAK's birth year
;
; Used by the routine at #R63668. Generates a new safe combination code, sets a
; new random birth year for MR CREAK, and adjusts the game mode (so that all
; the shields need to be flashed again).
;
; A #b0
@label=GENCOMBO
@ssub=LD HL,32671+25
c63573 LD HL,32696   ; {Clear the safe combination code (stored at #R32671),
 63576 LD B,25       ; the teachers' combination letters (stored at #R32675),
*63578 LD (HL),A     ; and the blackboard contents buffers (at #R32680, #R32686
 63579 DEC L         ; and #R32692)
 63580 DJNZ 63578    ; }
 63582 LD D,A        ; {#REGde=#w0
 63583 LD E,A        ; }
 63584 LD C,4        ; There are four letters in the combination
 63586 CALL 24993    ; #REGa=random number
 63589 AND 15        ; #b0<=#REGa<=#b15
 63591 JR 63612      ; Store MR WACKER's safe combination letter first (at
                     ; #R32671)
@ssub=LD L,32671%256
*63593 LD L,159      ; #REGhl=#R32671 (first letter of the safe combination
                     ; code)
 63595 ADD HL,BC     ; #REGhl=#R32671+#REGc (1<=#REGc<=3)
*63596 CALL 24993    ; #REGa=random number
 63599 LD E,B        ; #REGe=0
 63600 RRCA          ; {Get a random number between 0 and 3 in #REGe
 63601 RL E          ;
 63603 RRCA          ;
 63604 RL E          ; }
 63606 AND 31        ; {Is #REGa between #b0 and #b25?
 63608 CP 26         ; }
 63610 JR NC,63596   ; Jump back if not
*63612 ADD A,65      ; #REGa=ASCII code of an upper case letter
 63614 LD (HL),A     ; Store this in one of the slots at #R32671
@ssub=LD L,32675%256
 63615 LD L,163      ; {Point #REGhl at a random teacher's safe combination
 63617 ADD HL,DE     ; letter}
 63618 BIT 6,(HL)    ; Has this letter already been decided?
 63620 JR NZ,63593   ; Jump if so
 63622 LD (HL),A     ; Store the ASCII code in one of the four slots at #R32675
 63623 DEC C         ; Next combination letter
 63624 JR NZ,63593   ; Jump back until all four combination letters are done
; The safe combination code has been generated. Now for MR CREAK's birth year.
@ssub=LD L,32666%256
 63626 LD L,154      ; #REGhl=#R32666 (which holds the identifier for CREAK's
                     ; birth year battle)
*63628 CALL 24993    ; {Get a random number between #b0 and #b20 in #REGa
 63631 CP 21         ;
 63633 JR NC,63628   ; }
 63635 ADD A,A       ; {#REGa=random odd number between #b213 and #b253
 63636 ADD A,213     ; }
 63638 LD (HL),A     ; Store this battle identifier at #R32666
 63639 SUB 129       ; {Set #REGhl to the address of the battle year message
 63641 LD E,A        ; corresponding to this battle identifier
 63642 LD H,D        ;
 63643 LD L,D        ;
 63644 ADD HL,DE     ;
 63645 ADD HL,DE     ;
 63646 ADD HL,DE     ;
 63647 ADD HL,HL     ;
 63648 ADD HL,HL     ;
 63649 LD A,H        ;
 63650 ADD A,223     ;
 63652 LD H,A        ; }
 63653 LD DE,32667   ; {Store the digits of CREAK's birth year at #R32667
 63656 LD C,4        ;
 63658 LDIR          ; }
; Finally, adjust the game mode.
 63660 LD A,1        ; {Set the game mode indicator at #R32746 to 1, indicating
 63662 LD (32746),A  ; that the shields need to be flashed}
 63665 RET           ;

@rsub-begin
; Unused
s63666 DEFS 2
@rsub-end

; Adjust the game mode
;
; Used by the routines at #R26880 (to prepare the shields and safe for a new
; game), #R28143 (when the last shield has just been flashed or unflashed) and
; #R63270 (when ERIC has opened the safe).
@label=NEXTPHASE
c63668 PUSH HL       ;
 63669 LD HL,32747   ; #R32747 holds the shield counter
 63672 LD (HL),15    ; Restore the shield counter to 15
 63674 DEC L         ; #REGhl=#R32746 (game mode indicator)
 63675 INC (HL)      ; {#REGa=1 if the game has just started, 2 if the 15th
 63676 LD A,(HL)     ; shield was just flashed, 3 if the safe was just opened,
                     ; or 4 if the 15th shield was just unflashed}
 63677 LD HL,(32708) ; #REGhl=score
 63680 CP 4          ; Was the 15th shield just unflashed?
 63682 JR NZ,63704   ; Jump if not
; ERIC has just hit the 15th shield and made it unflash.
 63684 LD DE,500     ; {Add 5000 to the score and print it
 63687 ADD HL,DE     ;
 63688 CALL 62705    ; }
 63691 LD HL,65248   ; #R65248='WELL DONE! GO UP A YEAR'
 63694 CALL 63919    ; Print this in the lesson box
 63697 LD A,12       ; {Set the MSB of the lesson clock to #b12
@ssub=LD (32759+1),A
 63699 LD (32760),A  ; }
 63702 LD A,1        ; Ensure that the '#S/DEC A/' below sets the zero flag
*63704 DEC A         ; Was the 15th shield just flashed or the safe just
                     ; opened?
 63705 JR NZ,63718   ; Jump if so
; Either the game has just started, or the 15th shield was just unflashed.
 63707 CALL 63573    ; Generate a new safe combination code, and a new random
                     ; birth year for MR CREAK
 63710 CALL 63242    ; Unflash the safe and all the shields
 63713 CALL 32400    ; Play the theme tune
 63716 POP HL        ;
 63717 RET           ;
; ERIC has just hit the 15th shield and made it flash (#REGa=1), or just opened
; the safe (#REGa=2).
*63718 LD DE,100     ; {Add 1000 to the score
 63721 ADD HL,DE     ; }
 63722 DEC A         ; Was the safe just opened?
 63723 JR NZ,63726   ; Jump if so
 63725 ADD HL,DE     ; Add 1000 more to the score if the 15th shield was hit
*63726 CALL 62705    ; Print the new score
 63729 CALL 32406    ; Play the 'Got all the shields' tune
 63732 POP HL        ;
 63733 RET           ;

; Check whether MR CREAK can reveal his safe combination letter
;
; Used by the routine at #R63191. Returns with the carry flag reset if we're
; dealing with MR CREAK and ERIC has not yet opened the safe.
;
; H Teacher's character number (#b163-#b166)
@label=CHKCREAK
c63734 LD BC,61889   ; Prepare #REGbc (#R61889='SILENCE! OR I'LL CANE THE LOT
                     ; OF YOU') before returning
 63737 LD A,H        ; #REGa=teacher's character number
 63738 CP 166        ; {Return with the carry flag set if it's not MR CREAK
 63740 RET C         ; (#b166)}
 63741 LD A,(32746)  ; Collect the game mode indicator from #R32746
 63744 DEC A         ; {Set the carry flag if it's demo mode or ERIC has
 63745 CP 2          ; already opened the safe
 63747 CCF           ; }
 63748 RET           ;

; Collect the identifier for the next lesson
;
; Used by the routine at #R26342. Returns with #REGa holding the identifier
; (#b224-#b255) for the next lesson. If the next lesson is PLAYTIME, one of the
; 'special' PLAYTIMEs (#LESSON243, #LESSON244 or #LESSON245) may be chosen in
; place of the main timetable entry.
;
; E Lesson number (#b0-#b63)
@label=GETLESSON
@ssub=LD D,65024/256
c63749 LD D,254      ; {Pick up the lesson identifier (#b224-#b255) from the
 63751 LD A,(DE)     ; #R65024(main timetable)}
 63752 CP 243        ; Is it PLAYTIME (#b243-#b255)?
 63754 RET C         ; Return if not
 63755 LD A,(32746)  ; #R32746 holds the game mode indicator
 63758 AND A         ; Set the zero flag if we're in demo mode
 63759 LD A,(DE)     ; {Restore the lesson identifier to #REGa and return if
 63760 RET Z         ; we're in demo mode}
 63761 CALL 24993    ; #REGa=random number
 63764 JP 28211      ; Select a 'special' PLAYTIME occasionally

@rsub-begin
; Unused
u63767 RET
@rsub-end

; Scroll the skool into view and enter the main loop
;
; Used by the routine at #R26880.
@label=SCRLSKOOL
c63768 LD C,4        ; {Scroll the skool into view
*63770 CALL 25820    ;
 63773 DEC C         ;
 63774 JR NZ,63770   ; }
 63776 JP 26471      ; Enter the main loop

; Make MR CREAK ask the birth year question if appropriate
;
; Used by the routine at #R31282. Makes MR CREAK ask the birth year question if
; (a) he hasn't asked it yet this lesson, and (b) ERIC hasn't opened the safe
; yet.
;
; A 0 (MR ROCKITT), 1 (MR WITHIT), or 2 (MR CREAK)
@label=BIRTHQ
c63779 LD B,A        ; Save the teacher identifier in #REGb for now
 63780 LD HL,31258   ; Point #REGhl at MR ROCKITT's question/answer data table
                     ; (ready for the return to the calling routine)
 63783 CP 2          ; Are we dealing with MR CREAK?
 63785 JR Z,63790    ; Jump if so
*63787 LD A,B        ; Restore the teacher identifier (0-2) to #REGa
 63788 AND A         ; Set the zero flag if we're dealing with MR ROCKITT
 63789 RET           ;
; We're dealing with MR CREAK, so we need to determine whether he should ask
; the birth year question.
*63790 LD A,(32746)  ; Collect the game mode indicator from #R32746
 63793 CP 3          ; Has ERIC already opened the safe?
 63795 JR NC,63787   ; Jump if so
 63797 AND A         ; Are we in demo mode?
 63798 JR Z,63787    ; Jump if so
 63800 LD A,(32730)  ; {Has MR CREAK already asked the birth year question this
 63803 AND A         ; lesson?}
 63804 JR NZ,63787   ; Jump if so
; MR CREAK hasn't asked the birth year question yet. Make him do so now.
 63806 POP DE        ; Drop the return address from the stack; we'll be
                     ; re-entering the calling routine at a different point
 63807 INC A         ; {Set #R32730 to 1, indicating that MR CREAK has asked
 63808 LD (32730),A  ; the birth year question this period}
 63811 LD A,(32666)  ; {Copy the identifier of CREAK's birth year battle into
@ssub=LD (61665+22),A
 63814 LD (61687),A  ; the 'Q' spot in 'It was the BATTLE OF Q'}
 63817 LD HL,61665   ; #R61665: '{Please Sir - I cannot tell a lie . . }It was
                     ; the BATTLE OF Q'
@ssub=LD (43360+11),HL
 63820 LD (43371),HL ; Place this message address into bytes #b107 and #b108 of
                     ; EINSTEIN's buffer
 63823 LD DE,61741   ; #R61741='WHAT HAPPENED IN THE YEAR THAT I WAS BORN'
 63826 JP 31433      ; Re-enter the calling routine to make MR CREAK ask the
                     ; birth year question

; Make a stricken teacher give lines or reveal his safe combination letter
;
; Used by the routine at #R27206. If the character who has been knocked over is
; a teacher, this routine makes him reveal his safe combination letter (if all
; the shields are flashing but the safe has not been opened yet) and give lines
; to the nearest main kid (if any are close enough).
;
; A Knockout delay counter (#b1-#b18)
; H Character number (#b152-#b169)
@label=LINESLTR
c63829 CP 18         ; Is it time to reveal a safe combination letter?
 63831 JR Z,63840    ; Jump if so
 63833 CP 9          ; Is it time to give lines to the nearest main kid?
 63835 RET NZ        ; Return if not
 63836 POP BC        ;
 63837 JP 27196      ; Give lines to the nearest main kid if we're dealing with
                     ; a teacher
; It's time to reveal a safe combination letter (if all shields are flashing).
*63840 LD A,(32746)  ; Collect the game mode indicator from #R32746
 63843 CP 2          ; Set the zero flag if all the shields are flashing but
                     ; the safe has not been opened
 63845 LD A,18       ; Restore the knockout delay counter to #REGa
 63847 RET NZ        ; Return unless all the shields are flashing
 63848 LD A,H        ; {Return unless we are dealing with a teacher
 63849 CP 163        ;
 63851 RET C         ;
 63852 CP 166        ;
 63854 RET NC        ; }
 63855 POP BC        ;
; This entry point is used by the routine at #R63191 to make MR CREAK reveal
; his safe combination letter after seeing his year of birth written on a
; blackboard.
*63856 LD L,97       ; {Pick up the character's coordinates in #REGde
 63858 LD D,(HL)     ;
 63859 INC L         ;
 63860 LD E,(HL)     ; }
 63861 LD L,H        ; {Pick up the teacher's safe combination letter in #REGa
 63862 LD H,127      ;
 63864 LD A,(HL)     ; }
@ssub=LD L,32662%256
 63865 LD L,150      ; {Place this in #R32662
 63867 LD (HL),A     ; }
 63868 CALL 29871    ; Save the area of the screen that will be overwritten by
                     ; the bubble
 63871 RET C         ; Return if the character is off-screen
 63872 PUSH DE       ;
 63873 LD DE,60464   ; Point #REGde at the graphic data portion of the safe
                     ; combination letter bubble graphic buffer at #R60416
 63876 LD HL,55945   ; #R55945: ' ' (single space)
 63879 CALL 30245    ; Write this into the first line of the graphic buffer
 63882 LD DE,60528   ; {Write the teacher's safe combination letter into the
 63885 LD HL,32662   ; second line of the graphic buffer
 63888 CALL 30245    ; }
 63891 LD HL,60440   ; {Set the attribute bytes in the graphic buffer - INK 7:
*63894 DEC L         ; PAPER 0
 63895 LD (HL),7     ;
 63897 JR NZ,63894   ; }
 63899 POP DE        ; {Restore the attribute file address of the top left
 63900 PUSH DE       ; corner of the bubble to #REGde and save it again}
 63901 CALL 29977    ; Display the combination letter in a bubble
 63904 XOR A         ; #REGa=0 (black border for the sound effect)
 63905 JP 30575      ; Make a sound effect and remove the bubble

@rsub-begin
; Unused
s63908 DEFB 0
@rsub-end

; Print the lesson
;
; Used by the routine at #R26342. Prints the lesson or 'DEMO. - PRESS A KEY TO
; PLAY' in the lesson box.
@label=PRINTBOX
c63909 LD A,(32746)  ; Collect the game mode indicator from #R32746
 63912 AND A         ; Are we in demo mode?
 63913 JP NZ,31040   ; Jump if not
 63916 LD HL,60384   ; #R60384: 'DEMO. - PRESS A KEY TO PLAY'
; This entry point is used by the routine at #R63668 with #REGhl=#R65248 ('WELL
; DONE! GO UP A YEAR').
@rsub+begin
       PUSH HL
@rsub+end
@ssub=LD DE,60672+48
@nowarn
*63919 LD DE,60720   ; Point #REGde at the lesson box graphic buffer
 63922 CALL 30042    ; Write the first line of text into the lesson box graphic
                     ; buffer
@rsub+begin
       POP HL
@rsub+end
@ssub=LD L,60400%256
@rsub=LD C,16
 63925 LD L,240      ; #REGhl=#R60400 ('A KEY TO PLAY') or #R65264 ('UP A
                     ; YEAR')
@rsub+begin
       ADD HL,BC
@rsub+end
 63927 JP 31093      ; Write the second line of text into the lesson box
                     ; graphic buffer and copy the buffer to the screen

@rsub-begin
; Unused
s63930 DEFB 0
@rsub-end

; Check whether ERIC has 10000 lines
;
; Used by the routine at #R30457. The number of lines has just been printed.
; Has ERIC gone over the limit?
@label=CHKLINES
@ssub=LD A,(32710+1)
c63931 LD A,(32711)  ; Collect the MSB of the lines total
 63934 CP 3          ; Is the lines total < 7680 (30*256)?
 63936 RET C         ; Return if so
 63937 JR NZ,63945   ; Jump if the MSB > 3 (lines total > 10240)
 63939 LD A,(32710)  ; So the MSB is 3; collect the LSB from #R32710
 63942 CP 232        ; Is the lines total < 10000 (=232+256*30)?
 63944 RET C         ; Return if so
; ERIC has 10000 lines or more. The end (of the game) is nigh.
*63945 PUSH HL       ;
@ssub=LD HL,64219+7
@nowarn
 63946 LD HL,64226   ; Point #REGhl at the first of the last two commands in
                     ; command list #R64219(#b222) ('Find ERIC', and 'Send ERIC
                     ; home')
@ssub=LD (41824+23),HL
 63949 LD (41847),HL ; Place this address into bytes #b119 and #b120 of MR
                     ; WACKER's buffer, so that these commands become his
                     ; command list
@ssub=LD HL,41824+26
 63952 LD HL,41850   ; {Set bit 0 of byte #b122 of MR WACKER's buffer,
 63955 SET 0,(HL)    ; triggering a command list restart}
@ssub=LD HL,32759+1
 63957 LD HL,32760   ; {Set the MSB of the lesson clock to #b255 (so that the
 63960 LD (HL),255   ; lesson cannot end before MR WACKER has begun looking for
                     ; ERIC)}
 63962 POP HL        ;
 63963 RET           ;

; Make a teacher tell ERIC to go home, and end the game (1)
;
; Used by command list #R64219(#b222).
;
; H #b163 (MR WACKER) or #b164 (MR ROCKITT)
@label=SENDHOME
c63964 CALL 63231    ; Get the address of the appropriate 'Go home' message in
                     ; #REGbc (depending on who the teacher is)
 63967 LD A,201      ; #b201=#S/RET/
 63969 JP 63990      ;

@rsub-begin
; Unused
s63972 DEFB 0
@rsub-end

; Compare a character's coordinates with ERIC's
;
; Used by the routine at #R63374. On entry, the zero flag is set if ERIC's
; y-coordinate matches that of the character looking for him. On exit, the zero
; flag is set if the character looking for ERIC is within 3 y-coordinates of
; ERIC's location and not on a staircase (in which case the routine at #R63374
; checks whether the character is also within 3 x-coordinates of ERIC's
; location, i.e. has found ERIC).
;
; A Character's y-coordinate
; D ERIC's y-coordinate
; H Character number (#b161, #b163, #b164)
; L #b97
@label=CPERICLOC
c63973 JR Z,63986    ; Jump if ERIC and his chaser are on the same floor
 63975 SUB D         ; {#REGa=absolute difference between the y-coordinates of
 63976 JR NC,63980   ; ERIC and his chaser
 63978 NEG           ; }
*63980 CP 4          ; Are ERIC and his chaser within 3 y-coordinates of each
                     ; other?
 63982 JR C,63986    ; Jump if so
 63984 AND A         ; Reset the zero flag (ERIC has not been found)
 63985 RET           ;
*63986 LD A,(HL)     ; #REGa=y-coordinate of the character looking for ERIC
 63987 JP 26185      ; Set the zero flag set if the character is not on a
                     ; staircase

; Make a teacher tell ERIC to go home, and end the game (2)
;
; Continues from #R63964.
;
; A #b201 (#S/RET/)
; BC 'Go home' message address (#R61926 or #R64150)
; H #b163 (MR WACKER) or #b164 (MR ROCKITT)
@label=SENDHOME2
@nowarn
c63990 LD (30464),A  ; Block the routine at #R30464 with a #S/RET/ instruction
                     ; to prevent the teachers from giving ERIC (or anyone
                     ; else) lines
 63993 CALL 32038    ; Deliver the 'Go home' message to ERIC
 63996 LD A,197      ; #b197=#S/PUSH BC/
@nowarn
 63998 LD (30464),A  ; Restore the #S/PUSH BC/ instruction at #R30464
 64001 JP 26888      ; Restart the game

; Adjust the lesson length and prepare a character for the search for ERIC
;
; Used by the routine at #R63374. Before little boy no. 10, MR WACKER or MR
; ROCKITT goes off to look for ERIC (to deliver a message), the skool clock is
; adjusted to allow ERIC's chaser enough time to find him before the bell
; rings.
;
; A #b255
; H Character number (#b161, #b163, #b164)
@label=PRECHASE
@ssub=LD (32759+1),A
c64004 LD (32760),A  ; Set the MSB of the lesson clock to #b255 (so that the
                     ; character looking for ERIC will have time to find him
                     ; before the bell rings)
 64007 CALL 25108    ; Update the SRB for the character's current animatory
                     ; state
 64010 LD L,96       ; Byte #b96 of the character's buffer holds his animatory
                     ; state
 64012 AND 250       ; {Adjust the character's animatory state to ensure that
 64014 LD (HL),A     ; he is not midstride}
 64015 RET           ;

; Check whether MR CREAK is near a blackboard last written on by ERIC
;
; Used by the routine at #R63191. Returns with the zero flag set if MR CREAK is
; near a blackboard that was last written on by ERIC.
;
; H #b166 (MR CREAK)
@label=NRBOARD
c64016 CALL 28968    ; #REGa=identifier of the blackboard nearest to CREAK
 64019 CP 236        ; Is CREAK on the top floor?
 64021 JR NZ,64027   ; Jump if not
 64023 INC L         ; #REGl=#b98 (which byte holds CREAK's x-coordinate)
 64024 BIT 6,(HL)    ; {Return with the zero flag reset if CREAK's x-coordinate
 64026 RET NZ        ; is >= 64, i.e. he's standing at the doorway of the
                     ; (blackboardless) Map Room (which never happens, because
                     ; CREAK never teaches in that room)}
*64027 INC A         ; {#REGde=#R32749 (Reading Room blackboard) or #R32751
 64028 LD E,A        ; (White Room blackboard)
@ssub=LD D,32749/256
 64029 LD D,127      ; }
 64031 LD A,(DE)     ; #REGa=number of the character who last wrote on this
                     ; board
 64032 CP 172        ; Set the zero flag if it was ERIC
 64034 RET           ;

; Restart command list #b220
;
; Used by command list #R64255(#b220), which controls ANGELFACE when he has
; mumps.
;
; H #b168 (ANGELFACE)
@label=RST220
c64035 LD L,117      ; {Place #R64257 into bytes #b117 and #b118 of ANGELFACE's
@ssub=LD (HL),+(64255+2)%256
 64037 LD (HL),1     ; buffer
@rsub+begin
       INC L
       LD (HL),+(64255+2)/256
@rsub+end
                     ; }
@rsub=JP 31838
 64039 JP 31834      ; Pick up the continual subcommand routine address
                     ; (#R64042: check whether ANGELFACE is touching ERIC) from
                     ; that point in command list #R64255(#b220), place it into
                     ; bytes #b124 and #b125 of ANGELFACE's buffer, and then
                     ; move to the next command (#R27111: go to a random
                     ; location)

; Check whether ANGELFACE is touching ERIC
;
; The address of this continual subcommand routine is placed into bytes #b124
; and #b125 of ANGELFACE's buffer by command list #R64255(#b220). It checks
; whether ERIC and ANGELFACE are in the same location; if they are, and ERIC
; has already been informed of ANGELFACE's medical condition, bit 5 at #R32715
; is set, indicating that ERIC has mumps (whereupon MR ROCKITT will come
; looking for ERIC to send him home).
;
; H #b168 (ANGELFACE)
@label=CHKTOUCH
c64042 LD A,(32715)  ; #R32715 holds the special playtime signal flags
 64045 BIT 4,A       ; Has ERIC been told (and understood) that ANGELFACE has
                     ; mumps?
 64047 RET Z         ; Return if not
 64048 CALL 32234    ; Make ANGELFACE walk fast
@ssub=LD A,(44128+2)
 64051 LD A,(44130)  ; #REGa=ERIC's x-coordinate
 64054 LD L,98       ; Byte #b98 of ANGELFACE's buffer holds his x-coordinate
 64056 CP (HL)       ; Compare ERIC's and ANGELFACE's x-coordinates
 64057 RET NZ        ; Return if they do not match
@ssub=LD A,(44128+1)
 64058 LD A,(44129)  ; #REGa=ERIC's y-coordinate
 64061 DEC L         ; #REGl=#b97 (which byte holds ANGELFACE's y-coordinate)
 64062 CP (HL)       ; Compare ERIC's and ANGELFACE's y-coordinates
 64063 RET NZ        ; Return if they do not match
; ERIC and ANGELFACE are in the same location, thus facilitating transmission
; of the latter's pestilence to the former.
 64064 LD A,(32715)  ; {Set bit 5 at #R32715, indicating that ERIC has mumps
 64067 SET 5,A       ;
 64069 LD (32715),A  ; }
 64072 RET           ;

; Ask whether the characters' names should be changed
;
; Used by the routine at #R60896. Prints 'Do you want to put in your own names
; Y/N?', waits for 'y' or 'n' to be pressed, and responds accordingly.
@label=ASKNAMES
c64073 LD DE,16448   ; Set #REGde to the appropriate display file address
 64076 LD HL,64108   ; #R64108: 'Do you want to put in your own names Y/N?'
 64079 PUSH DE       ; Save the display file address
 64080 CALL 45032    ; Print this message
 64083 POP DE        ; Restore the display file address to #REGde
*64084 LD HL,23611   ; This is the system variable FLAGS
 64087 RES 5,(HL)    ; Signal: no key pressed yet
*64089 CALL 26429    ; {Wait for a keypress; collect its ASCII code in #REGa
 64092 JR Z,64089    ; }
 64094 OR 32         ; Convert the ASCII code to lower case
 64096 CP 121        ; Was 'y' pressed?
 64098 JP Z,26784    ; Jump if so
 64101 CP 110        ; Was 'n' pressed?
 64103 JR NZ,64084   ; Jump back to collect another keypress if not
 64105 POP HL        ; Drop the return address (#R60922)
 64106 RET           ; Return to #R26909

@rsub-begin
; Unused
s64107 DEFB 0
@rsub-end

@org
; 'Do you want to put in your own names Y/N?'
;
; Used by the routine at #R64073.
@label=M_OWNNAMES
t64108 DEFM "Do you want to put in your own names Y/N?"
 64149 DEFB 0 ; End marker

; 'You have mumps {ERIC}. Go home at once. This game is over{8 spaces}'
;
; Used by the routine at #R63231.
@label=M_HAVEMUMPS
t64150 DEFM "You have mumps "
 64165 DEFB 16 ; #R55680: 'ERIC'
 64166 DEFM ". Go home at once. This game is over"
 64202 DEFB 3  ; #R55830: '#SPACE8' (8 spaces)

; Unused
s64203 DEFS 16

; Command list #b222: Mumps duty
;
; Used only by MR ROCKITT in lesson #LESSON243. The last two commands in this
; list (find ERIC and send him home) are also used by MR WACKER when ERIC has
; accumulated 10000 or more lines (see #R63931).
@label=CLIST222
b64219 DEFW 25534  ; Go to...
 64221 DEFB 162,9  ; ...the staff room
 64223 DEFW 25303  ; Move about until...
 64225 DEFB 29     ; ...ERIC has mumps
 64226 DEFW 63374  ; Find ERIC
 64228 DEFW 63964  ; Tell ERIC to go home and end the game

; Command list #b208: Tell ERIC about EINSTEIN or BOY WANDER
;
; Used only by little boy no. 10 in lessons #LESSON244 and #LESSON245.
@label=CLIST208
b64230 DEFW 25534  ; Go to...
 64232 DEFB 169,94 ; ...the gym
 64234 DEFW 25303  ; Move about until...
 64236 DEFB 26     ; ...EINSTEIN or BOY WANDER is ready
 64237 DEFW 25303  ; Move about until...
 64239 DEFB 27     ; ...MR WACKER is ready
; This command list continues at #R64240.

; Command list #b210: Tell ERIC about ANGELFACE
;
; Used only by little boy no. 10 in lesson #LESSON243. Command list
; #R64230(#b208) also continues here.
@label=CLIST210
b64240 DEFW 63374  ; Find ERIC
 64242 DEFW 63488  ; Tell ERIC about EINSTEIN or BOY WANDER (if coming from
                   ; command list #R64230(#b208)) or ANGELFACE
 64244 DEFW 27480  ; Signal that...
 64246 DEFB 28     ; ... ERIC has been told about EINSTEIN, BOY WANDER, or
                   ; ANGELFACE
 64247 DEFW 27111  ; Go to a random location
 64249 DEFW 25303  ; Move about until...
 64251 DEFB 0      ; ...the bell rings

; Unused
s64252 DEFS 3

; Command list #b220: Mumps walkabout
;
; Used only by ANGELFACE in lesson #LESSON243.
@label=CLIST220
@rsub=DEFW 31838
b64255 DEFW 31834  ; Put the next address in ANGELFACE's buffer, making him...
@label=CLIST220A
 64257 DEFW 64042  ; ...check whether he's touching ERIC
 64259 DEFW 27111  ; Go to a random location
 64261 DEFW 64035  ; Restart this command list

; Unused
s64263 DEFS 2

; Command list #b212: Grass on ERIC
;
; Used only by EINSTEIN in lesson #LESSON244.
@label=CLIST212
b64265 DEFW 25534  ; Go to...
 64267 DEFB 155,94 ; ...the far end of the fire escape
 64269 DEFW 27480  ; Signal that...
 64271 DEFB 26     ; ...EINSTEIN is ready
 64272 DEFW 25303  ; Move about until...
 64274 DEFB 28     ; ...ERIC has been told about EINSTEIN
 64275 DEFW 25534  ; Go to...
 64277 DEFB 155,6  ; ...just inside the Head's study
 64279 DEFW 27480  ; Signal that...
 64281 DEFB 29     ; ...EINSTEIN has grassed on ERIC
 64282 DEFW 27111  ; Go to a random location
 64284 DEFW 25303  ; Move about until...
 64286 DEFB 0      ; ...playtime is over

; Unused
s64287 DEFB 0

; Command list #b214: Wait for EINSTEIN to grass on ERIC
;
; Used only by MR WACKER in lesson #LESSON244.
@label=CLIST214
b64288 DEFW 25534  ; Go to...
 64290 DEFB 155,8  ; ...the doorway of the Head's study
 64292 DEFW 27480  ; Signal that...
 64294 DEFB 27     ; ...MR WACKER is ready
 64295 DEFW 25303  ; Move about until...
 64297 DEFB 29     ; ...EINSTEIN has grassed on ERIC
 64298 DEFW 31838  ; Put the next address in MR WACKER's buffer, making him...
 64300 DEFW 32234  ; ...walk fast
 64302 DEFW 63374  ; Find ERIC
 64304 DEFW 63456  ; Give ERIC 2000 lines
 64306 DEFW 25534  ; Go to...
 64308 DEFB 155,8  ; ...the doorway of the Head's study
 64310 DEFW 25303  ; Move about until...
 64312 DEFB 0      ; ...playtime is over

; Unused
s64313 DEFB 0

; Command list #b216: Collect the pea-shooter
;
; Used only by BOY WANDER in lesson #LESSON245.
@label=CLIST216
b64314 DEFW 25534  ; Go to...
 64316 DEFB 155,24 ; ...the left end of the Revision Library
 64318 DEFW 27480  ; Signal that...
 64320 DEFB 26     ; ...BOY WANDER is ready
 64321 DEFW 25303  ; Move about until...
 64323 DEFB 28     ; ...ERIC has been told about BOY WANDER
@rsub=DEFW 31838
 64324 DEFW 31834  ; Put the next address in BOY WANDER's buffer, making him...
 64326 DEFW 28672  ; ...fire the catapult now and then
 64328 DEFW 25534  ; Go to...
 64330 DEFB 155,94 ; ...the far end of the fire escape
 64332 DEFW 27476  ; Signal that...
 64334 DEFB 26     ; ...BOY WANDER has collected the pea-shooter
 64335 DEFW 27111  ; Go to a random location
 64337 DEFW 25303  ; Move about until...
 64339 DEFB 0      ; ...playtime is over

; Unused
s64340 DEFB 0

; Command list #b218: Look for the pea-shooter
;
; Used only by MR WACKER in lesson #LESSON245.
@label=CLIST218
b64341 DEFW 25534  ; Go to...
 64343 DEFB 155,42 ; ...just inside the Reading Room
 64345 DEFW 27480  ; Signal that...
 64347 DEFB 27     ; ...MR WACKER is ready
 64348 DEFW 25303  ; Move about until...
 64350 DEFB 28     ; ...ERIC has been told about BOY WANDER
 64351 DEFW 31838  ; Put the next address in MR WACKER's buffer, making him...
 64353 DEFW 32234  ; ...walk fast
 64355 DEFW 25534  ; Go to...
 64357 DEFB 155,94 ; ...the far end of the fire escape
 64359 DEFW 25303  ; Move about until the bell rings unless...
 64361 DEFB 26     ; ...BOY WANDER has not collected the pea-shooter
 64362 DEFW 31838  ; Put the next address in MR WACKER's buffer, making him...
 64364 DEFW 32234  ; ...walk fast
 64366 DEFW 63374  ; Find ERIC
 64368 DEFW 63456  ; Give ERIC 2000 lines
 64370 DEFW 25534  ; Go to...
 64372 DEFB 155,8  ; ...the doorway of the Head's study
 64374 DEFW 25303  ; Move about until...
 64376 DEFB 0      ; ...playtime is over

; Unused
s64377 DEFS 7

; Command list #b128: Map Room - teacher
;
; Used by MR WACKER in lessons #LESSON237 and #LESSON239, and by MR WITHIT in
; lessons #LESSON229, #LESSON231, #LESSON232, #LESSON233, #LESSON234,
; #LESSON235, #LESSON236, #LESSON238, #LESSON240 and #LESSON242.
@label=CLIST128
b64384 DEFW 25534  ; Go to...
 64386 DEFB 155,90 ; ...the fire escape
 64388 DEFW 25534  ; Go to...
 64390 DEFB 155,74 ; ...the doorway of the Map Room
 64392 DEFW 31807  ; Restart the command list unless it's time to start the
                   ; lesson
 64394 DEFW 27480  ; Signal that...
 64396 DEFB 8      ; ...the teacher has arrived at the Map Room
 64397 DEFW 32132  ; Tell the kids to sit down
 64399 DEFW 25534  ; Go to...
 64401 DEFB 155,60 ; ...the map in the Map Room
 64403 DEFW 25534  ; Go to...
 64405 DEFB 155,62 ; ...the chair nearest the map in the Map Room
 64407 DEFW 32178  ; Conduct the class

; Unused
s64409 DEFB 0

; Command list #b130: Reading Room - teacher
;
; Used by MR WACKER in lessons #LESSON228, #LESSON232 and #LESSON235, by MR
; ROCKITT in lessons #LESSON233, #LESSON239 and #LESSON240, by MR WITHIT in
; lesson #LESSON226, and by MR CREAK in lessons #LESSON229, #LESSON230,
; #LESSON231, #LESSON234, #LESSON236, #LESSON237, #LESSON238 and #LESSON242.
@label=CLIST130
b64410 DEFW 25534  ; Go to...
 64412 DEFB 155,30 ; ...the middle of the Revision Library
 64414 DEFW 25534  ; Go to...
 64416 DEFB 155,40 ; ...the doorway of the Reading Room
 64418 DEFW 31807  ; Restart the command list unless it's time to start the
                   ; lesson
 64420 DEFW 27480  ; Signal that...
 64422 DEFB 9      ; ...the teacher has arrived at the Reading Room
 64423 DEFW 32132  ; Tell the kids to sit down
 64425 DEFW 25534  ; Go to...
 64427 DEFB 155,52 ; ...the place in the Reading Room where teachers go before
                   ; turning round
 64429 DEFW 25534  ; Go to...
 64431 DEFB 155,50 ; ...the place in the Reading Room where teachers wait for
                   ; EINSTEIN to grass
 64433 DEFW 32178  ; Wipe the board, conduct the class

; Unused
s64435 DEFB 0

; Command list #b132: Exam Room - teacher
;
; Used by MR WACKER in lessons #LESSON226, #LESSON231, #LESSON233, #LESSON238
; and #LESSON241, by MR ROCKITT in lessons #LESSON227, #LESSON228, #LESSON232,
; #LESSON234, #LESSON235, #LESSON236 and #LESSON237, and by MR WITHIT in
; lessons #LESSON230 and #LESSON239.
@label=CLIST132
b64436 DEFW 25534  ; Go to...
 64438 DEFB 155,90 ; ...the fire escape
 64440 DEFW 25534  ; Go to...
 64442 DEFB 162,70 ; ...the doorway of the Exam Room
 64444 DEFW 31807  ; Restart the command list unless it's time to start the
                   ; lesson
 64446 DEFW 27480  ; Signal that...
 64448 DEFB 10     ; ...the teacher has arrived at the Exam Room
 64449 DEFW 32132  ; Tell the kids to sit down
 64451 DEFW 25534  ; Go to...
 64453 DEFB 162,49 ; ...the place in the Exam Room where teachers wait for
                   ; EINSTEIN to grass
 64455 DEFW 32178  ; Wipe the board, conduct the class

; Unused
s64457 DEFB 0

; Command list #b134: White Room - teacher
;
; Used by MR WACKER in lessons #LESSON234 and #LESSON236, by MR ROCKITT in
; lessons #LESSON230, #LESSON231, #LESSON238, #LESSON241 and #LESSON242, by MR
; WITHIT in lesson #LESSON237, and by MR CREAK in lessons #LESSON228,
; #LESSON232, #LESSON233, #LESSON235, #LESSON239 and #LESSON240.
@label=CLIST134
b64458 DEFW 25534  ; Go to...
 64460 DEFB 162,8  ; ...the staff room
 64462 DEFW 25534  ; Go to...
 64464 DEFB 162,22 ; ...the doorway of the White Room
 64466 DEFW 31807  ; Restart the command list unless it's time to start the
                   ; lesson
 64468 DEFW 27480  ; Signal that...
 64470 DEFB 11     ; ...the teacher has arrived at the White Room
 64471 DEFW 32132  ; Tell the kids to sit down
 64473 DEFW 25534  ; Go to...
 64475 DEFB 162,35 ; ...the spot just past the right end of the board in the
                   ; White Room
 64477 DEFW 25534  ; Go to...
 64479 DEFB 162,34 ; ...the right end of the board in the White Room
 64481 DEFW 32178  ; Wipe the board, conduct the class

; Unused
s64483 DEFB 0

; Command list #b136: Map Room - little boy
;
; Used by the little boys in various lessons.
@label=CLIST136
b64484 DEFW 25534  ; Go to...
 64486 DEFB 155,67 ; ...the Map Room
 64488 DEFW 25303  ; Move about until...
 64490 DEFB 8      ; ...the teacher arrives at the Map Room
 64491 DEFW 27808  ; Find a seat and sit down
; This command list continues at #R64493.

; Command list #b138: Do nothing
;
; This command list is used by BOY WANDER's and ERIC's catapult pellets; it
; ensures that the pellets do nothing when they are not airborne. Command list
; #R64484(#b136) also continues here.
@label=CLIST138
b64493 DEFW 25247  ; Do nothing

; Unused
s64495 DEFB 0

; Command list #b140: Map Room - BOY WANDER
;
; Used by BOY WANDER in lessons #LESSON229 and #LESSON240.
@label=CLIST140
@rsub=DEFW 31838
b64496 DEFW 31834  ; Put the next address in BOY WANDER's buffer, making him...
 64498 DEFW 28672  ; ...fire the catapult now and then
 64500 DEFW 25534  ; Go to...
 64502 DEFB 155,65 ; ...the Map Room
@rsub=DEFW 31838
 64504 DEFW 31834  ; Put the next address in BOY WANDER's buffer, making him...
 64506 DEFW 28672  ; ...fire the catapult now and then
 64508 DEFW 25303  ; Move about until...
 64510 DEFB 8      ; ...the teacher arrives at the Map Room
 64511 DEFW 27808  ; Find a seat and sit down
 64513 DEFW 25247  ; Sit still

; Unused
s64515 DEFB 0

; Command list #b142: Map Room - ANGELFACE
;
; Used by ANGELFACE in lessons #LESSON231, #LESSON239 and #LESSON240.
@label=CLIST142
@rsub=DEFW 31838
b64516 DEFW 31834  ; Put the next address in ANGELFACE's buffer, making him...
 64518 DEFW 28446  ; ...hit now and then
 64520 DEFW 25534  ; Go to...
 64522 DEFB 155,68 ; ...the Map Room
@rsub=DEFW 31838
 64524 DEFW 31834  ; Put the next address in ANGELFACE's buffer, making him...
 64526 DEFW 28446  ; ...hit now and then
 64528 DEFW 25303  ; Move about until...
 64530 DEFB 8      ; ...the teacher arrives at the Map Room
 64531 DEFW 27808  ; Find a seat and sit down
 64533 DEFW 25247  ; Sit still

; Unused
s64535 DEFB 0

; Command list #b144: Map Room - EINSTEIN
;
; Used by EINSTEIN in lessons #LESSON231, #LESSON239 and #LESSON240.
@label=CLIST144
b64536 DEFW 25534  ; Go to...
 64538 DEFB 155,67 ; ...the Map Room
 64540 DEFW 25303  ; Move about until...
 64542 DEFB 8      ; ...the teacher arrives at the Map Room
 64543 DEFW 27808  ; Find a seat and sit down
 64545 DEFW 31162  ; Grass and answer questions

; Unused
s64547 DEFB 0

; Command list #b146: Reading Room - little boy
;
; Used by the little boys in various lessons.
@label=CLIST146
b64548 DEFW 25534  ; Go to...
 64550 DEFB 155,54 ; ...the Reading Room
 64552 DEFW 25303  ; Move about until...
 64554 DEFB 9      ; ...the teacher arrives at the Reading Room
 64555 DEFW 27808  ; Find a seat and sit down
 64557 DEFW 25247  ; Sit still

; Unused
s64559 DEFB 0

; Command list #b148: Reading Room - BOY WANDER
;
; Used by BOY WANDER in lessons #LESSON232, #LESSON233, #LESSON234 and
; #LESSON242.
@label=CLIST148
@rsub=DEFW 31838
b64560 DEFW 31834  ; Put the next address in BOY WANDER's buffer, making him...
 64562 DEFW 28672  ; ...fire the catapult now and then
 64564 DEFW 25534  ; Go to...
 64566 DEFB 155,45 ; ...the Reading Room board
 64568 DEFW 32167  ; Write on the board unless...
 64570 DEFB 9      ; ...the teacher has arrived at the Reading Room
 64571 DEFW 25534  ; Go to...
 64573 DEFB 155,55 ; ...the Reading Room
@rsub=DEFW 31838
 64575 DEFW 31834  ; Put the next address in BOY WANDER's buffer, making him...
 64577 DEFW 28672  ; ...fire the catapult now and then
 64579 DEFW 25303  ; Move about until...
 64581 DEFB 9      ; ...the teacher arrives at the Reading Room
 64582 DEFW 27808  ; Find a seat and sit down
 64584 DEFW 25247  ; Sit still

; Unused
s64586 DEFB 0

; Command list #b150: Reading Room - ANGELFACE
;
; Used by ANGELFACE in lessons #LESSON233, #LESSON234 and #LESSON242.
@label=CLIST150
@rsub=DEFW 31838
b64587 DEFW 31834  ; Put the next address in ANGELFACE's buffer, making him...
 64589 DEFW 28446  ; ...hit now and then
 64591 DEFW 25534  ; Go to...
 64593 DEFB 155,53 ; ...the Reading Room
@rsub=DEFW 31838
 64595 DEFW 31834  ; Put the next address in ANGELFACE's buffer, making him...
 64597 DEFW 28446  ; ...hit now and then
 64599 DEFW 25303  ; Move about until...
 64601 DEFB 9      ; ...the teacher arrives at the Reading Room
 64602 DEFW 27808  ; Find a seat and sit down
 64604 DEFW 25247  ; Sit still

; Unused
s64606 DEFB 0

; Command list #b152: Reading Room - EINSTEIN
;
; Used by EINSTEIN in lessons #LESSON232, #LESSON233, #LESSON234 and
; #LESSON242.
@label=CLIST152
b64607 DEFW 25534  ; Go to...
 64609 DEFB 155,55 ; ...the Reading Room
 64611 DEFW 25303  ; Move about until...
 64613 DEFB 9      ; ...the teacher arrives at the Reading Room
 64614 DEFW 27808  ; Find a seat and sit down
 64616 DEFW 31162  ; Grass and answer questions

; Unused
s64618 DEFB 0

; Command list #b154: Exam Room - little boy
;
; Used by the little boys in various lessons, and also by MR ROCKITT in lesson
; #LESSON229 (which is a #BUG#rockittExamRoom(bug)).
@label=CLIST154
b64619 DEFW 25534  ; Go to...
 64621 DEFB 162,61 ; ...the Exam Room
 64623 DEFW 25303  ; Move about until...
 64625 DEFB 10     ; ...the teacher arrives at the Exam Room
 64626 DEFW 27808  ; Find a seat and sit down
 64628 DEFW 25247  ; Sit still

; Unused
s64630 DEFB 0

; Command list #b156: Exam Room - BOY WANDER
;
; Used by BOY WANDER in lessons #LESSON226, #LESSON227, #LESSON231 and
; #LESSON239.
@label=CLIST156
@rsub=DEFW 31838
b64631 DEFW 31834  ; Put the next address in BOY WANDER's buffer, making him...
 64633 DEFW 28672  ; ...fire the catapult now and then
 64635 DEFW 25534  ; Go to...
 64637 DEFB 162,45 ; ...the Exam Room board
 64639 DEFW 32167  ; Write on the board unless...
 64641 DEFB 10     ; ...the teacher has arrived at the Exam Room
 64642 DEFW 25534  ; Go to...
 64644 DEFB 162,60 ; ...the Exam Room
@rsub=DEFW 31838
 64646 DEFW 31834  ; Put the next address in BOY WANDER's buffer, making him...
 64648 DEFW 28672  ; ...fire the catapult now and then
 64650 DEFW 25303  ; Move about until...
 64652 DEFB 10     ; ...the teacher arrives at the Exam Room
 64653 DEFW 27808  ; Find a seat and sit down
 64655 DEFW 25247  ; Sit still

; Unused
s64657 DEFB 0

; Command list #b158: Exam Room - ANGELFACE
;
; Used by ANGELFACE in lessons #LESSON226 and #LESSON227.
@label=CLIST158
@rsub=DEFW 31838
b64658 DEFW 31834  ; Put the next address in ANGELFACE's buffer, making him...
 64660 DEFW 28446  ; ...hit now and then
 64662 DEFW 25534  ; Go to...
 64664 DEFB 162,59 ; ...the Exam Room
@rsub=DEFW 31838
 64666 DEFW 31834  ; Put the next address in ANGELFACE's buffer, making him...
 64668 DEFW 28446  ; ...hit now and then
 64670 DEFW 25303  ; Move about until...
 64672 DEFB 10     ; ...the teacher arrives at the Exam Room
 64673 DEFW 27808  ; Find a seat and sit down
 64675 DEFW 25247  ; Sit still

; Unused
s64677 DEFB 0

; Command list #b160: Exam Room - EINSTEIN
;
; Used by EINSTEIN in lessons #LESSON226 and #LESSON227.
@label=CLIST160
b64678 DEFW 25534  ; Go to...
 64680 DEFB 162,58 ; ...the Exam Room
 64682 DEFW 25303  ; Move about until...
 64684 DEFB 10     ; ...the teacher arrives at the Exam Room
 64685 DEFW 27808  ; Find a seat and sit down
 64687 DEFW 31162  ; Grass and answer questions

; Unused
s64689 DEFB 0

; Command list #b162: White Room - little boy
;
; Used by the little boys in various lessons.
@label=CLIST162
b64690 DEFW 25534  ; Go to...
 64692 DEFB 162,36 ; ...the White Room
 64694 DEFW 25303  ; Move about until...
 64696 DEFB 11     ; ...the teacher arrives at the White Room
 64697 DEFW 27808  ; Find a seat and sit down
 64699 DEFW 25247  ; Sit still

; Unused
s64701 DEFB 0

; Command list #b164: White Room - BOY WANDER
;
; Used by BOY WANDER in lessons #LESSON235, #LESSON238 and #LESSON241.
@label=CLIST164
@rsub=DEFW 31838
b64702 DEFW 31834  ; Put the next address in BOY WANDER's buffer, making him...
 64704 DEFW 28672  ; ...fire the catapult now and then
 64706 DEFW 25534  ; Go to...
 64708 DEFB 162,30 ; ...the White Room board
 64710 DEFW 32167  ; Write on the board unless...
 64712 DEFB 11     ; ...the teacher has arrived at the White Room
 64713 DEFW 25534  ; Go to...
 64715 DEFB 162,35 ; ...the spot just past the right end of the board in the
                   ; White Room
@rsub=DEFW 31838
 64717 DEFW 31834  ; Put the next address in BOY WANDER's buffer, making him...
 64719 DEFW 28672  ; ...fire the catapult now and then
 64721 DEFW 25303  ; Move about until...
 64723 DEFB 11     ; ...the teacher arrives at the White Room
 64724 DEFW 27808  ; Find a seat and sit down
 64726 DEFW 25247  ; Sit still

; Unused
s64728 DEFB 0

; Command list #b166: White Room - ANGELFACE
;
; Used by ANGELFACE in lessons #LESSON228, #LESSON232, #LESSON235, #LESSON236
; and #LESSON241.
@label=CLIST166
@rsub=DEFW 31838
b64729 DEFW 31834  ; Put the next address in ANGELFACE's buffer, making him...
 64731 DEFW 28446  ; ...hit now and then
 64733 DEFW 25534  ; Go to...
 64735 DEFB 162,36 ; ...the White Room
@rsub=DEFW 31838
 64737 DEFW 31834  ; Put the next address in ANGELFACE's buffer, making him...
 64739 DEFW 28446  ; ...hit now and then
 64741 DEFW 25303  ; Move about until...
 64743 DEFB 11     ; ...the teacher arrives at the White Room
 64744 DEFW 27808  ; Find a seat and sit down
 64746 DEFW 25247  ; Sit still

; Unused
s64748 DEFB 0

; Command list #b168: White Room - EINSTEIN
;
; Used by EINSTEIN in lessons #LESSON235, #LESSON236, #LESSON237, #LESSON238
; and #LESSON241.
@label=CLIST168
b64749 DEFW 25534  ; Go to...
 64751 DEFB 162,34 ; ...the right end of the board in the White Room
 64753 DEFW 25303  ; Move about until...
 64755 DEFB 11     ; ...the teacher arrives at the White Room
 64756 DEFW 27808  ; Find a seat and sit down
 64758 DEFW 31162  ; Grass and answer questions

; Unused
s64760 DEFB 0

; Command list #b170: Dinner - EINSTEIN/little boy
;
; Used by the little boys and EINSTEIN in lessons #LESSON224 and #LESSON225.
@label=CLIST170
b64761 DEFW 25534  ; Go to...
 64763 DEFB 169,46 ; ...the dinner hall
 64765 DEFW 25303  ; Move about until...
 64767 DEFB 0      ; ...the bell rings

; Unused
s64768 DEFB 0

; Command list #b172: Dinner - BOY WANDER
;
; Used by BOY WANDER in lessons #LESSON224 and #LESSON225.
@label=CLIST172
@rsub=DEFW 31838
b64769 DEFW 31834  ; Put the next address in BOY WANDER's buffer, making him...
 64771 DEFW 28672  ; ...fire the catapult now and then
 64773 DEFW 25534  ; Go to...
 64775 DEFB 169,45 ; ...the dinner hall
@rsub=DEFW 31838
 64777 DEFW 31834  ; Put the next address in BOY WANDER's buffer, making him...
 64779 DEFW 28672  ; ...fire the catapult now and then
 64781 DEFW 25303  ; Move about until...
 64783 DEFB 0      ; ...the bell rings

; Unused
s64784 DEFB 0

; Command list #b174: Dinner - ANGELFACE
;
; Used by ANGELFACE in lessons #LESSON224 and #LESSON225.
@label=CLIST174
@rsub=DEFW 31838
b64785 DEFW 31834  ; Put the next address in ANGELFACE's buffer, making him...
 64787 DEFW 28446  ; ...hit now and then
 64789 DEFW 25534  ; Go to...
 64791 DEFB 169,45 ; ...the dinner hall
@rsub=DEFW 31838
 64793 DEFW 31834  ; Put the next address in ANGELFACE's buffer, making him...
 64795 DEFW 28446  ; ...hit now and then
 64797 DEFW 25303  ; Move about until...
 64799 DEFB 0      ; ...the bell rings

; Unused
s64800 DEFB 0

; Command list #b176: Revision Library - EINSTEIN/little boy
;
; Used by the little boys (except boys 3 and 6) in various lessons, and by
; EINSTEIN in lessons #LESSON228, #LESSON229 and #LESSON230.
@label=CLIST176
b64801 DEFW 25534  ; Go to...
 64803 DEFB 155,36 ; ...the Revision Library
 64805 DEFW 25303  ; Move about until...
 64807 DEFB 0      ; ...the bell rings

; Unused
s64808 DEFB 0

; Command list #b178: Revision Library - BOY WANDER
;
; Used by BOY WANDER in lessons #LESSON228, #LESSON230, #LESSON236 and
; #LESSON237.
@label=CLIST178
@rsub=DEFW 31838
b64809 DEFW 31834  ; Put the next address in BOY WANDER's buffer, making him...
 64811 DEFW 28672  ; ...fire the catapult now and then
 64813 DEFW 25534  ; Go to...
 64815 DEFB 155,35 ; ...the Revision Library
@rsub=DEFW 31838
 64817 DEFW 31834  ; Put the next address in BOY WANDER's buffer, making him...
 64819 DEFW 28672  ; ...fire the catapult now and then
 64821 DEFW 25303  ; Move about until...
 64823 DEFB 0      ; ...the bell rings

; Unused
s64824 DEFB 0

; Command list #b180: Revision Library - ANGELFACE
;
; Used by ANGELFACE in lessons #LESSON229, #LESSON230, #LESSON237 and
; #LESSON238.
@label=CLIST180
@rsub=DEFW 31838
b64825 DEFW 31834  ; Put the next address in ANGELFACE's buffer, making him...
 64827 DEFW 28446  ; ...hit now and then
 64829 DEFW 25534  ; Go to...
 64831 DEFB 155,35 ; ...the Revision Library
@rsub=DEFW 31838
 64833 DEFW 31834  ; Put the next address in ANGELFACE's buffer, making him...
 64835 DEFW 28446  ; ...hit now and then
 64837 DEFW 25303  ; Move about until...
 64839 DEFB 0      ; ...the bell rings

; Unused
s64840 DEFB 0

; Command list #b182: Walkabout - ANGELFACE
;
; Used by ANGELFACE in lessons #LESSON246, #LESSON247, #LESSON248, #LESSON249,
; #LESSON250, #LESSON251, #LESSON252, #LESSON253, #LESSON254 and #LESSON255.
@label=CLIST182
@rsub=DEFW 31838
b64841 DEFW 31834  ; Put the next address in ANGELFACE's buffer, making him...
 64843 DEFW 28446  ; ...hit now and then
 64845 DEFW 27111  ; Go to a random location
@rsub=DEFW 31838
 64847 DEFW 31834  ; Put the next address in ANGELFACE's buffer, making him...
 64849 DEFW 28446  ; ...hit now and then
 64851 DEFW 27453  ; Walk up and down...
 64853 DEFB 10,0   ; ...10 times
 64855 DEFW 31815  ; Restart the command list

; Command list #b184: Dinner duty
;
; Used by MR WACKER in lesson #LESSON225, and by MR WITHIT in lesson
; #LESSON224.
@label=CLIST184
b64857 DEFW 25534  ; Go to...
 64859 DEFB 169,54 ; ...the table in the dinner hall
 64861 DEFW 25534  ; Go to...
 64863 DEFB 169,42 ; ...the middle of the bench in the dinner hall
 64865 DEFW 31807  ; Restart the command list unless dinner has started
 64867 DEFW 31854  ; Perform dinner duty

; Command list #b186: Head's study - MR WACKER
;
; Used by MR WACKER in lessons #LESSON224 and #LESSON247.
@label=CLIST186
b64869 DEFW 25534  ; Go to...
 64871 DEFB 155,8  ; ...the doorway of the Head's study
 64873 DEFW 25303  ; Move about until...
 64875 DEFB 0      ; ...the bell rings

; Command list #b188: Staff room - teacher
;
; Used by MR WACKER in lesson #LESSON254, by MR ROCKITT in lessons #LESSON224,
; #LESSON225, #LESSON247, #LESSON249 and #LESSON254, by MR WITHIT in lessons
; #LESSON247, #LESSON248, #LESSON250, #LESSON251, #LESSON254 and #LESSON255,
; and by MR CREAK in lessons #LESSON224, #LESSON225, #LESSON226, #LESSON227,
; #LESSON241, #LESSON246, #LESSON247, #LESSON248, #LESSON249, #LESSON250,
; #LESSON251, #LESSON254 and #LESSON255.
@label=CLIST188
b64876 DEFW 25534  ; Go to...
 64878 DEFB 162,9  ; ...the staff room
 64880 DEFW 25303  ; Move about until...
 64882 DEFB 0      ; ...the bell rings

; Command list #b190: Walkabout - teacher
;
; Used by MR WACKER in lessons #LESSON227, #LESSON229, #LESSON230, #LESSON240,
; #LESSON242, #LESSON243, #LESSON246, #LESSON248, #LESSON249, #LESSON250,
; #LESSON251, #LESSON252 and #LESSON255, by MR ROCKITT in lessons #LESSON244,
; #LESSON245 and #LESSON246, by MR WITHIT in lessons #LESSON227, #LESSON243,
; #LESSON244, #LESSON245 and #LESSON246, and by MR CREAK in lessons #LESSON243,
; #LESSON244 and #LESSON245.
@label=CLIST190
b64883 DEFW 25534  ; Go to...
 64885 DEFB 155,3  ; ...the Head's study
 64887 DEFW 27111  ; Go to a random location
 64889 DEFW 31815  ; Restart the command list

; Unused
s64891 DEFB 0

; Command list #b192: Write on the boards - BOY WANDER
;
; Used by BOY WANDER in lessons #LESSON246, #LESSON248, #LESSON249, #LESSON250
; and #LESSON254.
@label=CLIST192
b64892 DEFW 25534  ; Go to...
 64894 DEFB 162,45 ; ...the Exam Room board
 64896 DEFW 32158  ; Write on the board (if it's clean)
 64898 DEFW 25534  ; Go to...
 64900 DEFB 162,30 ; ...the White Room board
 64902 DEFW 32158  ; Write on the board (if it's clean)
 64904 DEFW 25534  ; Go to...
 64906 DEFB 155,45 ; ...the Reading Room board
 64908 DEFW 32158  ; Write on the board (if it's clean)
@rsub=DEFW 31838
 64910 DEFW 31834  ; Put the next address in BOY WANDER's buffer, making him...
 64912 DEFW 28672  ; ...fire the catapult now and then
; This command list continues at #R64914.

; Command list #b196: Walkabout
;
; Used by every character in various lessons. Command list #R64892(#b192) also
; continues here.
@label=CLIST196
b64914 DEFW 27111  ; Go to a random location
 64916 DEFW 27453  ; Walk up and down...
 64918 DEFB 10,0   ; ...10 times
 64920 DEFW 31815  ; Restart the command list

; Unused
s64922 DEFB 0

; Command list #b198: Walk around the fire escape
;
; Used by the little boys (except boys 7, 10 and 11) in various lessons, and by
; MR WITHIT in lesson #LESSON225.
@label=CLIST198
b64923 DEFW 25534  ; Go to...
 64925 DEFB 155,94 ; ...the far end of the fire escape
 64927 DEFW 25303  ; Move about until...
 64929 DEFB 0      ; ...the bell rings

; Unused
s64930 DEFB 0

; Command list #b200: Walk around the gym
;
; Used by the little boys (except boys 1, 2, 8 and 11) in various lessons.
@label=CLIST200
b64931 DEFW 25534  ; Go to...
 64933 DEFB 169,94 ; ...the gym
 64935 DEFW 25303  ; Move about until...
 64937 DEFB 0      ; ...the bell rings

; Unused
s64938 DEFB 0

; Command list #b202: Walk around the big window
;
; Used by the little boys in various lessons, and by MR WITHIT in lesson
; #LESSON228.
@label=CLIST202
b64939 DEFW 25534  ; Go to...
 64941 DEFB 169,8  ; ...the vicinity of the big window
 64943 DEFW 25303  ; Move about until...
 64945 DEFB 0      ; ...the bell rings

; Unused
s64946 DEFB 0

; Command list #b204: Stampede - leader
;
; Used only by little boy no. 1 in lessons #LESSON252 and #LESSON253.
@label=CLIST204
b64947 DEFW 27453  ; Walk up and down...
 64949 DEFB 40,0   ; ...40 times
 64951 DEFW 27480  ; Signal that...
 64953 DEFB 16     ; ...little boy no. 1 is ready
 64954 DEFW 27246  ; Go somewhere and trip people up on the way
 64956 DEFW 27476  ; Unsignal that...
 64958 DEFB 16     ; ...little boy no. 1 is ready
 64959 DEFW 27453  ; Walk up and down...
 64961 DEFB 40,0   ; ...40 times
 64963 DEFW 27480  ; Signal that...
 64965 DEFB 17     ; ...little boy no. 1 is ready again
 64966 DEFW 27246  ; Go somewhere and trip people up on the way
 64968 DEFW 27476  ; Unsignal that...
 64970 DEFB 17     ; ...little boy no. 1 is ready again
 64971 DEFW 31815  ; Restart the command list

; Unused
s64973 DEFS 2

; Command list #b206: Stampede - follower
;
; Used by little boys 2-11 in lessons #LESSON252 and #LESSON253.
@label=CLIST206
b64975 DEFW 25303  ; Move about until...
 64977 DEFB 16     ; ...little boy no. 1 is ready
 64978 DEFW 27266  ; Find and follow little boy no. 1 and trip people up on the
                   ; way
 64980 DEFW 25303  ; Move about until...
 64982 DEFB 17     ; ...little boy no. 1 is ready again
 64983 DEFW 27266  ; Find and follow little boy no. 1 and trip people up on the
                   ; way
 64985 DEFW 31815  ; Restart the command list

; Unused
s64987 DEFB 0

; Command list #b194: Walkabout - BOY WANDER
;
; Used by BOY WANDER in lessons #LESSON247, #LESSON251, #LESSON252, #LESSON253
; and #LESSON255.
@label=CLIST194
@rsub=DEFW 31838
b64988 DEFW 31834  ; Put the next address in BOY WANDER's buffer, making him...
 64990 DEFW 28672  ; ...fire the catapult now and then
 64992 DEFW 27111  ; Go to a random location
@rsub=DEFW 31838
 64994 DEFW 31834  ; Put the next address in BOY WANDER's buffer, making him...
 64996 DEFW 28672  ; ...fire the catapult now and then
 64998 DEFW 27453  ; Walk up and down...
 65000 DEFB 10,0   ; ...10 times
 65002 DEFW 31815  ; Restart the command list

; Unused
s65004 DEFS 20

; Main timetable
;
; Used by the routine at #R63749.
@label=TIMETABLE
b65024 DEFB 246 ; #b0: #LESSON246(PLAYTIME) (this is an
                ; #FACT#initialPlaytimes(initial playtime))
 65025 DEFB 226 ; #b1: #LESSON226(MR WACKER - EXAM ROOM)
 65026 DEFB 231 ; #b2: #LESSON231(MR WITHIT - MAP ROOM)
 65027 DEFB 247 ; #b3: #LESSON247(PLAYTIME)
 65028 DEFB 238 ; #b4: #LESSON238(MR ROCKITT - WHITE ROOM)
 65029 DEFB 234 ; #b5: #LESSON234(MR CREAK - READING ROOM)
 65030 DEFB 248 ; #b6: #LESSON248(PLAYTIME)
 65031 DEFB 224 ; #b7: #LESSON224(DINNER (MR WITHIT))
 65032 DEFB 252 ; #b8: #LESSON252(PLAYTIME (little boys stampede))
 65033 DEFB 254 ; #b9: #LESSON254(PLAYTIME)
 65034 DEFB 237 ; #b10: #LESSON237(MR WITHIT - WHITE ROOM)
 65035 DEFB 228 ; #b11: #LESSON228(REVISION LIBRARY)
 65036 DEFB 249 ; #b12: #LESSON249(PLAYTIME)
 65037 DEFB 241 ; #b13: #LESSON241(MR ROCKITT - WHITE ROOM)
 65038 DEFB 250 ; #b14: #LESSON250(PLAYTIME)
 65039 DEFB 236 ; #b15: #LESSON236(MR WACKER - WHITE ROOM)
 65040 DEFB 251 ; #b16: #LESSON251(PLAYTIME) (this is an
                ; #FACT#initialPlaytimes(initial playtime))
 65041 DEFB 232 ; #b17: #LESSON232(MR WACKER - READING ROOM)
 65042 DEFB 235 ; #b18: #LESSON235(MR CREAK - WHITE ROOM)
 65043 DEFB 248 ; #b19: #LESSON248(PLAYTIME)
 65044 DEFB 255 ; #b20: #LESSON255(PLAYTIME)
 65045 DEFB 233 ; #b21: #LESSON233(MR ROCKITT - READING ROOM)
 65046 DEFB 239 ; #b22: #LESSON239(MR WACKER - MAP ROOM)
 65047 DEFB 250 ; #b23: #LESSON250(PLAYTIME)
 65048 DEFB 225 ; #b24: #LESSON225(DINNER (MR WACKER))
 65049 DEFB 253 ; #b25: #LESSON253(PLAYTIME (little boys stampede))
 65050 DEFB 242 ; #b26: #LESSON242(MR CREAK - READING ROOM)
 65051 DEFB 227 ; #b27: #LESSON227(MR ROCKITT - EXAM ROOM)
 65052 DEFB 229 ; #b28: #LESSON229(REVISION LIBRARY)
 65053 DEFB 246 ; #b29: #LESSON246(PLAYTIME)
 65054 DEFB 237 ; #b30: #LESSON237(MR WITHIT - WHITE ROOM)
 65055 DEFB 233 ; #b31: #LESSON233(MR ROCKITT - READING ROOM)
 65056 DEFB 249 ; #b32: #LESSON249(PLAYTIME) (this is an
                ; #FACT#initialPlaytimes(initial playtime))
 65057 DEFB 240 ; #b33: #LESSON240(MR WITHIT - MAP ROOM)
 65058 DEFB 230 ; #b34: #LESSON230(REVISION LIBRARY)
 65059 DEFB 235 ; #b35: #LESSON235(MR CREAK - WHITE ROOM)
 65060 DEFB 251 ; #b36: #LESSON251(PLAYTIME)
 65061 DEFB 234 ; #b37: #LESSON234(MR CREAK - READING ROOM)
 65062 DEFB 241 ; #b38: #LESSON241(MR ROCKITT - WHITE ROOM)
 65063 DEFB 247 ; #b39: #LESSON247(PLAYTIME)
 65064 DEFB 224 ; #b40: #LESSON224(DINNER (MR WITHIT))
 65065 DEFB 246 ; #b41: #LESSON246(PLAYTIME)
 65066 DEFB 255 ; #b42: #LESSON255(PLAYTIME)
 65067 DEFB 238 ; #b43: #LESSON238(MR ROCKITT - WHITE ROOM)
 65068 DEFB 226 ; #b44: #LESSON226(MR WACKER - EXAM ROOM)
 65069 DEFB 250 ; #b45: #LESSON250(PLAYTIME)
 65070 DEFB 229 ; #b46: #LESSON229(REVISION LIBRARY)
 65071 DEFB 231 ; #b47: #LESSON231(MR WITHIT - MAP ROOM)
 65072 DEFB 248 ; #b48: #LESSON248(PLAYTIME) (this is an
                ; #FACT#initialPlaytimes(initial playtime))
 65073 DEFB 231 ; #b49: #LESSON231(MR WITHIT - MAP ROOM)
 65074 DEFB 232 ; #b50: #LESSON232(MR WACKER - READING ROOM)
 65075 DEFB 250 ; #b51: #LESSON250(PLAYTIME)
 65076 DEFB 254 ; #b52: #LESSON254(PLAYTIME)
 65077 DEFB 241 ; #b53: #LESSON241(MR ROCKITT - WHITE ROOM)
 65078 DEFB 242 ; #b54: #LESSON242(MR CREAK - READING ROOM)
 65079 DEFB 247 ; #b55: #LESSON247(PLAYTIME)
 65080 DEFB 225 ; #b56: #LESSON225(DINNER (MR WACKER))
 65081 DEFB 252 ; #b57: #LESSON252(PLAYTIME (little boys stampede))
 65082 DEFB 254 ; #b58: #LESSON254(PLAYTIME)
 65083 DEFB 226 ; #b59: #LESSON226(MR WACKER - EXAM ROOM)
 65084 DEFB 230 ; #b60: #LESSON230(REVISION LIBRARY)
 65085 DEFB 249 ; #b61: #LESSON249(PLAYTIME)
 65086 DEFB 237 ; #b62: #LESSON237(MR WITHIT - WHITE ROOM)
 65087 DEFB 239 ; #b63: #LESSON239(MR WACKER - MAP ROOM)

; Make a walking sound effect (yellow border)
;
; Used by the routines at #R46568 and #R60128.
@label=WALKSOUND
c65088 PUSH BC       ;
 65089 LD A,6        ; The border will be yellow
; This entry point is used by the routine at #R65106 with #REGa=1 (blue
; border).
*65091 LD C,8        ; {Make the sound effect
*65093 XOR 16        ;
 65095 OUT (254),A   ;
 65097 LD B,192      ;
*65099 DJNZ 65099    ;
 65101 DEC C         ;
 65102 JR NZ,65093   ; }
 65104 POP BC        ;
 65105 RET           ;

; Make a walking sound effect (blue border)
;
; Used by the routines at #R25856, #R25916, #R25962 and #R60139.
@label=WALKSOUND2
c65106 PUSH BC       ;
 65107 LD A,1        ; The border will be blue
 65109 JR 65091      ;

; Make a knocked-out sound effect
;
; Used by the routine at #R27303. Makes a sound effect just after ERIC has been
; knocked over or pushed out of his seat.
;
; A 1 + knockout delay counter value (#R32757)
@label=SNDEFFECT
c65111 CP 39         ; {Return (to #R27351) unless ERIC has just been knocked
 65113 RET NZ        ; over}
 65114 LD HL,275     ; {#REGa=#b2 (initial border colour: red), #REGh=#b1
 65117 LD DE,0       ; (pitch adjustment), #REGl=#b19 (border alternates
 65120 LD A,2        ; red/blue), #REGd=#b0 (duration), #REGe=#b0 (initial
                     ; pitch)}
; This entry point is used by the routines at #R58604 (to make the 'hit a
; shield' sound effect) and #R65141 (to make the catapult sound effect) with
; the following parameters prepared:
; .
; #TABLE(default,register,register-desc)
; { A | Initial border colour }
; { D | Duration }
; { E | Initial pitch }
; { H | Pitch adjustment }
; { L | #b16 + border #S/XOR/ value }
; TABLE#
*65122 XOR L         ; {Flip the border colour and the state of the speaker
 65123 OUT (254),A   ; }
 65125 LD B,E        ; {Pitch delay
*65126 DJNZ 65126    ; }
 65128 LD B,A        ; Save #REGa temporarily
 65129 LD A,E        ; {Adjust the pitch
 65130 ADD A,H       ;
 65131 LD E,A        ; }
 65132 LD A,B        ; Restore #REGa
 65133 DEC D         ; Decrement the duration counter
 65134 JR NZ,65122   ; Jump back unless the sound effect is finished
 65136 LD A,1        ; {Make the border blue before returning
 65138 OUT (254),A   ; }
 65140 RET           ;

; Make a catapult sound effect
;
; Used by the routine at #R62495.
@label=FIRESOUND
@keep
c65141 LD HL,63506   ; {#REGa=#b4 (initial border colour: green), #REGh=#b248
@keep
 65144 LD DE,32768   ; (pitch adjustment), #REGl=#b18 (border alternates
 65147 LD A,4        ; green/yellow), #REGd=#b128 (duration), #REGe=#b0
                     ; (initial pitch)}
 65149 JR 65122      ; Make the sound effect with these parameters

; Unused
s65151 DEFB 0

; Addresses of command lists
;
; Used by the routine at #R26342.
@label=CLISTADDR
w65152 DEFW 64384 ; #b128: Map Room - teacher
 65154 DEFW 64410 ; #b130: Reading Room - teacher
 65156 DEFW 64436 ; #b132: Exam Room - teacher
 65158 DEFW 64458 ; #b134: White Room - teacher
 65160 DEFW 64484 ; #b136: Map Room - little boy
 65162 DEFW 64493 ; #b138: Do nothing
 65164 DEFW 64496 ; #b140: Map Room - BOY WANDER
 65166 DEFW 64516 ; #b142: Map Room - ANGELFACE
 65168 DEFW 64536 ; #b144: Map Room - EINSTEIN
 65170 DEFW 64548 ; #b146: Reading Room - little boy
 65172 DEFW 64560 ; #b148: Reading Room - BOY WANDER
 65174 DEFW 64587 ; #b150: Reading Room - ANGELFACE
 65176 DEFW 64607 ; #b152: Reading Room - EINSTEIN
 65178 DEFW 64619 ; #b154: Exam Room - little boy
 65180 DEFW 64631 ; #b156: Exam Room - BOY WANDER
 65182 DEFW 64658 ; #b158: Exam Room - ANGELFACE
 65184 DEFW 64678 ; #b160: Exam Room - EINSTEIN
 65186 DEFW 64690 ; #b162: White Room - little boy
 65188 DEFW 64702 ; #b164: White Room - BOY WANDER
 65190 DEFW 64729 ; #b166: White Room - ANGELFACE
 65192 DEFW 64749 ; #b168: White Room - EINSTEIN
 65194 DEFW 64761 ; #b170: Dinner - EINSTEIN/little boy
 65196 DEFW 64769 ; #b172: Dinner - BOY WANDER
 65198 DEFW 64785 ; #b174: Dinner - ANGELFACE
 65200 DEFW 64801 ; #b176: Revision Library - EINSTEIN/little boy
 65202 DEFW 64809 ; #b178: Revision Library - BOY WANDER
 65204 DEFW 64825 ; #b180: Revision Library - ANGELFACE
 65206 DEFW 64841 ; #b182: Walkabout - ANGELFACE
 65208 DEFW 64857 ; #b184: Dinner duty
 65210 DEFW 64869 ; #b186: Head's study - MR WACKER
 65212 DEFW 64876 ; #b188: Staff room - teacher
 65214 DEFW 64883 ; #b190: Walkabout - teacher
 65216 DEFW 64892 ; #b192: Write on the boards - BOY WANDER
 65218 DEFW 64988 ; #b194: Walkabout - BOY WANDER
 65220 DEFW 64914 ; #b196: Walkabout
 65222 DEFW 64923 ; #b198: Walk around the fire escape
 65224 DEFW 64931 ; #b200: Walk around the gym
 65226 DEFW 64939 ; #b202: Walk around the big window
 65228 DEFW 64947 ; #b204: Stampede - leader
 65230 DEFW 64975 ; #b206: Stampede - follower
 65232 DEFW 64230 ; #b208: Tell ERIC about EINSTEIN or BOY WANDER
 65234 DEFW 64240 ; #b210: Tell ERIC about ANGELFACE
 65236 DEFW 64265 ; #b212: Grass on ERIC
 65238 DEFW 64288 ; #b214: Wait for EINSTEIN to grass on ERIC
 65240 DEFW 64314 ; #b216: Collect the pea-shooter
 65242 DEFW 64341 ; #b218: Look for the pea-shooter
 65244 DEFW 64255 ; #b220: Mumps walkabout
 65246 DEFW 64219 ; #b222: Mumps duty

; 'WELL DONE! GO UP A YEAR'
;
; Used by the routine at #R63668.
@label=M_WELLDONE
t65248 DEFM "WELL DONE! GO"
 65261 DEFB 0 ; End marker
 65262 DEFS 2
@label=M_WELLDONEL2
 65264 DEFM "UP A YEAR"
 65273 DEFB 0 ; End marker
 65274 DEFS 6

; 'Don't let {ANGELFACE} touch you this playtime - He's got mumps{8 spaces}'
;
; Used by the routine at #R63488.
@label=M_BULLYMUMPS
t65280 DEFM "Don't let "
 65290 DEFB 18 ; #R55708: 'ANGELFACE'
 65291 DEFM " touch you this playtime - He's got mumps"
 65332 DEFB 3  ; #R55830: '#SPACE8' (8 spaces)

; '{EINSTEIN} is going to tell {MR WACKER} what you're up to. You must stop him
; getting to his study this break{8 spaces}'
;
; Used by the routine at #R63488.
@label=M_SWOTGRASS
t65333 DEFB 19 ; #R55722: 'EINSTEIN'
 65334 DEFM " is going to tell "
 65352 DEFB 20 ; #R55736: 'MR WACKER'
 65353 DEFM " what you're up to. "
 65373 DEFM "You must stop him getting to his study this break"
 65422 DEFB 3  ; #R55830: '#SPACE8' (8 spaces)

; '{BOY WANDER} has hidden a pea-shooter with your name on it on the
; fire-escape. If {MR WACKER} gets there before {BOY WANDER} you'll get
; lines{8 spaces}'
;
; Used by the routine at #R63488.
@label=M_WANDERHIDDEN
t65423 DEFB 17 ; #R55694: 'BOY WANDER'
 65424 DEFM " has hidden a pea-shooter with your name on it"
 65470 DEFM " on the fire-escape."
 65490 DEFM " If "
 65494 DEFB 20 ; #R55736: 'MR WACKER'
 65495 DEFM " gets there before "
 65514 DEFB 17 ; #R55694: 'BOY WANDER'
 65515 DEFM " you'll get lines"
 65532 DEFB 3  ; #R55830: '#SPACE8' (8 spaces)

; Unused
u65533 DEFB 66,60,0
